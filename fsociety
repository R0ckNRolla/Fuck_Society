#!/usr/bin/python
# Autore: Skull00
import os, sys, time, readline, signal, socket, requests, datetime, random
from time import sleep
import platform # cat os
import urllib2, json # Geo-Location
import struct # get gateway (+socket)
import re, uuid # get mac address
import argparse

reload(sys)
sys.setdefaultencoding('utf8') # for raw input ansi/unicode

biohazard = u"\u2623"
# Titolo terminale
sys.stdout.write("\x1b]2;" + biohazard + " Fuck Society " + biohazard + "\x07")

global end, white, red, blue, green, dark_gray, bright_green, bright_cyan, bright_yellow, underline, Tools, versione
end = '\033[0m'
white = '\033[1;37m'
red = '\033[1;31m'
blue = '\033[1;34m'
green = '\033[0;32m'
dark_gray = '\033[1;30m'
bright_green = '\033[1;32m'
bright_cyan = '\033[1;36m'
bright_yellow = '\033[1;33m'
#
underline = '\033[4m'
Tools = "171 Tools"
versione = "v1.1.3"

if sys.version_info.major >= 2.7:
    print("\n// %sAttenzione%s: Questa versione non e' supportata dal tuo sistema."%(bright_yellow, end))
    print("// Esegui %sinstaller.py%s per installare tutto il necessario.\n"%(bright_green, end))
    sys.exit()

euid = os.geteuid()
if euid != 0:
    print("// %sAttenzione%s: Permessi di root richiesti."%(bright_yellow,end))
    time.sleep(.5)
    args = ['sudo', sys.executable] + sys.argv + [os.environ]
    # the next line replaces the currently-running process with the sudo
    os.execlpe('sudo', *args)

# Verifica se eseguito installer.py
try:
    import netifaces,paramiko
except ImportError:
    print("")
    print("// %sAttenzione%s: Esegui %sinstaller.py%s per avviare il programma."%(bright_yellow,end, red,end))
    print("")
    sys.exit()

def get_gateway():
    with open("/proc/net/route") as fh:
            for line in fh:
                fields = line.strip().split()
                if fields[1] != '00000000' or not int(fields[3], 16) & 2:
                    continue
                return socket.inet_ntoa(struct.pack("<L", int(fields[2], 16)))
#
def menu():
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=28, cols=91))
    sys.stdout.write(end)
    class MyCompleter(object):  # Custom completer
        def __init__(self, options):
            self.options = sorted(options)
        def complete(self, text, state):
            if state == 0:  # on first trigger, build possible matches
                if text:  # cache matches (entries that start with entered text)
                    self.matches = [s for s in self.options
                                        if s and s.startswith(text)]
                else:  # no text entered, all matches possible
                    self.matches = self.options[:]
            # return match indexed by state
            try:
                return self.matches[state]
            except IndexError:
                return None
    completer = MyCompleter([
    # Comandi - unica categoria
    "torghost","os","help","info","updatedb","banner",
    "ifconfig","macchanger","msfconsole","ftp","net_restart","mapscii",
    "restart","reload","kill","quit","exit","ping",
    # Local Scanning
    "nmap","netdiscover","amap","ciscotorch",
    # Gathering
    "geoip", "whois", "maltego", "sn1per", "red_hawk", "ktfconsole", "operativef",
    "dmitry", "inspy","credmap","theharvester",
    # WebApp
    "xerxes", "ufonet", "zambie", "goldeneye","recon-ng","sslscan","ipmipwn","vega","webscarab","thcssldos",
    "xsstracer","fbht","pybomber","whatweb","commix","onioff","joomscan","hping3","miranda","snmpcheck","dhcpig",
    "sqlmap", "sqliv","jaidam","sshscan","pentmenu","a2sv","crips","vbscan","torshammer","siege","blindelephant",
    "brutesploit","medusa","jsql","dnsenum","dnsmap","dotdotpwn","metagoofil","sslyze","t50","burpsuite","uatester",
    "cpscan","dtect", "dracnmap", "sechub", "arachni", "wpscan", "zaproxy", "zenmap", "uniscan","cutycapt","responder",
    "droopescan", "striker","instarecon","dsxs","automater","intrace","smtpuserenum","angryfuzzer","dirbuster","sqldict",
    "hydra","ftp", "xhydra", "tulpar", "bingoo","xattacker", "knockmail","bluelog","fimap","infoga","hash-identifier",
    "blazy", "xsssniper","sublist3r","urlextractor","breacher","ip2host","parsero","nikto","dirb","nosqlmap","cewl",
    # WiFi
    "airgeddon", "wifite", "fakeauth", "fluxion", "wifiphisher",
    "routersploit", "wirespy", "wpsbreaker", "netattack",
    # Sniffing
    "bettercap", "morpheus", "wireshark", "ettercap", "mitmf","mitmap","cdpsnarf","cookie-cadger","p0f",
    "sslstrip","voiphopper",
    # Exploiting
    "chaos", "overthruster", "arcanus", "evildroid", "ezsploit", "zirikatu",
    "astroid","kautilya","termineter","wifijammer","yersinia",
    "armitage", "setoolkit", "fatrat", "eggshell", "shellsploit", "saint","koadic",
    "pentestly","debinject","ciscoge","wole","xspy","findmyhash",
    "beelogger","brutal","jexboss","weeman","androidpincrack","u3pwn", "ngrok",
    "l0l","extract-hash","kayak","ioscrack","cheetah","powerfuzzer",
    # MultiTool
    "hakkuf","penbox","simple-ducky","discover","zarp","sb0x","atscan","inguma","websploit",
    # Others
    "printerspam", "httrack"
    ])
    readline.set_completer(completer.complete)
    readline.parse_and_bind('tab: complete')

    # input
    try:
        command_input = raw_input("[FS]:")
    except KeyboardInterrupt:
        try:
            print("\n// Premi nuovamente Ctrl+C per uscire")
            time.sleep(1)
            return menu()
        except KeyboardInterrupt:
            exit()
    except EOFError:
        print("\n// %sAttenzione%s: Usa %sexit%s o %squit%s per uscire."%(bright_yellow,end, blue,end, blue,end))
        return menu()
    tokens = command_input.split()
    try:
        command = tokens[0]
    except IndexError:
        command = None
    try:
        option = tokens[1]
    except IndexError:
        option = None
    try:
        argument = tokens[2]
    except IndexError:
        argument = None
    try:
        argument2 = tokens[3]
    except IndexError:
        argument2 = None
    try:
        argument3 = tokens[4]
    except IndexError:
        argument3 = None
    try:
        argument4 = tokens[5]
    except IndexError:
        argument4 = None
    try:
        argument5 = tokens[6]
    except IndexError:
        argument5 = None
    try:
        argument6 = tokens[7]
    except IndexError:
        argument6 = None
    try:
        argument7 = tokens[8]
    except IndexError:
        argument7 = None
    try:
        argument8 = tokens[9]
    except IndexError:
        argument8 = None
    args = tokens[1:]

    # comandi tecnici
    if command == 'help' or command == '?':
        help()
    elif command == 'info':
        info()
    elif command == 'clear' or command == 'reset':
        os.system(command)
        return menu()
    elif command == 'logo' or command == 'banner':
        logo_menu()
    elif command == None:
        return menu()
    # comandi di sistema
    elif command == 'restart':
        sys.stdout.write("// Fermo i servizi ")
        sys.stdout.flush()
        os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("[ %sDONE%s ]\n"%(bright_green,end))
        sys.stdout.flush()
        time.sleep(1)
        os.system("echo 'file destinato al macello' > Logs/verify_first_boot.txt") # verifica primo avvio
        logo_menu()
    elif command == 'reload':
        sys.stdout.write("// Ricarico i servizi ")
        sys.stdout.flush()
        os.system("service postgresql restart && echo 1 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("[ %sDONE%s ]\n"%(bright_green,end))
        sys.stdout.flush()
        return menu()
    elif command == 'kill':
        sys.stdout.write("// Fermo i servizi ")
        sys.stdout.flush()
        os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("[ %sDONE%s ]\n"%(bright_green,end))
        sys.stdout.flush()
        return menu()
    elif command == 'exit' or command == 'quit':
        exit()
    #
    elif command == 'updatedb':
        os.system("updatedb")
        print("[ %sOK%s ] Database aggiornato."%(bright_green,end))
        return menu()
    elif command == 'os':
        osc = command_input.split("os")
        osc = osc[1]
        os.system(osc)
        return menu()

    elif command == 'net_restart':
        os.system("service network-manager restart")
        print("[ %sOK%s ] Servizio %snetwork-manager%s riavviato."%(bright_green,end, blue,end))
        return menu()
    elif command == 'service':
        os.system(command_input)
        return menu()

    elif command == 'ifconfig':
        if option:
            if argument:
                os.system("ifconfig %s %s"%(option,argument))
                return menu()
            os.system("ifconfig %s"%(option))
            return menu()
        try:
            print("// Interface    :  " + blue + netifaces.gateways()['default'][netifaces.AF_INET][1] + end)
        except KeyError:
            print("// Interface    :  " + blue + "Nessuna Interfaccia Connessa" + end)
        try:
            print("// Local IP     :  " + blue + [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0] + end)
        except socket.error:
            print("// Local IP     :  " + blue + "Nessuna Connessione" + end)
        print("// Mac Address  :  " + blue + ':'.join(re.findall('..', '%012x' % uuid.getnode())) + end)
        print("// Gateway      :  " + blue + str(get_gateway()) + end)
        try:
            print("// Public IP    :  " + blue + requests.get('http://ip.42.pl/raw').text + end)
        except requests.exceptions.ConnectionError:
            print("// Public IP    :  " + blue + "Nessuna Connessione" + end)
        host = "8.8.8.8"
        port = 53
        timeout = 3
        try:
            socket.setdefaulttimeout(timeout)
            socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))
            pass
        except Exception:
            print("// %sAttenzione%s: Nessuna connessione a internet."%(bright_yellow,end))
            print("// %sAttenzione%s: Disattiva %sTorGhost%s o verifica la tua connessione."%(bright_yellow,end, blue,end))
        return menu()
    elif command == 'ping':
        if option:
            os.system("ping %s"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sPing%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    # Spoofing
    elif command == 'macchanger' or command == 'mac':
        os.system("xterm -T 'Changing Mac Address...' -e 'ifconfig wlan0 down && ifconfig eth0 down && macchanger -r wlan0 && macchanger -r eth0 && ifconfig eth0 up && ifconfig wlan0 up && service network-manager restart'")
        print("[ %sOK%s ] Indirizzo MAC cambiato."%(bright_green,end))
        return menu()
    elif command == 'torghost':
        if option == 'start':
            os.system("xterm -T 'TorGhost' -e 'torghost start'")
            print("[ %sOK%s ] TorGhost Avviato."%(bright_green,end))
            return menu()
        elif option == 'stop':
            os.system("xterm -T 'TorGhost' -e 'torghost stop'")
            os.system('echo "nameserver 8.8.8.8" > /etc/resolv.conf')
            print("[ %sOK%s ] TorGhost Fermato."%(bright_green,end))
            print("[ %sOK%s ] File %s/etc/resolv.conf%s aggiornato."%(bright_green,end, blue,end))
            return menu()
        else:
            print("// %sErrore%s: Argomenti non validi. Usa %storghost start%s o %storghost stop%s."%(red,end, blue,end, blue,end))
            return menu()

    # Cracking
    elif command == 'androidpincrack':
        if option:
            if os.path.exists(option) == False:
                print("// %sErrore%s: Directory o File non trovati."%(red,end))
                return menu()
            if argument:
                os.system("cd Tools/AndroidPINCrack/ && python AndroidPINCrack.py -H %s -s %s"%(option, argument))
            else:
                print("// %sErrore%s: %sAndroidPINCrack%s richiede un %sSalt Hash%s."%(red,end, blue,end, blue,end))
        else:
            print("// %sErrore%s: %sAndroidPINCrack%s richiede il file %s*.key%s e un %sSalt Hash%s."%(red,end, blue,end, blue,end, blue,end))
        return menu()
    elif command == 'extract-hash':
        if option:
            if os.path.exists(option) == False:
                print("// %sErrore%s: File o Directory non trovati."%(red,end))
                return menu()
            os.system("cd Tools/extract-hashes/ && python extract-hash.py %s"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sExtract-Hash%s richiede un file per l'estrazione."%(red,end, blue,end))
            return menu()
    elif command == 'ioscrack':
        if option:
            if option == '-h':
                print("")
                print("// %sAttenzione%s:"%(bright_yellow,end))
                print("   Se iTunes e' installato esegui il backup del dispositivo vittima e avvia ioscrack con")
                print("   %sioscrack auto%s."%(blue,end))
                print("   Se iTunes non e' installato inserisci manualmente la cartella di backup con")
                print("   %sioscrack /path/to/backup/folder%s."%(blue,end))
                print("")
                print("// %sComandi IosCrack%s:"%(bright_green,end))
                print(" $ ioscrack <module> ")
                print("// %sModuli%s:"%(bright_green,end))
                print(" [ auto / [path/to/backup/folder] ]")
                print("")
                return menu()
            elif option == 'auto':
                os.system("cd Tools/iOSRestrictionBruteForce/ && python ioscrack.py -a -v")
                print("")
                return menu()
            if 'auto' not in option:
                os.system("cd Tools/iOSRestrictionBruteForce/ && python ioscrack.py -b %s -v"%(option))
                print("")
                return menu()
        else:
            print("// %sErrore%s: %sIosCrack%s richiede un opzione valida - %sioscrack -h%s per ulteriori comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'cheetah':
        if option:
            if option == '-h':
                print("")
                print("// %sComandi Aggiuntivi Cheetah%s (%shttp bruteforce%s):"%(bright_green,end, bright_green,end))
                print(" Come usarlo: $ cheetah <host> [path/to/wordlist.txt]")
                print("")
                print("// %sAttenzione%s: Se desideri usare una wordlist diversa da quella di default di Cheetah,"%(bright_yellow,end))
                print("               inseriscila dopo l'indirizzo come nell'esempio d'uso qui sopra.")
                print("")
                return menu()
            if argument:
                if os.path.exists(argument) == False:
                    print("// %sErrore%s: Wordlist non trovata."%(red,end))
                    return menu()
                os.system("cd Tools/cheetah/ && python cheetah.py -u %s -p %s"%(option,argument))
                print("")
                return menu()
            os.system("cd Tools/cheetah/ && python cheetah.py -u %s"%(option))
            print("")
            return menu()
        else:
            print("// %sErrore%s: %sCheetah%s richiede un indirizzo. Digita %scheetah -h%s per ulteriori comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'medusa':
        modules_list = ["afp","cvs","ftp","http","imap","mssql","mysql","nntp","pop3","postgres","rdp","rexec","rsh","smbnt","ssh","svn","telnet","vmauthd","vnc","wrapper"]
        if option:
            if option == '-h':
                print("")
                print("// %sComandi Medusa%s:"%(bright_green,end))
                print(" Come usarlo: $ medusa <host> <user> <pswdfile.txt> <module> [threads n. (facoltativo)]")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print("/ afp / cvs / ftp / http / imap / mssql / mysql / nntp / pop3 / postgres / rdp / rexec")
                print("/ rsh / smbnt / ssh / svn / telnet / vmauthd / vnc / wrapper")
                print("")
                return menu()
            elif option:
                if argument:
                    if argument2: # psw file
                        if os.path.exists(argument2) == False:
                            print("// %sErrore%s: Wordlist %s%s%s non trovata."%(red,end, blue,argument2,end))
                            return menu()
                        if argument3 in modules_list:
                            if argument4:
                                os.system("xterm -T 'Medusa' -e 'medusa -h %s -u %s -P %s -M %s -t %s;echo '';echo Press ENTER To Close;read'"%(option, argument, argument2, argument3,argument4))
                                return menu()
                            os.system("xterm -T 'Medusa' -e 'medusa -h %s -u %s -P %s -M %s;echo '';echo Press ENTER To Close;read'"%(option, argument, argument2, argument3))
                            return menu()
                        else:
                            print("// %sErrore%s: Modulo non valido o mancante - %smedusa -h%s per i comandi."%(red,end, blue,end))
                            return menu()
                    else:
                        print("// %sErrore%s: Wordlist e Modulo mancanti - %smedusa -h%s per i comandi."%(red,end, blue,end))
                        return menu()
                else:
                    print("// %sErrore%s: Argomenti mancanti - %smedusa -h%s per i comandi."%(red,end, blue,end))
                    return menu()
            else:
                print("// %sErrore%s: Argomenti mancanti - %smedusa -h%s per i comandi."%(red,end, blue,end))
                return menu()
        else:
            print("// %sErrore%s: %sMedusa%s richiede una serie di argomenti validi - %smedusa -h%s per i comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'findmyhash':
        hash_list = ["-h","MD4","MD5","SHA1","SHA224","SHA256","SHA384","SHA512","RMD160","GOST","WHIRLPOOL","LM","NTLM","MYSQL","CISCO7","JUNIPER","LDAP_MD5","LDAP_SHA1"]
        if option:
            if option not in hash_list:
                print("// %sErrore%s: Algoritmo non valido."%(red,end))
                return menu()
            if option == '-h':
                print("")
                print("// %sComandi FindMyHash%s:"%(bright_green,end))
                print(" Come usarlo: $ findmyhash <algorithm> <hash>")
                print("")
                print("// %sAlgoritmi%s:"%(bright_green,end))
                print(" [ MD4 / MD5 / SHA1 / SHA224 / SHA256 / SHA384 / SHA512 / RMD160 / GOST / WHIRLPOOL / LM ]")
                print(" [ NTLM / MYSQL / CISCO7 / JUNIPER / LDAP_MD5 / LDAP_SHA1 ]")
                print("")
                return menu()
            if argument:
                os.system("findmyhash %s -h %s"%(option, argument))
                return menu()
            else:
                print("// %sErrore%s: Hash mancante."%(red,end, blue,end))
                return menu()
        else:
            print("// %sErrore%s: %sFindMyHash%s richiede una serie di argomenti - %sfindmyhash -h%s per i comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'hash-identifier':
        print("")
        os.system("hash-identifier")
        logo_menu()

    # Sistema
    elif command == 'msfconsole' or command == 'msf':
		os.system("gnome-terminal -- msfconsole")
		return menu()
    elif command == 'ftp':
        os.system("gnome-terminal -- ftp")
        return menu()
    elif command == 'mapscii':
        os.system("telnet mapscii.me")
        logo_menu()

    # Scanning
    elif command == 'nmap':
        commands = ['local','dlocal','web','dweb','os','-h']
        if option == None: # Cancella ELSE > questo if e' piu' importante della tua vita caro lettore :)
            print("// %sErrore%s: %sNmap%s richiede un opzione valida - %snmap -h%s per ulteriori informazioni."%(red,end, blue,end, blue,end))
            return menu()
        elif option not in commands:
            os.system(command_input)
            return menu()
        elif option == 'local':
            os.system("nmap -sn 192.168.1.0/24")
            return menu()
        elif option == 'dlocal':
            os.system("nmap -sV -T4 -F 192.168.1.0/24")
            return menu()
        elif option == 'web':
            if argument:
                os.system("nmap %s"%(argument))
                return menu()
            else:
                print("// %sErrore%s: %sNmap%s richiede un indirizzo."%(red,end, blue,end))
                return menu()
        elif option == 'dweb':
            if argument:
                os.system("nmap -O -F -A -sN %s"%(argument))
                return menu()
            else:
                print("// %sErrore%s: %sNmap%s richiede un indirizzo."%(red,end, blue,end))
                return menu()
        elif option == 'os':
            if argument:
                os.system("nmap -O %s"%(argument))
                return menu()
            else:
                print("// %sErrore%s: %sNmap%s richiede un indirizzo."%(red,end, blue,end))
                return menu()
        elif option == '-h':
            print("")
            print("// %sComandi Nmap%s:                                      "%(bright_green, end))
            print("  Come usarlo: $ nmap <option> [target]                   ")
            print("                                                          ")
            print("// %sOpzioni%s:                                           "%(bright_green,end))
            print(" local    : Scansione rapida locale                       ")
            print(" dlocal   : Scansione dettagliata locale                  ")
            print(" web *    : Scansione sito internet                       ")
            print(" dweb *   : Scansione dettagliata sito internet           ")
            print(" os *     : Scansione dispositivo locale                  ")
            print(" [custom] : Comando che vuoi                              ")
            print("")
            return menu()
    elif command == 'netdiscover':
        os.system("netdiscover -p")
        return menu()

    # Gathering
    elif command == 'geoip':
        if option:
            target = option
            try:
                url = "http://ip-api.com/json/"
                response = urllib2.urlopen(url + target)
                data = response.read()
                values = json.loads(data)
                ip = blue + values['query'] + end
                try:
                    country = values['country']
                except KeyError:
                    country = "-"
                try:
                    region = values['regionName']
                except KeyError:
                    region = "-"
                try:
                    city = values['city']
                except KeyError:
                    city = "-"
                try:
                    zip_code = values['zip']
                except KeyError:
                    zip_code = "-"
                try:
                    isp = red + values['isp'] + end
                except KeyError:
                    isp = "-"
                try:
                    gestore = red + values['as'] + end
                except KeyError:
                    gestore = "-"
                try:
                    lat_lon = bright_green + str(values['lat']) + " / " + str(values['lon']) + end
                except KeyError:
                    lat_lon = "-"
                try:
                    timezone = bright_green + values['timezone'] + end
                except KeyError:
                    timezone = "-"
                try:
                    maps = "%shttps://www.google.com/maps/search/?api=1&query=%s,%s%s"%(bright_green, str(values['lat']), str(values['lon']), end)
                except KeyError:
                    maps = "-"
                print("// IP        - %s"%(ip))
                print("// Nazione   - %s"%(country))
                print("// Regione   - %s"%(region))
                print("// Citta'    - %s"%(city))
                print("// C.Postale - %s"%(zip_code))
                print("// Provider  - %s"%(isp))
                print("// Gestore   - %s"%(gestore))
                print("// Lat/Long  - %s"%(lat_lon))
                print("// F.Orario  - %s"%(timezone))
                print("// G.Maps    - %s"%(maps))
            except socket.timeout:
                print("// %sErrore%s: Nessuna Connessione."%(red,end))
            except urllib2.URLError:
                print("// %sErrore%s: Nessuna Connessione."%(red,end))
            return menu()
        else:
            print("// %sErrore%s: %sGeoip%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'whois':
        if option:
            os.system("whois -H %s"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sWhois%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'maltego':
        os.system("gnome-terminal -- maltego")
        return menu()
    elif command == 'sn1per':
        if option:
            os.system("cd Tools/Sn1per/ && ./sniper %s"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sSn1per%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'dmitry':
        if option:
            os.system("dmitry %s -i -w -s -e -p -o Logs/dmitry_log"%(option))
            print("\n// Informazioni salvate in %sLogs/dmitry_log.txt%s"%(blue,end))
            return menu()
        else:
            print("// %sErrore%s: %sDmitry%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'red_hawk' or command_input == 'red hawk':
        os.system("gnome-terminal -- php " + os.getcwd() + "/Tools/RED_HAWK/rhawk.php")
        return menu()
    elif command == 'ktfconsole' or command == 'ktf':
        os.system("gnome-terminal -- ktf.console")
        return menu()
    elif command == 'operativef' or command == 'operative':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/operative-framework/operative.py")
        return menu()
    elif command == 'inspy':
        if option:
            if argument:
                job_list = option.split()
                print("")
                for elements in job_list:
                    os.system('echo "%s" > Logs/inspy.txt'%(elements))
                    print("Ricerca: // %s%s%s"%(blue,elements,end))
                os.system("inspy --empspy Logs/inspy.txt %s"%(argument))
                os.system("rm Logs/inspy.txt")
                print("")
                return menu()
            else:
                print("// %sErrore%s: %sInspy%s richiede un %sLuogo%s."%(red,end, blue,end, blue,end))
        else:
            print("// %sErrore%s: %sInspy%s richiede un %sMestiere%s ed un %sLuogo%s."%(red,end, blue,end, blue,end, blue,end))
        return menu()
    elif command == 'tulpar':
        modules_list = ["-h","links","e-mail","sql","xss","crawl","whois"]
        if option:
            if option not in modules_list:
                print("// %sErrore%s: Modulo non valido."%(red,end))
                return menu()
            if option == '-h':
                print("")
                print("// %sComandi tulpar%s:"%(bright_green,end))
                print(" Come usarlo: $ tulpar <modulo> <indirizzo>")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print(" [ links / e-mail / sql / xss / crawl / whois ]")
                print("")
                return menu()
            if argument:
                target = argument
                if 'http://' not in argument:
                    target = "http://"+argument
                if 'http://' in argument or 'https://' in argument:
                    pass
                os.system("cd Tools/tulpar/ && python tulpar.py %s %s"%(option,target))
                return menu()
            else:
                print("// %sErrore%s: %sTulpar%s richiede un indirizzo."%(red,end, blue,end))
                return menu()
        else:
            print("// %sErrore%s: %sTulpar%s richiede un modulo e un indirizzo - %stulpar -h%s per ulteriori comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'credmap':
        if option:
            os.system("cd Tools/credmap && python credmap.py --email %s"%(option))
        else:
            print("// %sErrore%s: %sCredmap%s richiede un %susername%s o un %sindirizzo email%s."%(red,end, blue,end, blue,end, blue,end))
        return menu()
    elif command == 'theharvester':
        if option:
            target = option
            if "http://" in option:
                target = option.split("http://")
                target = target[1]
            if "https://" in option:
                target = option.split("https://")
                target = target[1]
            if "www." in option or "www." in target:
                target = option.split("www.")
                target = target[1]
            os.system("theharvester -d %s -b all -v -n -t"%(target))
            print("")
            return menu()
        else:
            print("// %sErrore%s: %sTheHarvester%s richiede un indirizzo."%(red,end, blue,end))
            return menu()

    # WebApp
    elif command == 'ipmipwn':
        if option:
            os.system("cd Tools/IPMIPWN/ && python ipmipwn.py %s"%(option))
            return menu()
        else:
            print("// %sAttenzione%s: Assicurati che l'host abbia la porta 623 aperta. Questo tool utilizza la "%(bright_yellow,end))
            print("              vulnerabilita' 'Cipher 0' per il bypass dell'autenticazione.")
            print("")
            print("// %sErrore%s: %sIpmipwn%s richiede un indirizzo."%(red,end, blue, end))
            return menu()
    elif command == 'intrace':
        if option:
            if 'https://' in option:
                os.system("intrace -h %s -p 443 -s 4"%(option))
                print("")
                return menu()
            if 'http://' in option or 'http://' not in option:
                os.system("intrace -h %s -p 80 -s 4"%(option))
                print("")
                return menu()
        else:
            print("// %sErrore%s: %sInTrace%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'miranda':
        os.system("gnome-terminal -- miranda")
        return menu()
    elif command == 'powerfuzzer':
        os.system("gnome-terminal -- powerfuzzer")
        return menu()
    elif command == 'burpsuite':
        os.system("gnome-terminal -- burpsuite")
        return menu()

        # DDoS
    elif command == 'xerxes':
        if option:
            os.system("xterm -T 'Xerxes' -e './Tools/xerxes/xerxes %s 80'"%(option))
        else:
            print("// %sErrore%s: %sXerxes%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'ufonet':
        os.system("xterm -T 'UfoNet' -e 'cd Tools/ufonet/ && ./ufonet --download-zombies'")
        time.sleep(.02)
        os.system("xterm -T 'UfoNet Logs' -e 'cd Tools/ufonet/ && ./ufonet --gui'")
        return menu()
    elif command == 'zambie':
        os.system("cd Tools/zambie/ && python zambie.py")
        logo_menu()
    elif command == 'goldeneye':
        if option:
            target = option
            if 'http://' not in option:
                target = "http://" + option
            if 'http://' or 'https://' in option:
                pass
            os.system("gnome-terminal -- goldeneye %s -m random"%(target))
            return menu()
        else:
            print("// %sErrore%s: %sGoldeneye%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'torshammer':
        if option:
            os.system("xterm -T 'TorShammer' -e 'python Tools/torshammer/torshammer.py -t %s'"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sTorshammer%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 't50':
        if option:
            os.system("gnome-terminal -- t50 %s --flood --turbo"%(option))
            return menu()
        else:
            print("// %sErrore%s: %st50%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'thcssldos':
        if option:
            if 'www.' in option or '.' not in option or len(option) < 7:
                print("// %sErrore%s: Indirizzo IP non valido."%(red,end))
                return menu()
            try:
                if int(argument):
                    os.system("thc-ssl-dos %s %s --accept"%(option, argument))
                    print("")
                    return menu()
            except TypeError:
                print("// %sErrore%s: %sThc-Ssl-Dos%s richiede una porta."%(red,end, blue, end))
                return menu()
            except ValueError:
                print("// %sErrore%s: Porta non valida."%(red,end, blue,argument,end))
                return menu()
        else:
            print("// %sErrore%s: %sThc-SSL-Dos%s richiede un indirizzo IP e una Porta."%(red,end, blue,end))
            return menu()

        #injection
    elif command == 'sqlmap':
        modules_list = ["-h","scan", "inj"]
        if option:
            if option not in modules_list:
                print("// %sErrore%s: Modulo non valido. Digita %ssqlmap -h%s per i comandi."%(red,end, blue,end))
                return menu()
            if option == '-h':
                print("")
                print("// %sAttenzione%s:"%(bright_yellow,end))
                print(" <database>, <table>, <column(s)> vanno inseriti con l'avanzare dell'attacco.")
                print(" Per ottenere <database>   col modulo %sinj%s, digita %ssqlmap inj <target>%s."%(blue,end, blue,end))
                print(" Per ottenere <table>      col modulo %sinj%s, digita %ssqlmap inj <target> <database>%s."%(blue,end, blue,end))
                print(" Per ottenere <column(s)>  col modulo %sinj%s, digita %ssqlmap inj <target> <database> <table>%s."%(blue,end, blue,end))
                print(" Per ottenere il contenuto di <column(s)>, digita: \n %ssqlmap inj <target> <database> <table> <column(s)>%s."%(blue,end))
                print("")
                print("// %sAttenzione%s:"%(bright_yellow,end))
                print(" Nel modulo %sinj%s, per ottenete informazioni da piu' colonne contemporaneamente inserisci"%(blue,end))
                print(" <column(s)> nel seguente modo:")
                print(" %s<column>,<column>,<column>,...%s"%(blue,end))
                print("")
                print("// %sComandi Sqlmap%s:"%(bright_green,end))
                print(" Come usarlo: $ sqlmap [modulo] <target> [<database> <table> <column(s)>]")
                print(" ==> $ sqlmap scan <target>")
                print(" ==> $ sqlmap inj  <target> <database> <table> <columns>")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print(" [ scan / inj ]")
                print("")
                return menu()
            elif option == 'scan':
                if argument:
                    os.system("sqlmap -g %s"%(argument))
                    return menu()
                else:
                    print("// %sErrore%s: Modulo %sscan%s richiede un indirizzo."%(red,end, blue,end))
                    return menu()
            elif option == 'inj':
                if argument:
                    if argument2:
                        if argument3:
                            if argument4:
                                os.system("sqlmap -u %s -D %s -T %s -C %s --dump"%(argument,argument2,argument3,argument4))
                                return menu()
                            os.system("sqlmap -u %s -D %s -T %s --columns"%(argument,argument2,argument3))
                            return menu()
                        os.system("sqlmap -u %s -D %s --tables"%(argument,argument2))
                        return menu()
                    os.system("sqlmap -u %s --dbs"%(argument))
                    return menu()
                else: # if argument
                    print("// %sErrore%s: Modulo %sinj%s richiede un indirizzo."%(red,end, blue,end))
                    return menu()
        else: # if option
            print("// %sErrore%s: %sSqlmap%s richiede una serie di argomenti. Digita %ssqlmap -h%s per i comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'sqliv':
        if option == '-h':
                print("")
                print("// %sComandi Sqliv%s:"%(bright_green,end))
                print(" Come usarlo: $ sqliv [modulo] <target>")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print(" [ web / dork ]")
                print("")
                return menu()
        if option == 'dork':
            if argument:
                os.system("python Tools/sqliv/sqliv.py -e google -d %s -p 20"%(argument))
                os.system("xterm -T 'Moving...' -e 'rm Logs/searches.txt && mv searches.txt Logs/'")
            else:
                print("// %sErrore%s: %sSqliv%s richiede un indirizzo."%(red,end, blue,end))
        elif option == 'web':
            if argument:
                os.system("python Tools/sqliv/sqliv.py -e google -t %s -p 20"%(argument))
            else:
                print("// %sErrore%s: %sSqliv%s richiede un indirizzo."%(red,end, blue,end))
        else:
            print("// %sErrore%s: argomenti mancanti per %sSqliv%s. Digita %ssqliv -h%s per aiuto."%(red,end, blue,end, blue,end))
        return menu()
    elif command == 'commix':
        if option:
            if option == '-h':
                print("")
                print("// %sComandi Commix Aggiuntivi%s:"%(bright_green,end))
                print("  Uso: $ commix <indirizzo> [opzioni]")
                print("")
                print("  l3          : Usa livello 3 per l'injection (lento)")
                print("  shellshock  : Usa metodo shellshock per l'injection")
                print("")
                return menu()
            if argument == 'l3' and argument2 == 'shellshock' or argument == 'shellshock' and argument2 == 'l3':
                print("// %sErrore%s: %sshellshock%s e %sl3%s non possono essere usati insieme."%(red,end, blue,end, blue,end))
                return menu()
            elif argument == 'l3':
                os.system("commix -u %s --ignore-401 --random-agent --force-ssl --all --level=3"%(option))
                return menu()
            elif argument == 'shellshock':
                os.system("commix -u %s --ignore-401 --random-agent --force-ssl --all --shellshock"%(option))
                return menu()
            os.system("commix -u %s --ignore-401 --random-agent --force-ssl --all"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sCommix%s richiede un indirizzo. Digita %scommix -h%s per ulteriori comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'jsql':
        os.system("gnome-terminal -- jsql")
        return menu()
    elif command == 'nosqlmap':
        os.system("gnome-terminal -- NoSQLMap")
        return menu()
    elif command == 'webscarab':
        os.system("gnome-terminal -- webscarab")
        return menu()
    elif command == 'sqldict':
        os.system("gnome-terminal -- sqldict")
        return menu()
    elif command == 'cewl':
        if option:
            os.system("cewl --email -a --no-words %s"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sCeWL%s richiede un indirizzo."%(red,end, blue,end))
            return menu()

        # Scanning
    elif command == 'cpscan':
        if option:
            if '.' not in option:
                print("// %sErrore%s: Inserisci un indirizzo valido."%(red,end))
                return menu()
            os.system("xterm -T 'Cpscan' -e 'cd Tools/cpscan/ && python cpscan.py -t %s -v'"%(option))
        else:
            print("// %sErrore%s: %sCpscan%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'breacher':
        if option:
            if '.' not in option:
                print("// %sErrore%s: Inserisci un indirizzo valido."%(red,end, blue,end))
                return menu()
            os.system("cd Tools/Breacher/ && python breacher.py -u %s"%(option))
            print("")
            return menu()
        else:
            print("// %sErrore%s: %sBreacher%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'dotdotpwn':
        if option:
            print("")
            os.system("dotdotpwn -m http -h %s -O -s"%(option))
            print("")
            return menu()
        else:
            print("// %sErrore%s: %sDotDotPwn%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'parsero':
        if option:
            os.system("parsero -u %s -sb"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sParsero%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'angryfuzzer':
        if option:
            if 'http://' not in option:
                os.system("cd Tools/angryFuzzer/ && python angryFuzzer.py -u http://%s -q"%(option))
                return menu()
            if 'http://' in option or 'https://' in option:
                os.system("cd Tools/angryFuzzer/ && python angryFuzzer.py -u %s -q"%(option))
                return menu()
        else:
            print("// %sErrore%s: %sAngryFuzzer%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'dirb':
        if option:
            target = option
            print("// Salvataggio della ricerca al termine di DIRB in %sLogs/DIRB.txt%s"%(blue,end))
            if 'http://' not in option:
                target = "http://" + option
            if 'http://' in option or 'https://' in option:
                pass
            os.system("gnome-terminal -- dirb %s -f -l -w -o Logs/DIRB.txt"%(target))
        else:
            print("// %sErrore%s: %sDIRB%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'dirbuster':
        os.system("gnome-terminal -- dirbuster")
        return menu()
    elif command == 'dtect':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/D-TECT/d-tect.py")
        return menu()
    elif command == 'dracnmap':
        os.system("reset")
        os.system("./Tools/Dracnmap/dracnmap*.sh")
        logo_menu()
    elif command == 'sechub':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/secHub/sechub.py")
        return menu()
    elif command == 'arachni':
        if option:
            target = option
            if 'http://' in option or 'https://' in option:
                pass
            elif 'http://' not in option:
                target = "http://" + option
            os.system("arachni %s"%(target))
        else:
            print("// %sErrore%s: %sArachni%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'wpscan':
        if option:
            os.system("wpscan %s"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sWpscan%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'zaproxy':
        os.system("gnome-terminal -- zaproxy")
        return menu()
    elif command == 'zenmap':
        os.system("gnome-terminal -- zenmap")
        return menu()
    elif command == 'uniscan':
        if option:
            os.system("uniscan -u %s -qwedsg"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sUniscan%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'droopescan':
        if option:
            modules = ['drupal','joomla','moodle','silverstripe','wordpress','-h']
            if option == '-h':
                print("")
                print("// %sComandi Droopescan%s:"%(bright_green,end))
                print(" Come usarlo: $ droopescan <module> <target>")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print(" [ drupal / joomla / moodle / silverstripe / wordpress ]")
                print("")
                return menu()
            elif option in modules:
                if argument:
                    target = argument
                    if 'http://' not in argument:
                        target = "http://" + argument
                    if 'http://' in argument or 'https://' in argument:
                        pass
                    os.system("droopescan scan %s -u http://%s"%(option, target))
                else:
                    print("// %sErrore%s: %sDroopescan%s richiede un indirizzo."%(red,end, blue,end))
            else:
                print("// %sErrore%s: Modulo non valido."%(red,end, blue,end))
        else:
            print("// %sErrore%s: %sDroopescan%s richiede una serie di argomenti - %sdroopescan -h%s per i comandi."%(red,end, blue,end, blue,end))
        return menu()
    elif command == 'bingoo':
        os.system("cd Tools/BinGoo/ && ./bingoo")
        logo_menu()
    elif command == 'knockmail':
        os.system("cd Tools/KnockMail/ && python knock.py")
        logo_menu()
    elif command == 'xsssniper':
        if option:
            os.system("cd Tools/xsssniper/ && python xsssniper.py -u %s --crawl"%(option))
        else:
            print("// %sErrore%s: %sXsssniper%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'striker':
        os.system("cd Tools/Striker/ && python striker.py")
        return menu()
    elif command == 'hping3':
        if option:
            if option == '-h':
                print("")
                print("// %sComandi Hping3%s:"%(bright_green,end))
                print("Come usarlo: $ hping3 <modulo> <target>")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print("[ scan / stress ]")
                print("")
                return menu()
            elif option == 'scan':
                if argument:
                    print("")
                    os.system("hping3 --scan 1-30,70-500 -S %s"%(argument))
                    print("")
                    return menu()
                else:
                    print("// %sErrore%s: %sHping3%s richiede un indirizzo."%(red,end, blue,end))
                    return menu()
            elif option == 'stress':
                print("")
                os.system("hping3 --flood %s"%(argument))
                print("")
                return menu()
            else:
                print("// %sErrore%s: %sHping3%s richiede un modulo valido e un indirizzo."%(red,end, blue,end))
                return menu()
        else:
            print("// %sErrore%s: %sHping3%s richiede un modulo valido e un indirizzo - %shping -h%s per i comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'sslyze':
        if option:
            os.system("sslyze --regular %s"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sSslyze%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'nikto':
        if option:
            os.system("nikto -host %s"%(option))
            print("")
            return menu()
        else:
            print("// %sErrore%s: %sNikto%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'blindelephant':
        if option:
            if option == '-h':
                print("")
                print("// %sComandi BlindElephant%s:"%(bright_green,end))
                print(" Come usarlo: $ blindelephant <module> <target>")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print(" [ drupal / wordpress ]")
                print("")
                return menu()
            elif option == 'drupal' or option == 'wordpress':
                if argument:
                    target = argument
                    if 'http://' not in argument:
                        target = "http://" + argument
                    if 'http://' in argument or 'https://' in argument:
                        pass
                    os.system("BlindElephant.py %s %s"%(target, option))
                    print("")
                else:
                    print("// %sErrore%s: %sBlindElephant%s richiede un indirizzo."%(red,end, blue,end))
            else:
                print("// %sErrore%s: %sBlindElephant%s richiede un modulo valido."%(red,end, blue,end))
        else:
            print("// %sErrore%s: %sBlindElephant%s richiede una serie di argomenti - %sblindelephant -h%s per i comandi."%(red,end, blue,end, blue,end))
        return menu()
    elif command == 'cutycapt':
        if option:
            target = option
            if 'http://' not in option:
                target = "http://" + option
            elif 'http://' in option or 'https://' in option:
                pass
            print("// Attendi il termine del processo se eseguito correttamente.")
            os.system("gnome-terminal -- cutycapt --url==%s --out==Logs/cutycapt_screenshot.png"%(target))
        else:
            print("// %sErrore%s: %sCutyCapt%s richiede un indirizzo da 'screenshottare'."%(red,end, blue,end))
        return menu()
    elif command == 'fimap':
        if option:
            target = option
            print("")
            if 'http://' not in option:
                target = "http://" + option
            if 'http://' in option or 'https://' in option:
                pass
            os.system("fimap -u %s -4 -C -D --force-run"%(target))
            print("")
        else:
            print("// %sErrore%s: %sFimap%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'uatester':
        if option:
            os.system("ua-tester -u %s -d MDCTBX -v"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sUa-Tester%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'vega':
        os.system("gnome-terminal -- vega")
        return menu()
    elif command == 'infoga':
        if option:
            os.system("cd Tools/Infoga/ && python infoga.py -d %s -s all -v 3"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sInfoga%s richiede un indirizzo."%(red,end, blue,end))
            return menu()

    # enum
    elif command == 'sublist3r':
        if option:
            os.system("sublist3r -d %s -p 80 -v"%(option))
        else:
            print("// %sErrore%s: %sSublist3r%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'dnsenum':
        if option:
            print("")
            os.system("dnsenum -u a -v %s"%(option))
            print("")
        else:
            print("// %sErrore%s: %sDnsenum%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'dnsmap':
        if option:
            target = option
            if "http://" in option:
                target = option.split("http://")
                target = target[1]
            if "https://" in option:
                target = option.split("https://")
                target = target[1]
            if "www." in option or "www." in target:
                target = option.split("www.")
                target = target[1]
            print("")
            os.system("dnsmap %s"%(target))
            print("")
            return menu()
        else:
            print("// %sErrore%s: %sDnsmap%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'smtpuserenum':
        if option:
            if option == '-h':
                print("")
                print("// Questo Tool verifica se un utente/una lista di utenti esiste")
                print("// %sComandi Smtp-User-Enum%s:"%(bright_green,end))
                print(" Come usarlo: $ smtpuserenum <user/user_list.txt> <indirizzo>")
                print("")
                return menu()
            if '.txt' in option or '.lst' in option:
                if argument:
                    if os.path.exists(option) == False:
                        print("// %sErrore%s: Directory o File non trovati."%(red,end))
                        return menu()
                    os.system("smtp-user-enum -M VRFY -U %s -t %s"%(option,argument))
                    print("")
                else:
                    print("// %sErrore%s: %sSmtp-User-Enum%s richiede un indirizzo."%(red,end, blue,end))
                return menu()
            if argument:
                os.system("smtp-user-enum -M VRFY -u %s -t %s"%(option,argument))
                print("")
            else:
                print("// %sErrore%s: %sSmtp-User-Enum%s richiede un indirizzo."%(red,end, blue,end))
        else:
            print("// %sErrore%s: %sSmtp-User-Enum%s richiede degli argomenti - %ssmtpuserenum -h%s per i comandi."%(red,end, blue,end, blue,end))
        return menu()

    elif command == 'jaidam':
        os.system("cd Tools/Jaidam/ && python jaidam.py")
        logo_menu()
    elif command == 'sshscan':
        if option:
            os.system("python Tools/SSHScan/sshscan.py -t %s"%(option))
            print("")
        else:
            print("// %sErrore%s: %sSSHScan%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'pentmenu':
        os.system("./Tools/pentmenu/pentmenu")
        logo_menu()
    elif command == 'a2sv':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            os.system("a2sv -t %s -p %s"%(port))
        else:
            print("// %sErrore%s: %sA2SV%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'recon-ng':
        os.system("gnome-terminal -- recon-ng")
        return menu()
    elif command == 'sslscan':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            print("")
            os.system("sslscan %s:%s"%(option, port))
            print("")
        else:
            print("// %sErrore%s: %sSslscan%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'xsstracer':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            os.system("cd Tools/XSSTracer/ && python xsstracer.py %s %s"%(option, port))
        else:
            print("// %sErrore%s: %sXSSTracer%s richiede un indirizzo."%(red, end, blue, end))
        return menu()
    elif command == 'crips':
        os.system("gnome-terminal -- crips")
        return menu()
    elif command == 'vbscan':
        if option:
            target = option
            if 'http://' not in option:
                target = "http://" + option
            elif 'http://' in option or 'https://' in option:
                pass
            os.system("cd Tools/vbscan/ && perl vbscan.pl %s"%(target))
        else:
            print("// %sErrore%s: %sVbscan%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'whatweb':
        if option:
            os.system("whatweb -v -a 3 %s"%(option))
        else:
            print("// %sErrore%s: %sWhatWeb%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'siege':
        if option:
            os.system("siege -g %s"%(option))
        else:
            print("// %sErrore%s: %sSiege%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'urlextractor':
        if option:
            os.system("cd Tools/URLextractor/ && ./extractor.sh %s"%(option))
            print("")
        else:
            print("// %sErrore%s: %sURLextractor%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'instarecon':
        if option:
            target = option
            if "http://" in option:
                target = option.split("http://")
                target = target[1]
            if "https://" in option:
                target = option.split("https://")
                target = target[1]
            if "www." in option or "www." in target:
                target = option.split("www.")
                target = target[1]
            os.system("instarecon.py %s"%(target))
            print("")
        else:
            print("// %sErrore%s: %sInstaRecon%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'onioff':
        if option:
            if '.onion' not in option:
                print("// %sErrore%s: %sOnioff%s richiede un indirizzo Tor valido."%(red,end, blue,end))
                return menu()
            sys.stdout.write("// Avvio Tor")
            sys.stdout.flush()
            os.system("service tor start")
            sys.stdout.write("  [ %sDONE%s ]\n"%(bright_green,end))
            sys.stdout.flush()
            os.system("cd Tools/onioff/ && python onioff.py %s"%(option))
            sys.stdout.write("\n%s// Fermo Tor"%(end))
            sys.stdout.flush()
            os.system("service tor stop")
            sys.stdout.write("  [ %sDONE%s ]\n"%(bright_green,end))
            sys.stdout.flush()
        else:
            print("// %sErrore%s: %sOnioff%s richiede un indirizzo Tor."%(red,end, blue,end))
        return menu()
    elif command == 'dsxs':
        if option:
            print("")
            os.system("cd Tools/DSXS/ && python dsxs.py -u %s"%(option))
            print("")
        else:
            print("// %sErrore%s: %sDsxs%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'joomscan':
        if option:
            if option == '-h':
                print("")
                print("// %sComandi Joomscan%s:"%(bright_green,end))
                print(" Come usarlo:  $ joomscan <target> [options]")
                print("")
                print(" -nf  : No Firewall   - Nessun rilevamento del Firewall")
                print(" -nv  : No Version    - Nessun Rilevamento della versione")
                print(" -nvf : No V. & No F. - Nessun Rilevamento Firewall e Versione")
                print(" -vu  : Verbosity     - Mostra un output piu' verboso")
                print("")
                return menu()
            if argument:
                if argument2:
                    if argument3:
                        if argument4:
                            os.system("joomscan -u %s -sp %s %s %s %s"%(option, argument, argument2, argument3, argument4))
                            return menu()
                        os.system("joomscan -u %s -sp %s %s %s"%(option, argument, argument2, argument3))
                        return menu()
                    os.system("joomscan -u %s -sp %s %s"%(option, argument, argument2))
                    return menu()
                elif argument == '-nf' or argument == '-vu' or argument == '-nvf' or argument == '-nv':
                    os.system("joomscan -u %s -sp %s"%(option,argument))
                    return menu()
                else:
                    print("// %sErrore%s: %sJoomscan%s richiede un opzione valida."%(red,end, blue,end))
                    return menu()
            os.system("joomscan -u %s -sp"%(option))
            return menu()
        else:
            print("// %sErrore%s: %sJoomscan%s richiede un indirizzo - %sjoomscan -h%s per ulteriori comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'amap':
        if option:
            try:
                if int(argument):
                    print("")
                    os.system("amap %s %s -A -bvq -1"%(option,argument))
                    print("")
                    return menu()
            except TypeError:
                print("// %sErrore%s: %sAmap%s richiede una porta."%(red,end, blue,end))
                return menu()
            except ValueError:
                print("// %sErrore%s: Porta non valida."%(red,end))
                return menu()
        else:
            print("// %sErrore%s: %sAmap%s richiede un indirizzo e una porta."%(red,end, blue,end))
            return menu()
    elif command == 'automater':
        if option:
            print("// Solo un momento...")
            os.system("automater %s -v"%(option))
            print("")
            return menu()
        else:
            print("// %sErrore%s: %sAutomater%s richiede un indirizzo."%(red,end, blue,end))
            return menu()
    elif command == 'ip2host':
        if option:
            checkwords = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n",
            "o","p","q","r","s","t","u","v","w","x","y","z"]
            for words in option:
                if words in checkwords or "." not in option or len(option) < 7:
                    print("// %sErrore%s: Indirizzo IP non valido."%(red,end))
                    return menu()
            try:
                socket.inet_aton(option)
            except (socket.error, UnboundLocalError):
                print("// %sErrore%s: Indirizzo IP non valido."%(red,end))
                return menu()
            hostname = socket.getfqdn(option)
            if hostname == option:
                print("// %sAttenzione%s: Nessun Hostname assegnato per: %s"%(bright_yellow,end, blue + hostname + end))
                return menu()
            print '// Hostname: ' + blue + hostname + end
            return menu()
        else:
            print("// %sErrore%s: %sIP2Host%s richiede un indirizzo IP."%(red,end, blue,end))
            return menu()

    # BruteForce
    elif command == 'hydra':
        if option == 'ftp':
            if argument:
                if argument2:
                    if argument3:
                        if os.path.exists(argument3) == False:
                            print("// %sErrore%s: Directory o File non trovati."%(red,end))
                            return menu()
                        print("")
                        os.system("hydra -l %s -P %s ftp://ftp.%s"%(argument2, argument3, argument))
                        os.system("xterm -e 'mv hydra.restore Oth/'")
                    else:
                        print("// %sErrore%s: %sHydra Ftp%s richiede una wordlist."%(red,end, blue,end))
                else:
                    print("// %sErrore%s: %sHydra Ftp%s richiede utente e wordlist."%(red,end, blue,end))
            else:
                print("// %sErrore%s: %sHydra Ftp%s richiede indirizzo, utente e wordlist."%(red,end, blue,end))
        else:
            print("// %sErrore%s: %sHydra Ftp%s richiede opzione, indirizzo, utente e wordlist."%(red,end, blue,end))
        return menu()
    elif command == 'xhydra':
        os.system("gnome-terminal -- xhydra")
        os.system("xterm -e 'rm hydra.restore'")
        return menu()
    elif command == 'xattacker':
        os.system("reset")
        os.system("cd Tools/XAttacker/ && perl XAttacker.pl")
        logo_menu()
    elif command == 'blazy':
        os.system("cd Tools/Blazy && python blazy.py")
        return menu()
    elif command == 'fbht':
        os.system("cd Tools/fbht/ && python main.py") ; sleep(.1)
        logo_menu()
    elif command == 'brutesploit':
        os.system("cd Tools/BruteSploit/ && ./Brutesploit")
        logo_menu()

    # WiFi
        # Hacking
    elif command == 'airgeddon':
        os.system("reset")
        os.system("cd Tools/airgeddon/ && ./airgeddon.sh")
        logo_menu()
    elif command == 'fluxion':
        os.system("reset")
        os.system("cd Tools/fluxion/ && ./fluxion.sh")
        logo_menu()
    elif command == 'fakeauth':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/FakeAuth/FakeAuth/fakeauth.py")
        return menu()
    elif command == 'wifiphisher':
        if option:
            os.system("wifiphisher -nJ -e '%s' -T firmware-upgrade"%(option))
        else:
            print("// %sErrore%s: %sWifiphisher%s richiede un nome per creare un Fake Access Point."%(red,end, blue,end))
        return menu()
    elif command == 'wifite':
        os.system("gnome-terminal -- wifite")
        return menu()
    elif command == 'wpsbreaker':
        os.system("cd Tools/HT-WPS-Breaker/ && ./HT-WB.sh")
        logo_menu()
    elif command == 'netattack':
        os.system("reset")
        os.system("cd Tools/netattack2/ && python netattack2.py")
        logo_menu()
    elif command == 'wifijammer':
        os.system("gnome-terminal -- python Tools/wifijammer/wifijammer.py")
        return menu()
        # Exploiting
    elif command == 'routersploit':
        os.system("reset")
        os.system("cd Tools/routersploit/ && python rsf.py")
        os.system("xterm -T 'Logs' -e 'rm routersploit.log'")
        logo_menu()
    elif command == 'wirespy':
        os.system("reset")
        os.system("cd Tools/wirespy/ && ./wirespy.sh")
        logo_menu()

    # MitM
    elif command == 'bettercap':
        os.system("gnome-terminal -- bettercap -X -L -S ARP --proxy --proxy-https --httpd -O Logs/bettercap-saves.txt")
        print("// Logs alla chiusura di Bettercap in %sLogs/bettercap-saves.txt%s"%(blue,end))
        return menu()
    elif command == 'morpheus':
        os.system("reset")
        os.system("cd Tools/morpheus/ && ./morpheus.sh")
        logo_menu()
    elif command == 'wireshark':
        os.system("gnome-terminal -- wireshark")
        return menu()
    elif command == 'ettercap':
        os.system("gnome-terminal -- ettercap -G")
        return menu()
    elif command == 'mitmf':
        os.system("gnome-terminal -- mitmf -i %s --spoof --arp --dns --hsts --gateway %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1], str(get_gateway())))
        return menu()
    elif command == 'mitmap':
        os.system("cd Tools/mitmAP/ && python3 mitmAP.py")
        print("\n// %sAttenzione%s: Attendi per la riconnessione alla rete.\n"%(bright_yellow,end))
        try:
            time.sleep(3)
        except (KeyboardInterrupt,EOFError):
            pass
        logo_menu()
    elif command == 'cdpsnarf':
        print("// Il pacchetto CDP e' generalmente usato da sistemi cisco per comunicare tra loro e coi")
        print("   dispositivi connessi. Esso puo' contenere informazioni sensibili sui dispositivi.")
        print("// %sAttenzione%s: L'output di %sCDPSnarf%s verra' salvato nella cartella %sLogs%s."%(bright_yellow,end, blue,end, blue,end))
        print("")
        time.sleep(3)
        os.system("cdpsnarf -i %s -w Logs/CDPSnarf.pcap"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
        print("")
        return menu()
    elif command == 'cookie-cadger':
        os.system("gnome-terminal -- cookie-cadger")
        return menu()
    elif command == 'ciscotorch':
        if option:
            modules = ["-h","all","ssh","snmp","telnet","ntp","tfpt","ssl","webserver","ios_http"]
            if option == '-h':
                print("")
                print("// %sComandi CiscoTorch%s:"%(bright_green,end))
                print(" Come Usarlo: $ ciscotorch <module> <scan_target>")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print(" [ all / ssh / snmp / telnet / ntp / tfpt / ssl / webserver / ios_http ]")
                print("")
                return menu()
            module = None
            if option == 'all':
                module = "-A"
            elif option == 'ssh':
                module = "-s"
            elif option == 'snmp':
                module = "-u"
            elif option == 'telnet':
                module = "-t"
            elif option == 'ntp':
                module = "-n"
            elif option == 'tftp':
                module = "-j"
            elif option == 'ssl':
                module = "-c"
            elif option == 'webserver':
                module = "-w"
            elif option == 'ios_http':
                module = "-z"
            elif option not in modules:
                print("// %sErrore%s: Modulo non valido."%(red,end, blue,end))
                return menu()
            if argument == None:
                print("// %sErrore%s: %sCiscoTorch%s richiede un indirizzo."%(red,end, blue,end))
                return menu()
            os.system("cisco-torch %s %s"%(module, argument))
            print("")
        else:
            print("// %sErrore%s: %sCiscoTorch%s richiede un modulo e un indirizzo - %sciscotorch -h%s per i comandi."%(red,end, blue,end, blue,end))
        return menu()
    elif command == 'p0f':
        os.system("gnome-terminal -- p0f -p")
        return menu()
    elif command == 'snmpcheck':
        if option:
            os.system("snmp-check %s"%(option))
            print("")
            return menu()
        else:
            print("// Snmp-Check funziona solo se il bersaglio ha la porta 161 aperta.")
            print("// %sErrore%s: %sSnmp-Check%s richiede un indirizzo IP locale."%(red,end, blue,end))
            return menu()
    elif command == 'sslstrip':
        print("// Logs al termine in %sLogs/sslstrip.txt%s"%(blue,end))
        print("")
        os.system("sslstrip --all -w Logs/sslstrip.txt -l 8080")
        print("")
        return menu()
    elif command == 'bluelog':
        os.system("bluelog -n -m -c -f -t -e -i hci0 -o Logs/bluelog.log -v")
        return menu()
    elif command == 'dhcpig':
        print("")
        os.system("cd Tools/DHCPig/ && python pig.py -a -i -l -g -r -n -c %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
        print("")
        return menu()
    elif command == "voiphopper":
        if option:
            os.system("voiphopper -i %s -c 0"%(option))
            print("")
            return menu()
        else:
            print("// %sErrore%s: %sVoipHopper%s richiede un interfaccia di rete."%(red,end, blue,end))
            return menu()

    # Exploiting
        # Payload Generator
    elif command == 'chaos':
        os.system("reset")
        os.system("cd Tools/CHAOS/ && go run CHAOS.go")
        logo_menu()
    elif command == 'overthruster':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/OverThruster/OverThruster.py")
        return menu()
    elif command == 'arcanus':
        os.system("reset")
        os.system("cd Tools/ARCANUS/ && ./ARCANUS")
        logo_menu()
    elif command == 'evildroid':
        os.system("reset")
        os.system("cd Tools/Evil-Droid/ && ./evil-droid")
        logo_menu()
    elif command == 'ezsploit':
        os.system("reset")
        os.system("cd Tools/ezsploit/ && ./ezsploit.sh")
        logo_menu()
    elif command == 'zirikatu':
        os.system("reset")
        os.system("cd Tools/zirikatu/ && ./zirikatu.sh")
        os.system("rm source/ output/ handler/ -r")
        logo_menu()
    elif command == 'kautilya':
        os.system("cd Tools/Kautilya/ && ruby kautilya.rb")
        logo_menu()
    elif command == 'debinject':
        os.system("cd Tools/Debinject/ && python debinject.py")
        logo_menu()
        # Exploiting
    elif command == 'armitage':
        os.system("gnome-terminal -- armitage")
        return menu()
    elif command == 'setoolkit' or command == 'set' or command == 's.e.t':
        os.system("gnome-terminal -- setoolkit")
        return menu()
    elif command == 'fatrat' or command == 'thefatrat':
        os.system("gnome-terminal -- fatrat")
        return menu()
    elif command == 'eggshell':
        os.system("reset")
        os.system("cd Tools/EggShell/ && python eggshell.py")
        logo_menu()
    elif command == 'shellsploit':
        os.system("gnome-terminal -- shellsploit")
        return menu()
    elif command == 'beelogger':
        os.system("cd Tools/BeeLogger/ && python bee.py")
        logo_menu()
    elif command == 'saint':
        os.system("cd Tools/sAINT/ && java -jar sAINT.jar")
        logo_menu()
    elif command == 'brutal':
        os.system("./Tools/Brutal/Brutal.sh")
        logo_menu()
    elif command == 'astroid':
        os.system("cd Tools/astroid/ && ./astroid.sh")
        logo_menu()
    elif command == 'jexboss':
        if option:
            os.system("cd Tools/jexboss/ && python jexboss.py -u %s"%(option))
        else:
            print("// %sErrore%s: %sJexboss%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'weeman':
        os.system("reset")
        os.system("cd Tools/weeman/ && python weeman.py")
        logo_menu()
    elif command == 'u3pwn':
        os.system("gnome-terminal -- u3-pwn")
        return menu()
    elif command == 'koadic':
        os.system("cd Tools/koadic/ && ./koadic")
        logo_menu()
    elif command == 'pentestly':
        os.system("cd Tools/pentestly/ && ./pentestly")
        logo_menu()
    elif command == 'l0l':
        os.system("cd Tools/l0l/ && ./l0l")
        logo_menu()
    elif command == 'termineter':
        os.system("gnome-terminal -- termineter")
        return menu()
    elif command == 'kayak':
        os.system("gnome-terminal -- kayak")
        return menu()
    elif command == 'pybomber':
        print("")
        os.system("cd Tools/pybomber/ && python smsbomber.py")
        logo_menu()
    elif command == 'ciscoge':
        if option:
            if argument:
                os.system("cd Tools/cisco-global-exploiter/ && perl cge.pl %s %s"%(option,argument))
                return menu()
            else:
                os.system("cd Tools/cisco-global-exploiter/ && perl cge.pl")
                print("\n// %sErrore%s: %sCiscoge%s richiede un metodo d'attacco (1-14)."%(red,end, blue,end))
                return menu()
        else:
            os.system("cd Tools/cisco-global-exploiter/ && perl cge.pl")
            print("\n// %sErrore%s: %sCiscoge%s richiede un bersaglio locale ed un metodo d'attacco (1-14)."%(red,end, blue,end))
            return menu()
    elif command == 'yersinia':
        print("// Premi %sq%s per chiudere la finestra di yersinia."%(blue,end))
        os.system("gnome-terminal --geometry=80x25 -- yersinia -I")
        os.system("xterm -e 'rm yersinia.log'")
        return menu()
    elif command == 'wole':
        if option:
            if option == '-h':
                print("")
                print("// WOL-E: Wake on Lan Explorer")
                print("")
                print("// %sComandi WOL-E%s:"%(bright_green,end))
                print(" Come usarlo: $ wole <module>")
                print("")
                print("// %sModuli%s:"%(bright_green,end))
                print(" [ sniff / detect_apple_mac / wakeup ]")
                print("")
                return menu()
            if option == 'sniff':
                os.system("gnome-terminal -- wol-e -s -i %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
                return menu()
            elif option == 'wakeup':
                os.system("wol-e -fa")
                return menu()
            elif option == 'detect_apple_mac':
                os.system("wol-e -f")
                return menu()
            else:
                print("// %sErrore%s: Modulo non valido."%(red,end))
                return menu()
        else:
            print("// %sErrore%s: %sWOL-E%s richiede un modulo - %swole -h%s per i comandi."%(red,end, blue,end, blue,end))
            return menu()
    elif command == 'responder':
        os.system("responder -wrfdbv -P -I %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
        print("")
        return menu()
    elif command == 'xspy':
        os.system("gnome-terminal -- xspy")
        return menu()

    # MultiTool
    elif command == 'hakkuf' or command == 'hakku':
        os.system("reset")
        os.system("cd Tools/hakkuframework/ && ./hakku")
        logo_menu()
    elif command == 'penbox':
        os.system("gnome-terminal -- python " + os.getcwd() + "/Tools/PenBox/penbox.py")
        return menu()
    elif command == 'simple-ducky':
        os.system("gnome-terminal -- simple-ducky")
        return menu()
    elif command == 'discover':
        os.system("cd Tools/discover/ && ./discover.sh")
        logo_menu()
    elif command == 'zarp':
        os.system("cd Tools/zarp/ && python zarp.py")
        logo_menu()
    elif command == 'sb0x':
        os.system("cd Tools/sb0x-project/ && python sb0x.py")
        logo_menu()
    elif command == 'atscan':
        os.system("cd Tools/ATSCAN/ && perl atscan.pl --interactive")
        logo_menu()
    elif command == 'inguma':
        print("")
        os.system("cd Tools/inguma/ && python inguma.py")
        logo_menu()
    elif command == 'websploit':
        os.system("reset")
        os.system("cd Tools/websploit/ && ./websploit")
        logo_menu()

    # Others
    elif command == 'printerspam':
        print("")
        os.system("./Tools/printerspam.sh")
        print("")
        return menu()
    elif command == 'httrack':
        if option:
            os.system("gnome-terminal -- httrack %s -O Logs/httrack/%s/"%(option, option))
            print("// %sAttenzione%s: Dati salvati nella cartella del Tool in %sLogs/httrack/%s/%s"%(bright_yellow,end,blue,option,end))
        else:
            print("// %sErrore%s: %sHttrack%s richiede un indirizzo."%(red,end, blue,end))
        return menu()
    elif command == 'metagoofil':
        file_types = ["pdf","doc","xls","ppt","odp","ods","docx","xlsx","pptx"]
        if option:
            if option == '-h':
                print("")
                print("// %sComandi Metagoofil%s:"%(bright_green,end))
                print(" Come usarlo: $ metagoofil <domain (example.com)> <filetype to download>")
                print("")
                print("// %sFileType%s:"%(bright_green,end))
                print(" [ pdf / doc / xls / ppt / odp / ods / docx / xlsx / pptx ]")
                print("")
                print("// %sAttenzione%s:"%(bright_yellow,end))
                print(" Per scaricare molteplici file digita i 'FileTypes' nel seguente modo:")
                print(" %spdf,doc,xls,...%s"%(blue,end))
                print("")
                return menu()
            elif option:
                if argument:
                    if argument not in file_types:
                        print("// %sErrore%s: Formato non valido."%(red,end))
                        return menu()
                    os.system("metagoofil -d %s -t %s -o Logs/MetaGF/ -f metagf.html")
                    print("// File salvati in %sLogs/MetaGF/metagf.html%s (se scaricati)."%(blue,end))
                else:
                    print("// %sErrore%s: %sMetagoofil%s richiede un tipo di file da scaricare."%(red,end, blue,end))
            else:
                print("// %sErrore%s: %sMetagoofil%s richiede un indirizzo e un tipo di file da scaricare."%(red,end, blue,end))
        else:
            print("// %sErrore%s: %sMetagoofil%s richiede una serie di argomenti. Digita %smetagoofil -h%s per i comandi."%(red,end, blue,end, blue,end))
        return menu()

    # WAN
    elif command == 'ngrok':
        ngrok_srvc_list = ["tcp","http","tsl"]
        if option in ngrok_srvc_list:
            try:
                if int(argument) < 1 or int(argument) > 65535:
                    print("// %sErrore%s: Porta non valida."%(red,end))
                    return menu()
            except ValueError:
                print("// %sErrore%s: Porta non valida."%(red,end))
                return menu()
            except TypeError:
                print("// %sErrore%s: %sNgrok%s richiede una Porta."%(red,end, blue,end))
                return menu()
            os.system("gnome-terminal -- ngrok %s %s"%(option, argument))
        else:
            print("// %sErrore%s: %sNgrok%s richiede un servizio valido e una porta da avviare come tunnel."%(red,end, blue,end))
        return menu()

    # else input
    else:
        print("// %sErrore%s: Comando non valido - %shelp%s per i comandi."%(red,end, blue,end))
        return menu()

def help():
    print("")
    print("%sComandi%s:                                                                               "%(bright_green + underline, end)) ; sleep(.01)
    print("$ help   - info - reload  - net_restart  - mapscii  - ftp  - ping *                        ") ; sleep(.01)
    print("$ banner - kill - restart - ifconfig [*] - updatedb - os * - quit/exit                     ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sSpoofing%s:                                                                              "%(bright_green + underline, end)) ; sleep(.01)
    print("$ torghot [stop/start] - macchanger                                                        ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sPassword Attacks%s:                                                                      "%(bright_green + underline, end)) ; sleep(.01)
    print("$ androidpincrack * - extract-hash * - ioscrack * - findmyhash * - hash-identifier         ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sSniffing%s:                                                                              "%(bright_green + underline, end)) ; sleep(.01)
    print("$ bettercap - ettercap - morpheus - mitmf  - voiphopper *  - bluelog                       ") ; sleep(.01)
    print("$ wireshark - cdpsnarf - sslstrip - mitmap - cookie-cadger - p0f                           ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sScanning%s:                                                                              "%(bright_green + underline, end)) ; sleep(.01)
    print("-%sLocal%s:                                                                                "%(bright_green, end))
    print("$ nmap * - netdiscover - ciscotorch * - snmpcheck * - dhcpig                               ") ; sleep(.01)
    print("-%sWeb%s:                                                                                  "%(bright_green, end)) ; sleep(.01)
    print("--%sHidden Directories&Files Detection%s:                                                  "%(bright_green, end)) ; sleep(.01)
    print("$ cpscan * - breacher * - dotdotpwn * - parsero * - angryfuzzer * - dirb * - dirbuster     ") ; sleep(.01)
    print("--%sScanners%s (%sVulnerability + Gathering + Others%s):                                   "%(bright_green, end, bright_green,end)) ; sleep(.01)
    print("$ theharvester *  - uniscan *  - wpscan *  - vbscan * - dtect   - siege *                  ") ; sleep(.01)
    print("$ blindelephant * - joomscan * - sslscan * - onioff * - fimap * - jaidam                   ") ; sleep(.01)
    print("$ urlextractor *  - droopescan - whatweb * - sn1per * - zenmap  - crips                    ") ; sleep(.01)
    print("$ instarecon *    - operativef - xattacker - sslyze * - bingoo  - striker                  ") ; sleep(.01)
    print("$ xsssniper *     - uatester * - dmitry *  - dracnmap - amap *  - inspy *                  ") ; sleep(.01)
    print("$ automater *     - webscarab  - recon-ng  - red_hawk - hping3  - zaproxy                  ") ; sleep(.01)
    print("$ cutycapt *      - xsstracer  - arachni * - nikto *  - a2sv *  - dsxs *                   ") ; sleep(.01)
    print("$ ktfconsole      - ip2host *  - sshscan * - maltego  - vega    - cewl *                   ") ; sleep(.01)
    print("--%sEnumerators%s:                                                                         "%(bright_green, end)) ; sleep(.01)
    print("$ sublist3r * - dnsenum * - dnsmap * - smtpuserenum *                                      ") ; sleep(.01)
    print("--%sAll-in-one%s:                                                                          "%(bright_green, end)) ; sleep(.01)
    print("$ sechub - tulpar * - pentmenu                                                             ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sGathering%s:                                                                             "%(bright_green + underline, end)) ; sleep(.01)
    print("-%sGeolocation%s:                                                                          "%(bright_green, end)) ; sleep(.01)
    print("$ geoip * - whois *                                                                        ") ; sleep(.01)
    print("-%sCredentials Verification%s:                                                             "%(bright_green, end)) ; sleep(.01)
    print("$ credmap * - knockmail                                                                    ") ; sleep(.01)
    print("-%sOthers%s:                                                                               "%(bright_green, end)) ; sleep(.01)
    print("$ infoga *                                                                                 ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sNetworking%s:                                                                            "%(bright_green + underline, end)) ; sleep(.01)
    print("-%sWiFi Attacks%s:                                                                         "%(bright_green, end)) ; sleep(.01)
    print("$ airgeddon - wpsbreaker - fluxion  - wifiphisher *                                        ") ; sleep(.01)
    print("$ netattack - wifijammer - fakeauth - wifite                                               ") ; sleep(.01)
    print("-%sExploitation%s (%sLocal + Non-Local%s):                                                 "%(bright_green,end, bright_green,end)) ; sleep(.01)
    print("$ routersploit - eggshell - armitage - jexboss * - setoolkit  - kayak  - msfconsole        ") ; sleep(.01)
    print("$ shellsploit  - pybomber - wirespy  - pentestly - termineter - weeman - wole *            ") ; sleep(.01)
    print("$ printerspam  - yersinia - koadic   - ciscoge * - responder  - l0l                        ") ; sleep(.01)
    print("-%sWeb Exploitation%s:                                                                     "%(bright_green, end)) ; sleep(.01)
    print("--%sStress Testing%s:                                                                      "%(bright_green, end)) ; sleep(.01)
    print("$ zambie - xerxes * - ufonet - goldeneye * - torshammer * - t50 * - thcssldos *            ") ; sleep(.01)
    print("--%sBruteForce%s:                                                                          "%(bright_green, end)) ; sleep(.01)
    print("$ medusa * - brutesploit - blazy - xhydra - hydra ftp * - fbht - cheetah *                 ") ; sleep(.01)
    print("--%sSQLi%s:                                                                                "%(bright_green, end)) ; sleep(.01)
    print("$ sqlmap * - sqliv [web/dork] * - commix * - jsql - nosqlmap - sqldict                     ") ; sleep(.01)
    print("--%sSite Cloner + File Donwloader%s:                                                       "%(bright_green, end)) ; sleep(.01)
    print("$ httrack * - metagoofil *                                                                 ") ; sleep(.01)
    print("--%sExploitation%s:                                                                        "%(bright_green, end)) ; sleep(.01)
    print("$ ipmipwn * - intrace * - miranda - powerfuzzer - burpsuite                                ") ; sleep(.01)
    print("--%sWan%s:                                                                                 "%(bright_green,end)) ; sleep(.01)
    print("$ ngrok [tcp/http/tsl] [port]                                                              ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sExploiting%s:                                                                            "%(bright_green + underline, end)) ; sleep(.01)
    print("-%sPayload Generator%s:                                                                    "%(bright_green, end)) ; sleep(.01)
    print("$ debinject - fatrat - ezsploit - arcanus - u3pwn - zirikatu                               ") ; sleep(.01)
    print("$ evildroid - brutal - kautilya - astroid - chaos - overthruster                           ") ; sleep(.01)
    print("-%sKeylogging%s:                                                                           "%(bright_green, end)) ; sleep(.01)
    print("$ beelogger - xspy                                                                         ") ; sleep(.01)
    print("-%sSpyware Generator%s:                                                                    "%(bright_green, end)) ; sleep(.01)
    print("$ saint                                                                                    ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("%sAll-in-one%s:                                                                            "%(bright_green + underline, end)) ; sleep(.01)
    print("$ hakkuf - sb0x - inguma - penbox - simple-ducky - discover - zarp - atscan - websploit    ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    print("// %sAttenzione%s: L'asterisco (*) indica la richiesta di un argomento. Digita il nome del "%(bright_yellow,end)) ; sleep(.01)
    print("               Tool per ulteriori informazioni su di esso.                                 ") ; sleep(.01)
    print("                                                                                           ") ; sleep(.01)
    return menu()
################################################################################
def startup():
    os.system("rm Logs/verify_first_boot.txt")
    time.sleep(.1)
    print("// Welcome to %sfsociety%s!"%(red,end))
    time.sleep(.3)
    sys.stdout.write("// Avvio servizi ")
    sys.stdout.flush()
    os.system("updatedb")
    os.system("service postgresql start")
    os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
    sys.stdout.write("[ %sOK%s ]\n\n"%(bright_green,end))
    sys.stdout.flush()
    logo_print()
def logo_menu():
    sys.stdout.write(end)
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=28, cols=91))
    os.system("reset")
    now = datetime.datetime.now()
    print("")
    print('  888888 88   88  dP""db 88  dP     .dP"Y8  dP"Yb   dP""b8 88 888888 888888 Yb  dP        ') ; sleep(.02)
    print('  88__   88   88 dP   `" 88odP      `Ybo." dP   Yb dP   `" 88 88__     88    YbdP         ') ; sleep(.02)
    print('  88""   Y8   8P Yb      88"Yb      o.`Y8b Yb   dP Yb      88 88""     88     8P          ') ; sleep(.02)
    print('  88     `YbudP   YboodP 88  Yb     8bodP   YbodP   YboodP 88 888888   88    dP  %s'%(red+versione+end)) ; sleep(.02)
    print("  [  ~ %sSkull00%s / %s%s%s    ]                                                         "%(bright_green,end, bright_green,Tools,end)) ; sleep(.02)
    print("") ; sleep(.1)
    try:
        o = open("Logs/verify_first_boot.txt")
        return startup()
    except IOError:
        logo_print()
def logo_print():
    try:
        print("// Public IP : %s"%(blue + requests.get('http://ip.42.pl/raw').text + end)) ; sleep(.05)
        print("// Local IP  : %s"%(blue +[l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0] + end)) ; sleep(.05)
        print("// Interface : %s"%(blue + netifaces.gateways()['default'][netifaces.AF_INET][1] + end)) ; sleep(.05)
    except (socket.error,requests.exceptions.ConnectionError,KeyError):
        if socket.error:
            print("// Local IP  : " + blue + "-" + end)
        if requests.exceptions.ConnectionError:
            print("// Public IP : " + blue + "-  " + end + "// %sAttenzione%s: Disattiva %sTorGhost%s o verifica la tua connessione."%(bright_yellow,end, blue,end))
        if KeyError:
            print("// Interface : " + blue + "-" + end)
    print("// System    : %s"%(blue + platform.linux_distribution()[0] + end)) ; sleep(.05)
    print("") ; sleep(.05)
    return menu()
################################################################################
def exit():
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=24, cols=80))
    os.system("clear")
    print("")
    sys.stdout.write("// Fermo i servizi ")
    sys.stdout.flush()
    os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
    sys.stdout.write("[ %sOK%s ]\n"%(bright_green,end))
    sys.stdout.flush()
    print("")
    try:
        os.rename("*.txt", "Logs/")
    except OSError:
        pass
    sys.exit()
def info():
    print("") ; sleep(.02)
    print("// Versione       : %s"%(red + versione + end)) ; sleep(.02)
    print("// Autore         : %sSkull00%s"%(bright_green, end)) ; sleep(.02)
    print("// Compatibilita' : %sKali Linux (32/64 bit)%s"%(blue,end)) ; sleep(.02)
    print("") ; sleep(.02)
    return menu()
################################################################################
def firststartup():
    os.system("clear")
    print("""
// %sCondizioni%s:
   Rubare dati, invadere la Privacy di altre persone, e altro ancora sono
   reati perseguibili penalmente. Con questo, non mi assumo nessuna
   responsabilita' per l'uso che ne farai di questo programma.
   %sHai un cervello, dunque pensa prima di premere invio!%s

    """%(underline+bright_green,end, red,end)) ; sleep(.05)
    try:
        startup_cond = raw_input("// Premi invio per continuare ")
        os.system("echo 'file destinato al macello' > Logs/verify_first_boot.txt") # verifica primo avvio
        logo_menu()
    except EOFError:
        sys.exit("\n")
    except KeyboardInterrupt:
        sys.exit("\n")

if __name__ == "__main__":
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=24, cols=80))
    try:
        installer_done = open("Tools/Complete.txt")
        firststartup()
    except IOError:
        sys.exit("\n// %sAttenzione%s: Esegui %sinstaller.py%s per usare il programma.\n"%(bright_yellow,end,red, end))
